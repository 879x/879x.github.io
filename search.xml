<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git使用</title>
      <link href="/2024/05/24/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/05/24/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、git介绍"><a href="#一、git介绍" class="headerlink" title="一、git介绍"></a>一、git介绍</h1><h2 id="1-发展过程"><a href="#1-发展过程" class="headerlink" title="1. 发展过程"></a>1. 发展过程</h2><p>Git最初是由Linux开发者Linus用了仅仅两周时间纯C语言编写而成，在编写完成之后就立马上手接管Linux源代码，不过在此之前Linux是由BitMover公司开发的BitKeeper<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F&spm=1001.2101.3001.7020">分布式版本控制系统</a>所管理源代码，它是商业收费的分布式版本控制器，但BitMover公司看中Linux开源精神，免费授权给Linux社区使用，在2002年时，Linux开始使用BitKeeper分布式版本控制系统管理源代码，但好景不长，有一天Linux社区成员Andrew（samba（局域网共享文件c&#x2F;s程序）的作者）试图破解BitKeeper共享给所有人使用，被BitMover公司发现并收回了免费使用的版权，随后Linus就用了两周时间开发出了git(两周时间包括测试)，也就是目前为止最好用的分布式版本控制系统。</p><p>大名鼎鼎的github用的就是git系统来管理它们的网站，这里需要区分一下，github和git是两个东西，github是一个社区，git是一个服务系统，github只支持git分布式系统，所以故名成为github。</p><h2 id="2-集中式与分布式的区别"><a href="#2-集中式与分布式的区别" class="headerlink" title="2. 集中式与分布式的区别"></a>2. 集中式与分布式的区别</h2><p>除了git还有svn、cvs这样的版本控制系统，它们的区别在于一个是分布式一个是集中式</p><p>集中式就是svn和csv这样的版本控制系统，分布式是git</p><p>区别在于集中式的版本控制系统每次在写代码时都需要从服务器中拉取一份下来，并且如果服务器丢失了，那么所有的就都丢失了，你本机客户端仅保存当前的版本信息，换句话说，集中式就是把代码放在一个服务器上集中管理，你的所有回滚等操作都需要服务器的支持。</p><p>分布式的区别在于，每个人的电脑都是服务器，当你从主仓库拉取一份代码下来后，你的电脑就是服务器，无需担心主仓库被删或者找不到的情况，你可以自由在本地回滚，提交，当你想把自己的代码提交到主仓库时，只需要合并推送到主仓库就可以了，同时你可以把自己的代码新建一份仓库分享给其它人。</p><p>像集中式它们都有一个主版本号，所有的版本迭代都以这个版本号为主，而分布式因为每个客户端都是服务器，git没有固定的版本号，但是有一个由哈希算法算出的id，用来回滚用的，同时也有一个master仓库，这个仓库是一切分支仓库的主仓库，我们可以推送提交到master并合并到主仓库上，主仓库的版本号会迭代一次，我们客户端上的git版本号无论迭代多少次，都跟master无关，只有合并时，master才会迭代一次。</p><h1 id="二、命令"><a href="#二、命令" class="headerlink" title="二、命令"></a>二、命令</h1><h2 id="1-初始化配置"><a href="#1-初始化配置" class="headerlink" title="1. 初始化配置"></a>1. 初始化配置</h2><p><strong>配置git环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global</span><br></pre></td></tr></table></figure><blockquote><p>config：参数是用来配置git环境的</p><p>–global：长命令表示配置整个git环境</p><p>–system：系统配置，对所有用户生效</p></blockquote><p><strong>用户名配置</strong></p><p>user 代表用户，name代表配置用户的名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br></pre></td></tr></table></figure><p><strong>邮箱配置</strong></p><p>user代表用户，.email代表配置用户的邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>如果不配置，当遇到要求权限的远程仓库会让你在手动输入用户名、邮箱、以及密码</p><p><strong>查看配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><h2 id="2-新建仓库"><a href="#2-新建仓库" class="headerlink" title="2. 新建仓库"></a>2. 新建仓库</h2><p><strong>创建本地仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>创建后会出现 .git 目录</p><p>输入以下命令显示仓库所有文件 </p><p>.git目录是隐藏目录所以需要加 <code>-a</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p><strong>克隆远程仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;远程仓库链接&gt;</span><br></pre></td></tr></table></figure><h2 id="3-工作区域和文件状态"><a href="#3-工作区域和文件状态" class="headerlink" title="3. 工作区域和文件状态"></a>3. 工作区域和文件状态</h2><p>工作区域：</p><ul><li>工作区(Working Directory)：电脑空间 .git所在的目录</li><li>暂存区(Staging Area&#x2F;Index)：用于保存即将提交到Git仓库的修改内容</li><li>本地仓库(Local Repository)：是Git存储代码和版本信息的主要位置</li></ul><p><img src="https://s2.loli.net/2024/06/14/LXvpGt5HyxDnBTr.png" alt="image-20240614100652685"></p><p>文件状态：</p><ul><li>未跟踪(Untrack)：新创建的，还没有被Git管理起来的文件</li><li>未修改(Unmodified)：被Git管理，但是文件的内容没有发生变化</li><li>已修改(Modified)：已经修改了文件，但是还没有添加到暂存区里面</li><li>已暂存(Staged)：修改后，并且已经添加到了暂存区域内的文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202406141012907.png" alt="image-20240614101237840"></p><h2 id="4-添加和提交文件"><a href="#4-添加和提交文件" class="headerlink" title="4. 添加和提交文件"></a>4. 添加和提交文件</h2><p><strong>查看仓库状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>如果仓库里有文件，但是没有添加到暂存区。可以看到有一行红色字体的目录，此目录处在未被跟踪的状态</p><p><img src="https://s2.loli.net/2024/06/14/12yleVnj3u7Ddo8.png" alt="image-20240614101439770"></p><p><strong>添加到暂存区</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><p>git add 支持使用通配符</p><p>例如：我想要添加目录中的所有文件到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>提交后可以看到目录已变成绿色字体并提示等待被提交，并可以使用以下命令来把添加到暂存区的文件在取消暂存 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/14/kSTCJBlZXVh8epr.png" alt="image-20240614101448754"></p><p><strong>提交</strong></p><p>git commit 命令在提交的时候需要使用 -m 参数来指定提交的信息，如果不指定 -m 这个参数，git会进入交互式的界面，默认会使用vim来编辑提交信息</p><p>git commit 只会提交暂存区的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提示信息&quot;</span></span><br></pre></td></tr></table></figure><p><strong>查看提交记录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/14/lfFogwT9aK4PEHZ.png" alt="image-20240614101458513"></p><p>如果觉得提示信息过于繁杂，可以使用 –oneline 来查看简洁的提交记录，这样就只显示每次提交的ID和提交信息了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure><h2 id="5-回退版本"><a href="#5-回退版本" class="headerlink" title="5. 回退版本"></a>5. 回退版本</h2><p>reset命令用于回退版本，可以退回到之前的某一个提交的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure><p>git reset的三种模式</p><p>soft 参数表示回退到某个版本，并且保留工作区和暂存区的所有修改内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft</span><br></pre></td></tr></table></figure><p>hard 参数表示回退到某个版本，并且丢弃工作区和暂存区的所有修改内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure><p>mixed 这个参数就是介于 soft 和 hard  这两个参数之间</p><p>它表示回退到某个版本，并且只保留工作区的修改内容而丢弃暂存区的修改内容</p><p>mixed 也是 reset的默认参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/14/te28HPTM7iprvZ5.png" alt="image-20240614101506014"></p><p><strong>回溯</strong></p><p>git 中的所有操作都是可以回溯的</p><p>使用 git reflog 命令来查看我们操作的历史记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>使用 git reset &lt;版本号&gt; 回到某个操作之前</p><h2 id="6-查看差异"><a href="#6-查看差异" class="headerlink" title="6. 查看差异"></a>6. 查看差异</h2><p>git diff 它可以用来查看文件在工作区、暂存区以及版本库之间的差异，它还可以查看不同版本之间的差异或者文件在两个分支之间的差异</p><p>工作区与暂存区差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>工作区 + 暂存区 与 本地仓库差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><p>暂存区与本地仓库差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --staged</span><br></pre></td></tr></table></figure><p>比较两个版本之间的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;版本ID&gt; &lt;版本ID&gt;</span><br></pre></td></tr></table></figure><p>HEAD 代表最新版本 HEAD~ 代表上一版本 ^ 号也可以</p><p>可以快速比较上一版本和最新版本的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD~ HEAD</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD^ HEAD</span><br></pre></td></tr></table></figure><p>在 ~ 后加上数字，代表最新版本前几个版本</p><p>查看前二个版本和最新版本的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD~2 HEAD</span><br></pre></td></tr></table></figure><p>在最后加上文件名，这样就只会查看指定文件的差异内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD~3 HEAD &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p>比较不同分支差异，在diff后加上分支名称即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;分支名称&gt; &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><h2 id="7-删除文件"><a href="#7-删除文件" class="headerlink" title="7. 删除文件"></a>7. 删除文件</h2><p>如果我们直接删除工作区的文件，在暂存区中文件并没有被删除，需要再次执行 git add 。暂存区中的文件才会被删除</p><p>所以我们可以直接使用 git rm 同时删除工作区和暂存区中的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p>把文件从暂存区删除，但保留在当前工作区中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p>递归删除某个目录下的所有子目录和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r *</span><br></pre></td></tr></table></figure><h2 id="8-忽略文件"><a href="#8-忽略文件" class="headerlink" title="8. 忽略文件"></a>8. 忽略文件</h2><p>.gitignore ：这个文件的作用就是可以让我们忽略掉一些不应该被加入到版本库中的文件</p><p><img src="https://s2.loli.net/2024/06/14/fSbmMtqUDclIFQ1.png" alt="image-20240614101516817"></p><p>如果我想要忽略 other.log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> other.log &gt; .gitigonre</span><br></pre></td></tr></table></figure><p>如果我想要忽略 .log 格式文件</p><p>在.gitigonre 中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br></pre></td></tr></table></figure><p>如果我想要忽略文件夹</p><p>在.gitigonre 中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件夹名称/</span><br></pre></td></tr></table></figure><p>.gitignore 生效有一个前提，那就是忽略的文件不能是已经被添加到版本库中的文件</p><p><strong>.gitignore文件的匹配规则</strong></p><p>从上到下逐行匹配，每一行表示一个忽略模式</p><p><a href="https://git-scm.com/docs/gitignore">git官网匹配规则</a></p><ul><li>空行或者以#开头的行会被Git忽略。一般空行用于可读性的分隔，#一般用作注释</li><li>使用标准的Blob模式匹配，例如：<ul><li>星号*通配任意个字符</li><li>问号？匹配单个字符</li><li>中括号[]表示匹配列表中的单个字符，比如：[abc]表示a&#x2F;b&#x2F;c</li></ul></li><li>两个星号**表示匹配任意的中间目录</li><li>中括号可以使用短中线连接，比如：<ul><li>[0-9]表示任意一位数字，[a-z]表示任意一位小写字母</li></ul></li><li>感叹号！表示取反</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 忽略所有的 .a 文件</span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"># 忽略任何目录下名为 build 的文件夹</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"># 忽略 doc/目录及其所有子目录下的 .pdf 文件</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><p>提示：在github上提供了各种常用语言的忽略文件的模版，在新建仓库的时候可以直接使用，也可以根据自己的需要修改</p><p><a href="https://github.com/github/gitignore">模版仓库</a></p><h2 id="9-推送和拉取"><a href="#9-推送和拉取" class="headerlink" title="9. 推送和拉取"></a>9. 推送和拉取</h2><p>git push命令允许将本地git仓库中的本地分支的提交推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>如果远程分支名和本地分支名相同可以只写一个</p><p>拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="10-关联本地仓库和远程仓库"><a href="#10-关联本地仓库和远程仓库" class="headerlink" title="10. 关联本地仓库和远程仓库"></a>10. 关联本地仓库和远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;别名&gt; &lt;远程仓库地址&gt;</span><br></pre></td></tr></table></figure><h2 id="11-切换分支"><a href="#11-切换分支" class="headerlink" title="11. 切换分支"></a>11. 切换分支</h2><p>使用 git checkout -b参数来创建一个分支，创建完成分支后会自动切换过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><p>使用 git branch 来查看当前属于哪个分支，也就是查看HEAD的指向</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>git checkout -b 等价于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>git branch 如果后面跟着名字则会创建分支，但不会切换</p><p>git checkout 后面如果是分支名称则切换过去</p><p><strong>切换分支</strong></p><p>当我们向切换分支可以使用 git checkout 来切换，如刚刚我们创建了一个分支dev并切换了过去，现在切换回master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>git checkout的作用是检出，如果是文件的话，会放弃对文件的缓存区操作，但是要使用reset重置一下变更才行。</p><p>如果是分支的话会切换过去。</p><p><strong>合并分支</strong></p><p>当我们新建分支并做完工作之后，想要把分支提交至master，只需要切换到master仓库，并执行git merge 分支名就可以了</p><blockquote><p>持续更新中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用ChatGPT</title>
      <link href="/2024/05/04/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8GPT/"/>
      <url>/2024/05/04/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8GPT/</url>
      
        <content type="html"><![CDATA[<h1 id="一、chatgpt介绍"><a href="#一、chatgpt介绍" class="headerlink" title="一、chatgpt介绍"></a>一、chatgpt介绍</h1><p>ChatGPT是一种基于人工智能的自然语言处理模型，由OpenAI开发。它是GPT系列模型的一部分，GPT代表“生成式预训练模型”（Generative Pre-trained Transformer）。ChatGPT专注于对话生成任务，即模拟人类对话的过程。</p><p>那么如何使用chatgpt的重点就是怎么向chatgpt提问</p><h1 id="二、如何向chatgpt提问"><a href="#二、如何向chatgpt提问" class="headerlink" title="二、如何向chatgpt提问"></a>二、如何向chatgpt提问</h1><p>例如：我现在有一个任务 学习 INSERT INTO SELECT </p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041500508.png"></p><p>可以看到提问后，chatgpt将 insert into select 的语法都介绍了出来，并给出了一个例子</p><p>要练习它这个例子，需要有例子中的表，我们让它编写创建例子中表的sql</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041512790.png"></p><p>让它帮忙添加一些数据</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041518194.png"></p><p>在练习完基本的 insert into select语法后，可以进行更复杂的练习</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041520136.png"></p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041521348.png"></p><p>当你从外界获取一些信息，也可以对chatgpt进行提问</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041529638.png"></p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041530657.png"></p><p>再进行了这些练习后，询问chatgpt是否有更复杂的方法</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041533374.png"></p><p>让chatgpt 做出示范</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041536325.png"></p><p>之后自己对这些sql进行练习，通过对 gpt 提问，学习 insert into select 的任务大致就这样完成了</p><p>当然这只是示例，对于向chatgpt提问要注意几点：</p><ul><li>提供必要的背景信息：例如你想让 chatgpt 写一个查询a表数据，根据 age 排序的 sql，但是不给 a 表的结构信息，这样 chatgpt 怎么给出准确的 sql 呢</li><li>具体描述需求：确保提问中包含具体的需求和要求，这样 chatgpt 就能给出更符合期望的答案。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2024/05/04/sql/"/>
      <url>/2024/05/04/sql/</url>
      
        <content type="html"><![CDATA[<h1 id="一、INSERT-INTO-SELECT"><a href="#一、INSERT-INTO-SELECT" class="headerlink" title="一、INSERT INTO SELECT"></a>一、INSERT INTO SELECT</h1><h2 id="1-什么是-INSERT-INTO-SELECT-？"><a href="#1-什么是-INSERT-INTO-SELECT-？" class="headerlink" title="1.什么是 INSERT INTO SELECT ？"></a>1.什么是 INSERT INTO SELECT ？</h2><p>INSERT INTO SELECT 允许我们从一个表中选择数据，并将其插入到另一个表中。这个功能非常适用于需要从一个表中复制数据到另一个表的情况，或者将查询结果存储到新的表中。</p><h2 id="2-INSERT-INTO-SELECT的基本语法格式"><a href="#2-INSERT-INTO-SELECT的基本语法格式" class="headerlink" title="2.INSERT INTO SELECT的基本语法格式"></a>2.INSERT INTO SELECT的基本语法格式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 目标表 (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ...)</span><br><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 源表</span><br><span class="line"><span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="3-INSERT-INTO-SELECT的基本使用"><a href="#3-INSERT-INTO-SELECT的基本使用" class="headerlink" title="3.INSERT INTO SELECT的基本使用"></a>3.INSERT INTO SELECT的基本使用</h2><p><strong>例如：</strong>我有两张表，分别是 <code>employees</code> 和 <code>new_hires</code>表，employees 表用于存储雇员的基本信息，new_hires 表是一个暂存表，用于存储最近招聘的新员工信息。</p><p>employees 表结构：</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405040900144.png"></p><p>new_hires 表结构与 employess 表结构相同</p><p><strong>现在我想要将 2020 年之后的员工信息添加到 new_hires表中</strong></p><p>我们可以使用 WHERE 条件查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> new_hires(employee_id, first_name, last_name, hire_date)</span><br><span class="line"><span class="keyword">SELECT</span> employee_id, first_name, last_name, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> hire_date <span class="operator">&gt;</span> <span class="string">&#x27;2020-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>我们也可以使用子查询（只用来演示如何在当中使用子查询）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> new_hires(employee_id, first_name, last_name, hire_date)</span><br><span class="line"><span class="keyword">SELECT</span> employee_id, first_name, last_name, hire_date</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> hire_date <span class="operator">&lt;</span> <span class="string">&#x27;2020-01-01&#x27;</span>) <span class="keyword">AS</span> subquery;</span><br></pre></td></tr></table></figure><p><strong>例如：</strong>我有三张表，分别是<code>customers</code>表、<code>orders</code>表和<code>new_customers</code>表，customers表用于存储顾客信息，orders表用于存储顾客下的订单信息，new_customers表用于暂存新的顾客信息</p><p>customers 表结构：</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405040942390.png"></p><p>new_customers 表结构与 customers 表结构相同。</p><p>orders 表结构：</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405040944066.png"></p><p><strong>现在我想要将购买日期在2020年之后的订单中的顾客信息添加到 new_customers 表中</strong></p><p>我们可以使用 连接 以使用 oders 表中的 日期 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> new_customers (customer_id, customer_name, email)</span><br><span class="line"><span class="keyword">SELECT</span> c.customer_id, c.customer_name, c.email</span><br><span class="line"><span class="keyword">FROM</span> customers c</span><br><span class="line"><span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> c.customer_id <span class="operator">=</span> o.customer_id</span><br><span class="line"><span class="keyword">WHERE</span> o.purchase_date <span class="operator">&gt;</span> <span class="string">&#x27;2020-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="二、批量更新"><a href="#二、批量更新" class="headerlink" title="二、批量更新"></a>二、批量更新</h1><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041011044.png"></p><p>例如：我有一个员工表，我想给2020年之后入职的员工增加 10% 的薪水，给2020年之前入职的员工增加 20% 的薪水。</p><p>我们可以用 case when then</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> </span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> hire_date <span class="operator">&gt;=</span> <span class="string">&#x27;2020-01-01&#x27;</span> <span class="keyword">THEN</span> salary <span class="operator">*</span> <span class="number">1.1</span>  <span class="comment">-- 入职日期在 2020 年之后，增加 10%</span></span><br><span class="line">        <span class="keyword">ELSE</span> salary <span class="operator">*</span> <span class="number">1.2</span>  <span class="comment">-- 入职日期在 2020 年之前，增加 20%</span></span><br><span class="line">    <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>更新后数据</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041016426.png"></p><p>我们还可以用where 限定 增薪 在 id 1,2,3,5中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> </span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> hire_date <span class="operator">&gt;=</span> <span class="string">&#x27;2020-01-01&#x27;</span> <span class="keyword">THEN</span> salary <span class="operator">*</span> <span class="number">1.1</span>  <span class="comment">-- 入职日期在 2020 年之后，增加 10%</span></span><br><span class="line">        <span class="keyword">ELSE</span> salary <span class="operator">*</span> <span class="number">1.2</span>  <span class="comment">-- 入职日期在 2020 年之前，增加 20%</span></span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>可以看到除了 id 为4的员工都进行了 增薪</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041019134.png"></p><h1 id="三、多表联查"><a href="#三、多表联查" class="headerlink" title="三、多表联查"></a>三、多表联查</h1><p><strong>表别名</strong></p><ul><li>给表起一个短一点的名字</li><li>在多表关联查询时，如果多个表之间存在同名的列，则必须使用表别名来限定列的使用。</li><li>在<strong>from</strong>子句中给表起别名，现起现用。</li><li>由于from子句最先执行，故一旦在from子句中为表指定了别名，则必须在剩下的子句中都使用表别名（不同名的列可以不用表别名限定，但最好用），不允许再使用原来的名字。</li></ul><p>部门表：</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041044409.png"></p><p>员工表：</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041045111.png"></p><p>员工工资表：</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041046539.png"></p><h2 id="1-内连接"><a href="#1-内连接" class="headerlink" title="1.内连接"></a>1.内连接</h2><p>内连接（Inner Join）用于合并两个表中符合指定条件的行。它返回两个表中符合条件的交集。</p><p>例如：我想要找出每个员工所在部门的名称以及其工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.first_name, e.last_name, d.department_name, s.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries s <span class="keyword">ON</span> e.employee_id <span class="operator">=</span> s.employee_id;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041112751.png"></p><p>可以看到除了id为4的员工，其他的员工信息都查询出来了</p><p>因为内连接的特性，只有那些在 <code>employees</code>、<code>departments</code> 和 <code>salaries</code> 表中都有匹配值的行才会被包含在结果中</p><h2 id="2-左连接"><a href="#2-左连接" class="headerlink" title="2.左连接"></a>2.左连接</h2><p>左连接（Left Join）用于从左表（左侧的表）中选择所有的行，同时根据指定的条件将右表（右侧的表）中的匹配行连接起来。如果右表中没有与左表匹配的行，则生成的结果集中右侧的所有列都将包含 NULL 值。</p><p>例如：我想要找出所有员工的信息，包括他们所在部门的名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.first_name, e.last_name, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041112179.png"></p><p>可以看到因为没有为id为4的员工分配部门，作为右表的部门表没有与左表匹配的行，于是为NULL</p><p>如果只想要在左表有而右表没有的数据，可以像这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.first_name, e.last_name, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">is</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041359031.png"></p><h2 id="3-右连接"><a href="#3-右连接" class="headerlink" title="3.右连接"></a>3.右连接</h2><p>右连接（Right Join）与左连接类似，不同之处在于右连接会选择右表中的所有行，并将左表中与之匹配的行连接起来。如果左表中没有与右表匹配的行，则生成的结果集中左侧的所有列都将包含 NULL 值。</p><p>例如：我想要找出所有部门的信息，以及分配给该部门的员工的名字和姓氏</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.first_name, e.last_name, d.department_id, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> d.department_id <span class="operator">=</span> e.department_id;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041130003.png"></p><p>可以看到因为没有为id为3的部门分配员工，作为左表的员工表没有与右表匹配的行，于是为NULL</p><h2 id="4-上下表连接"><a href="#4-上下表连接" class="headerlink" title="4.上下表连接"></a>4.上下表连接</h2><p>上下连接（Full Outer Join）会选择两个表中的所有行，并将它们连接起来。如果某个表中的行在另一个表中没有匹配行，则在结果集中将包含 NULL 值。这种连接可以用于找出两个表之间的所有匹配行，并显示它们的数据。</p><p>我们在 salarie 表中为一个不存在的员工添加工资信息</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041147852.png"></p><p>现在我想要找出每个员工所在部门的名称以及其工资</p><p>由于 MYSQL 并不支持 Full Outer Join 所以我们使用 UNION 模拟实现</p><p>UNION 会将重复数据去除，如果不想去除可以使用 UNION ALL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.first_name, e.last_name, d.department_name, s.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> salaries s <span class="keyword">ON</span> e.employee_id <span class="operator">=</span> s.employee_id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> e.first_name, e.last_name, d.department_name, s.salary</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> salaries s <span class="keyword">ON</span> e.employee_id <span class="operator">=</span> s.employee_id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> e.first_name, e.last_name, d.department_name, s.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> salaries s <span class="keyword">ON</span> e.employee_id <span class="operator">=</span> s.employee_id;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202405041318936.png"></p><p>转换为Full Outer Join语法为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.first_name, e.last_name, d.department_name, s.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> salaries s <span class="keyword">ON</span> e.employee_id <span class="operator">=</span> s.employee_id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB的使用</title>
      <link href="/2024/03/28/MongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/03/28/MongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、关于MongoDB"><a href="#一、关于MongoDB" class="headerlink" title="一、关于MongoDB"></a>一、关于MongoDB</h1><h2 id="1、MongoDB是什么？"><a href="#1、MongoDB是什么？" class="headerlink" title="1、MongoDB是什么？"></a>1、MongoDB是什么？</h2><p>MongoDB是一款为web应用程序和互联网基础设施设计的数据库管理系统。没错MongoDB就是数据库，是NoSQL类型的数据库</p><h2 id="2、为什么要用MongoDB"><a href="#2、为什么要用MongoDB" class="headerlink" title="2、为什么要用MongoDB"></a>2、为什么要用MongoDB</h2><ul><li><p>MongoDB提出的是文档、集合的概念，使用BSON（类JSON）作为其数据模型结构，其结构是面向对象的而不是二维表，存储一个用户在MongoDB中是这样子的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    username<span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    password<span class="punctuation">:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用这样的数据模型，使得MongoDB能在生产环境中提供高读写的能力，吞吐量较于mysql等SQL数据库大大增强。</p></li><li><p><strong>易伸缩，自动故障转移。</strong></p><p>易伸缩指的是提供了分片能力，能对数据集进行分片，数据的存储压力分摊给多台服务器。自动故障转移是副本集的概念，MongoDB能检测主节点是否存活，当失活时能自动提升从节点为主节点，达到故障转移。</p></li><li><p><strong>数据模型因为是面向对象的，</strong></p><p>所以可以表示丰富的、有层级的数据结构，比如博客系统中能把“评论”直接怼到“文章“的文档中，而不必像myqsl一样创建三张表来描述这样的关系。</p></li></ul><h2 id="3、主要特性"><a href="#3、主要特性" class="headerlink" title="3、主要特性"></a>3、主要特性</h2><ol><li><p>文档数据类型</p><p>SQL类型的数据库是正规化的，可以通过主键或者外键的约束保证数据的完整性与唯一性，所以SQL类型的数据库常用于对数据完整性较高的系统。MongoDB在这一方面是不如SQL类型的数据库，且MongoDB没有固定的Schema，正因为MongoDB少了一些这样的约束条件，可以让数据的存储数据结构更灵活，存储速度更加快。</p></li><li><p>即时查询能力</p><p>MongoDB保留了关系型数据库即时查询的能力，保留了索引（底层是基于B tree）的能力。这一点汲取了关系型数据库的优点，相比于同类型的NoSQL redis 并没有上述的能力。</p></li><li><p>复制能力</p><p>MongoDB自身提供了副本集能将数据分布在多台机器上实现冗余，目的是可以提供自动故障转移、扩展读能力。</p></li><li><p>速度与持久性</p><p>MongoDB的驱动实现一个写入语义 fire and forget ，即通过驱动调用写入时，可以立即得到返回得到成功的结果（即使是报错），这样让写入的速度更加快，当然会有一定的不安全性，完全依赖网络。</p><p>MongoDB提供了Journaling日志的概念，实际上像mysql的bin-log日志，当需要插入的时候会先往日志里面写入记录，再完成实际的数据操作，这样如果出现停电，进程突然中断的情况，可以保障数据不会错误，可以通过修复功能读取Journaling日志进行修复。</p></li><li><p>数据扩展<br>MongoDB使用分片技术对数据进行扩展，MongoDB能自动分片、自动转移分片里面的数据块，让每一个服务器里面存储的数据都是一样大小。</p></li></ol><h1 id="二、安装MongoDB"><a href="#二、安装MongoDB" class="headerlink" title="二、安装MongoDB"></a>二、安装MongoDB</h1><h2 id="1、下载MongoDB安装包"><a href="#1、下载MongoDB安装包" class="headerlink" title="1、下载MongoDB安装包"></a>1、下载MongoDB安装包</h2><p>进入下载页面：<a href="https://www.mongodb.com/try/download/community-kubernetes-operator">https://www.mongodb.com/try/download/community-kubernetes-operator</a></p><p>根据自己的平台来下载MongoDB，我的是Windows所以我就选Windows x64<img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281902106.png"></p><p>点击 Download 按钮，下载文件</p><p>下载好，点击安装文件</p><p>选择 Custom 按钮 自定义安装路径</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281907217.png"></p><p>选择 Browse 按钮选择安装路径</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281907120.png"></p><p>点击next，进入到下一页面</p><p><strong>注意</strong>：一定要把 左下角的 Install MongoDB Compass 的勾选给取消掉，这个按钮的意思是下载compass客户端可视化界面，如果勾选了，下载会很慢。而compass客户端可视化界面随时都可以下载，所以取消勾选<br>Compass图形化下载地址: <a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281917780.png"></p><p>MongoDB下载后里面的文件</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281919893.png"></p><h2 id="2、配置-MongoDB-数据库的环境"><a href="#2、配置-MongoDB-数据库的环境" class="headerlink" title="2、配置 MongoDB 数据库的环境"></a>2、配置 MongoDB 数据库的环境</h2><p>安装好后配置 <strong>MongoDB</strong> 数据库的环境：</p><p>按 win + i 打开 windows设置界面</p><p>点击系统-关于-高级系统设置-环境变量</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281923808.png"></p><p>找到 path，并打开路径，将自己的 MongoDB 的 bin 文件地址添加上去</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281925281.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281926888.png"></p><h2 id="3、运行-MongoDB服务"><a href="#3、运行-MongoDB服务" class="headerlink" title="3、运行 MongoDB服务"></a>3、运行 MongoDB服务</h2><p>在data文件夹中创建 db 文件夹，因为启动 MongoDB服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281920934.png"></p><p>启动MongoDB服务</p><p>其一、打开 cmd 命令；</p><p>即：用Win + R键打开，输入cmd；</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281934253.png"></p><p>其二、找到安装 MongoDb的 db文件夹</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281935009.png"></p><p>其三、输入命令，来启动 MongoDb 服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath &quot;D:\Program Files\MongoDB\Server\<span class="number">7</span>.<span class="number">0</span>.<span class="number">7</span>\data\db&quot;</span><br></pre></td></tr></table></figure><p>注意：此时的地址就是你建的 db 目录，然后再回车，此时的服务就启动了</p><p>仔细找一下，就会找到端口号一般为：‘27017’；</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281942381.png"></p><p>其四、然后在浏览器中输入地址和端口号为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:27017</span><br></pre></td></tr></table></figure><p>若显示结果如下，就说明安装成功并结束</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281943244.png"></p><p>其五、如何结束服务</p><p>按’Ctrl + C’，就结束了该次进程；</p><h2 id="4、配置本地-Windows-MongoDB服务"><a href="#4、配置本地-Windows-MongoDB服务" class="headerlink" title="4、配置本地 Windows MongoDB服务"></a>4、配置本地 Windows MongoDB服务</h2><p>这样可设置为 开机自启动，可直接手动启动关闭，可通过命令行net start MongoDB 启动。该配置会大大方便；也不要在进入bin的目录下启动了；</p><ol><li><p>在 data 文件下创建新文件夹log; (用来存放日志文件)<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281950493.png"></p></li><li><p>在 MongoDB 中新建配置文件 mongo.config; (与bin目录同级)</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281951981.png"></p></li><li><p>用记事本打开 mongo.config文件，并输入下面两个命令，然后保存；</p><p>(<strong>注意</strong>：以自己的实际安装的文件地址为准)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbpath=D:\Program Files\MongoDB\Server\7.0.7\data\db</span><br><span class="line">logpath=D:\Program Files\MongoDB\Server\7.0.7\data\mongo.log</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281953455.png"></p></li><li><p>用管理员身份打开 cmd，然后找到 bin 文件地址为: “D:\Program Files\MongoDB\Server\7.0.7\bin”，并输入代码为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -dbpath &quot;D:\Program Files\MongoDB\Server\<span class="number">7</span>.<span class="number">0</span>.<span class="number">7</span>\data\db&quot; -logpath &quot;D:\Program Files\MongoDB\Server\<span class="number">7</span>.<span class="number">0</span>.<span class="number">7</span>\data\mongo.log&quot; -install -serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure><p>而命令中的”MongoDB”就是之后启动 MongoDB服务的名字</p><p><strong>注意</strong>：这个一定在管理员身份的cmd中运行，否则执行下面命令会一直报错</p><ul><li>如何才能找到管理员命令下的cmd<br>在搜索框中搜索cmd，然后选择以管理员身份运行即可<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282000403.png"></li><li>输入相关的命令，然后本地 <strong>Windows MongoDB</strong> 服务的配置就完成了<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282004300.png"></li></ul></li><li><p>在cmd管理员中启动和关闭 MongoDB服务</p><ul><li><p><strong>启动 MongoDB 命令</strong>为：<code>net start MongoDB</code><br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282006117.png"></p><p>然后在浏览器中输入<strong>地址和端口号</strong>为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:27017</span><br></pre></td></tr></table></figure><p>若<strong>显示结果</strong>如下，就说明 MongoDB 服务已启动；<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403281943244.png"></p></li><li><p>在 MongoDB 服务启动后，会在设置中的服务看到正在运行的MongoDB服务<br>打开设置中服务的过程：在 运行 中输入命令：<code>services.msc</code></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282009728.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282009436.png"></p></li><li><p><strong>关闭 MongoDB 命令</strong>为：<code>net stop MongoDb</code><br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282011067.png"><br>然后在浏览器中输入<strong>地址和端口号</strong>为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:27017</span><br></pre></td></tr></table></figure><p>若<strong>显示结果</strong>如下，就说明 MongoDB 服务已结束；</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282013196.png"></p></li></ul></li></ol><h1 id="三、MongoDB的操作"><a href="#三、MongoDB的操作" class="headerlink" title="三、MongoDB的操作"></a>三、MongoDB的操作</h1><h2 id="1、体系结构"><a href="#1、体系结构" class="headerlink" title="1、体系结构"></a>1、体系结构</h2><table><thead><tr><th>SQL术语&#x2F;概念</th><th>MongoDB术语&#x2F;概念</th><th>解释&#x2F;说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表&#x2F;集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>数据字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接，MongoDB不支持</td></tr><tr><td></td><td>嵌入文档</td><td>MongoDB通过嵌入式文档来代替多表连接</td></tr><tr><td>primary key</td><td>primart key</td><td>主键，MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h2 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h2><p>MongoDB的最小存储单位就是文档document对象。文档document对象对应于关系型数据库的行。数据在MongoDB中以BSON（Binary-JSON）文档的格式存储在磁盘上。</p><p>BSON（Binary Serialized Document Format）是一种类json的一种二进制形式的存储格式，简称 Binary JSON；BSON和JSON一样，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，如Date和Bin Data类型。</p><p>BSON采用了类似于C语言结构体的名称、对表示方法，支持内嵌的文档对象和数组对象，具有轻量性、可遍历性、高效性的三个特点，可以有效描述非结构化数据和结构化数据。这种格式的优点是灵活性高，但它的缺点是空间利用率不是很理想。</p><p>BSON中，除了基本JSON类型： string，integer，boolean，double，null，array和object，mongo还使用了特殊的数据类型。这些类型包括 date， object id， binary data， regular expression和code。每一个驱动都以特定语言的方式实现了这些类型，查看你的驱动的文档来获取详细信息</p><p>BSON数据类型参考列表：</p><table><thead><tr><th>数据类型</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>字符串</td><td>UTF-8字符串都可表示为字符串类型的数据</td><td>{“x”: “foobar”}</td></tr><tr><td>对象id</td><td>对象id是文档的12字节的唯一ID</td><td>{“x”: Objectid{} }</td></tr><tr><td>布尔值</td><td>真或者假：true或者flase</td><td>{“x”: true}+</td></tr><tr><td>数组</td><td>值的集合或者列表可以表示成数组</td><td>{“x”: [“a”,”b”,”c”]}</td></tr><tr><td>32位整数</td><td>类型不可用。JavaScript仅支持64位浮点数，所以32位整数会被自动转换</td><td>shell是不支持该类型的，shell中默认会转换成64位浮点数</td></tr><tr><td>64位整数</td><td>不支持这个类型。shell会使用一个特殊的内嵌文件来显示64位整数</td><td>shell是不支持该类型的，shell中默认会转换成64位浮点数</td></tr><tr><td>64位浮点数</td><td>shell中的数字就是这一种类型</td><td>{“x”: 3.1415926, “y”: 3}</td></tr><tr><td>null</td><td>表示空值或者未定义的对象</td><td>{“x”: null}</td></tr><tr><td>undefined</td><td>文档中也可以使用未定义类型</td><td>{“x”: undefined}</td></tr><tr><td>符号</td><td>shell不支持，shell会将数据库中的符号类型的数据自动转换成字符串</td><td></td></tr><tr><td>正则表达式</td><td>文档中可以包含正则表达式，采用JavaScript的正则表达式语法</td><td>{“x”: &#x2F;foobar&#x2F;i}</td></tr><tr><td>代码</td><td>文档中还可以包含JavaScript代码</td><td>{“x”: function() { &#x2F;*……*&#x2F; } }</td></tr><tr><td>二进制数据</td><td>二进制数据可以由任意字节的串组成，不过shell中无法使用</td><td></td></tr><tr><td>最大值&#x2F;最小值</td><td>BSON包括一个特殊类型，表示可能的最大值。shell中没有这个类型</td><td></td></tr></tbody></table><p>提示：</p><p>shell默认使用64位浮点型数值。{“x”:3.14或{“x”:3}。对于整型值，可以使用NumberInt（4字节符号整数）或 NumberLong（8字节符号整数），{“x”:NumberInt(“3” ){“x”:NumberLong(“3”)}</p><h2 id="3、基本常用命令"><a href="#3、基本常用命令" class="headerlink" title="3、基本常用命令"></a>3、基本常用命令</h2><ol><li><p><strong>数据库相关</strong></p><p>查看所有数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure><p>选择数据库(如果数据库不存在,不会报错;会隐式创建:当后期该数据库有数据时自动创建)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名</span><br></pre></td></tr></table></figure><p>删除数据库(先选中数据库)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure></li><li><p><strong>集合相关</strong></p><p>查看所有集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><p>创建集合(插入数据会隐式创建)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&#x27;集合名&#x27;)</span><br></pre></td></tr></table></figure><p>删除集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.drop()</span><br></pre></td></tr></table></figure><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>我们可以在可视化界面方便的查看和操作MongoDB</p><p>可以在<strong>Navicat Premium连接</strong> 也可以用 <strong>Compass连接</strong></p><p>Navicat Premium连接</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282131681.png"><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282132888.png"></p><p>Compass连接</p><p><strong>注意</strong>：如果你的电脑名称是中文连接的时候就会报错</p></li></ol><p>  <img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282135963.png"></p><p>   <img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403282136869.png"></p><h3 id="增-Create"><a href="#增-Create" class="headerlink" title="增 Create"></a>增 Create</h3><p>插入文档</p><p>官方<a href="https://mongodb.net.cn/manual/reference/method/db.collection.insert/">插入方法文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.insert(json数据)</span><br></pre></td></tr></table></figure><p>集合存在则直接插入数据，不存在则隐式创建集合并插入数据</p><p>json数据格式要求key得加”“，但这里为了方便查看，对象的key统一不加”“；查看集合数据时系统会自动给key加””</p><p>mongodb会自动给每条数据创建全球唯一的_id键（我们也可以自定义_id的值，只要给插入的json数据增加_id键即可覆盖，但是不推荐这样做）</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.book.insert(&#123;</span><br><span class="line">&quot;name&quot;: &quot;书名&quot;,</span><br><span class="line">&quot;type&quot;: &quot;玄幻&quot;,</span><br><span class="line">&quot;description&quot;: &quot;简介&quot;,</span><br><span class="line">&quot;readingVolume&quot;: 0</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>MongoDB并不需要创建字段，在添加的时候会自动创建，但是需要注意的是，在后续的添加中如果集合中并不存在相应的key会再次自动创建字段</p><h3 id="删-Delete"><a href="#删-Delete" class="headerlink" title="删 Delete"></a>删 Delete</h3><p>官方<a href="https://mongodb.net.cn/manual/reference/method/db.collection.remove/">删除方法文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.remove(条件[,是否删除一条])</span><br></pre></td></tr></table></figure><p>是否删除一条</p><ul><li>false删除多条，即全部删除(默认)</li><li>true删除一条</li></ul><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.book.remove(&#123;name: &quot;书名&quot;&#125;)</span><br></pre></td></tr></table></figure><h3 id="改-Update"><a href="#改-Update" class="headerlink" title="改 Update"></a>改 Update</h3><p>官方<a href="https://mongodb.net.cn/manual/reference/method/db.collection.update/">修改方法文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.update(条件，新数据[,是否新增,是否修改多条])</span><br></pre></td></tr></table></figure><p>新数据</p><ul><li>默认是对原数据进行替换</li><li>若要进行修改,格式为 {修改器:{key:value}}</li></ul><p>是否新增</p><ul><li>条件匹配不到数据时是否插入: true插入,false不插入(默认)</li></ul><p>是否修改多条</p><ul><li>条件匹配成功的数据是否都修改: true都修改,false只修改一条(默认)</li></ul><p>修改器</p><ul><li>$inc 递增</li><li>$rename 重命名列</li><li>$set 修改列值</li><li>$unset 删除列</li></ul><p>示例：</p><p>为name为书名的阅读量增加1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.book.updata(&#123;name: &quot;书名&quot;&#125;,&#123;$inc: &#123;readingVolume:1&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="查-Read"><a href="#查-Read" class="headerlink" title="查 Read"></a>查 Read</h3><p>官方<a href="https://mongodb.net.cn/manual/reference/method/db.collection.find/">查看方法文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(条件[,查询的列])</span><br><span class="line">db.集合名.find(条件[,查询的列]).pretty()#格式化查看</span><br></pre></td></tr></table></figure><p>条件</p><ul><li>查询所有数据{}或不写</li><li>查询指定要求数据 {key:value} 或 {key:{运算符:value}}</li></ul><p>查询的列(可选参数)</p><ul><li>不写则查询全部列</li><li>{key:1}只显示key列</li><li>{key:0}除了key列都显示</li><li>注意:_id列都会存在</li></ul><p>运算符</p><ul><li>$gt 大于</li><li>$gte 大于等于</li><li>$lt 小于</li><li>$lte 小于等于</li><li>$ne 不等于</li><li>$in in 匹配数组中指定的任何值。</li><li>$nin not in 不匹配数组中指定的任何值</li></ul><p>示例：</p><p>查看所有数据并只显示name列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.book.find(&#123;&#125;,&#123;name: 1&#125;)</span><br></pre></td></tr></table></figure><h3 id="排序-分页"><a href="#排序-分页" class="headerlink" title="排序&amp;分页"></a>排序&amp;分页</h3><p><strong>排序</strong></p><p><a href="https://mongodb.net.cn/manual/reference/method/cursor.sort/#cursor.sort">官方排序方法文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find().sort(json数据)</span><br></pre></td></tr></table></figure><p>json数据(key:value)</p><ul><li>key就是要排序的字段</li><li>value为1表示升序，-1表示降序</li></ul><p>示例：</p><p>按照阅读量升序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.book.find().sort(&#123;readingVolume: 1&#125;)</span><br></pre></td></tr></table></figure><p><strong>分页</strong></p><p><a href="https://mongodb.net.cn/manual/reference/method/js-cursor/">官方游标方法文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find().sort().skip(数字).limit(数字)[.conunt()]</span><br></pre></td></tr></table></figure><p>skip(数字)</p><ul><li>指定跳过的数量(可选)</li></ul><p>limit(数字)</p><ul><li>限制查询的数量</li></ul><p>conunt()</p><ul><li>统计数量</li></ul><p>示例:</p><p>例如每页有5条，你要查第2页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.book.find().skip(5).limit(5)</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ol><li><p>简介</p><p>索引是一种排序好的便于快速查询数据的数据结构，用于帮助数据库高效的查询数据</p><p>优点：</p><ul><li><p>提高数据查询的效率，降低数据库的IO成本</p></li><li><p>通过索引对数据进行排序，降低数据排序的成本，降低CPU的消耗</p></li></ul><p>缺点：</p><ul><li><p>占用磁盘空间</p><p>大量索引影响SQL语句的执行效率，因为每次插入和修改都要更新索引</p></li></ul></li><li><p>语法</p><p>创建索引语法：</p><p><strong>创建索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.createIndex(待创建索引的列:方式 [,额外选项])</span><br></pre></td></tr></table></figure><p><strong>创建复合索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.createIndex(&#123;key1:方式,key2:方式&#125; [,额外选项])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>待创建索引的列：方式：{key: 1}&#x2F;{key: -1}<br>1表示升序，-1表示降序；例如{age: 1}表示创建age索引并按照升序方法排列</p></li><li><p>额外选项：设置索引的名称或者唯一索引等<br>设置名称:{name: 索引名}<br>唯一索引:{unique: 列名}</p></li></ul><p>删除索引语法：</p><p><strong>删除全部索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.dropIndexes()</span><br></pre></td></tr></table></figure><p><strong>删除指定索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.dropIndex(索引名)</span><br></pre></td></tr></table></figure><p>查看索引语法：</p><p><strong>查看索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.getIndexes()</span><br></pre></td></tr></table></figure></li></ol><h2 id="权限机制"><a href="#权限机制" class="headerlink" title="权限机制"></a>权限机制</h2><p>安装完MongoDB后，在命令行输入命令即可登录数据库，这肯定是不安全的，我们需要使用权限机制，开启验证模式</p><p>创建账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">&quot;user&quot;:&quot;账号&quot;,</span><br><span class="line">&quot;pwd&quot;:&quot;密码&quot;,</span><br><span class="line">&quot;roles&quot;:[&#123;</span><br><span class="line">role:&quot;角色&quot;,</span><br><span class="line">db:&quot;所属数据库&quot;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>角色种类</p><p>超级用户角色：root<br>数据库用户角色：read、readWrite<br>数据库管理角色：dbAdmin、userAdmin<br>集群管理角色： clusterAdmin、clusterManager、clusterMonitor、hostManager<br>备份恢复角色： backup、restore<br>所有数据库角色： readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</p><p>角色说明</p><p>root：只在admin数据库中可用。超级账号，超级权限；<br>read：允许用户读取指定数据库；<br>readWrite：允许用户读写指定数据库</p><p>开启验证模式</p><p>验证模式：指用户需要输入账号密码才能登录使用</p><h1 id="四、SpringBoot-集成-MongoDB"><a href="#四、SpringBoot-集成-MongoDB" class="headerlink" title="四、SpringBoot 集成 MongoDB"></a>四、SpringBoot 集成 MongoDB</h1><h2 id="基本增删改查"><a href="#基本增删改查" class="headerlink" title="基本增删改查"></a>基本增删改查</h2><ol><li><p>首先在 pom.xml 导入<strong>MongoDB</strong> 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 application.yaml 中配置 mongodb 的属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据源配置</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="comment"># 主机地址</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="comment"># 数据库</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">test</span></span><br><span class="line">      <span class="comment"># 端口号</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">      <span class="comment"># 也可以使用uri</span></span><br><span class="line">      <span class="comment"># uri: mongodb://localhost:27017/test </span></span><br></pre></td></tr></table></figure></li><li><p>创建 <strong>MongoConfig</strong> 配置 <strong>MongoTemplate</strong> 的 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MongoConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;mongoTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> MongoTemplate <span class="title function_">mongoTemplate</span><span class="params">(MongoDatabaseFactory mongoDatabaseFactory, MongoMappingContext mongoMappingContext)</span> &#123;</span><br><span class="line">        <span class="type">DbRefResolver</span> <span class="variable">dbRefResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultDbRefResolver</span>(mongoDatabaseFactory);</span><br><span class="line">        <span class="type">MappingMongoConverter</span> <span class="variable">mappingConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingMongoConverter</span>(dbRefResolver, mongoMappingContext);</span><br><span class="line">        <span class="comment">//去掉_class字段,如果不去除在进行insert操作后，会自动增加_class字段,值为实体类的地址</span></span><br><span class="line">        mappingConverter.setTypeMapper(<span class="keyword">new</span> <span class="title class_">DefaultMongoTypeMapper</span>(<span class="literal">null</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MongoTemplate</span>(mongoDatabaseFactory,mappingConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建对应集合的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//对应集合名</span></span><br><span class="line"><span class="meta">@Document(collection = &quot;book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图书名称</span></span><br><span class="line"><span class="comment">     * Indexed 索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Indexed(unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图书类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图书简介</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阅读量 默认为0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field(&quot;readingVolume&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">readingVolume</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 <strong>Repository</strong> 相当于 <strong>Mapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookRepository</span> <span class="keyword">extends</span> <span class="title class_">MongoRepository</span>&lt;Book,String&gt; &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页并根据书名模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 书名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable 分页参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Page&lt;Book&gt; <span class="title function_">findByNameLike</span><span class="params">(String name, Pageable pageable)</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承 <strong>MongoRepository</strong> 格式 MongoRepository&lt;实体类名, 主键字段类型&gt;</p><p>Repository 中可以自定义复杂方法，只要符合命名规范，就会自动生成查询语句</p></li><li><p>创建<strong>Service</strong>定义基本的增删改查和我在 <strong>Repository</strong> 中定义的分页模糊查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增图书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBook</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页模糊查询图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 图书名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 每页数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Book&gt; <span class="title function_">findBookListByName</span><span class="params">(String name, <span class="type">int</span> page, <span class="type">int</span> size)</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据图书id查询一条数据，并增加阅读量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 图书id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">findBookById</span><span class="params">(String id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新图书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 删除图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBookById</span><span class="params">(String id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 <strong>ServiceImpl</strong> 实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Book 持久层</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookRepository bookRepository;</span><br><span class="line">    <span class="comment">//mongodb 操作模版</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GridFsTemplate gridFsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GridFSBucket gridFSBucket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加图书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookRepository.insert(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量增加图书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> books 图书信息集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBookBatch</span><span class="params">(List&lt;Book&gt; books)</span> &#123;</span><br><span class="line">        bookRepository.insert(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页并根据书名模糊查询图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 图书名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 每页数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Book&gt; <span class="title function_">findBookListByName</span><span class="params">(String name, <span class="type">int</span> page, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findByNameLike(name, PageRequest.of(page - <span class="number">1</span>, size));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询图书信息，并增加该图书的阅读量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 图书id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">findBookById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookRepository.findById(id).get();</span><br><span class="line">        book.setReadingVolume(book.getReadingVolume() + <span class="number">1</span>);</span><br><span class="line">        bookRepository.save(book);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookRepository.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除图书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 删除图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBookById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        bookRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 <strong>Controller</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="comment">// 图书 业务层</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页并根据书名模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 书名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 每页数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&lt;Book&gt;&gt; <span class="title function_">findBookListByName</span><span class="params">(String name, <span class="meta">@DefaultValue(&quot;1&quot;)</span> <span class="type">int</span> page,<span class="meta">@DefaultValue(&quot;10&quot;)</span> <span class="type">int</span> size)</span>&#123;</span><br><span class="line">        Page&lt;Book&gt; bookListByName = bookService.findBookListByName(name, page, size);</span><br><span class="line">        <span class="keyword">return</span> R.success(bookListByName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询一条图书，并增加这个图书的阅读量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 图书id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Book&gt; <span class="title function_">findBookById</span><span class="params">(<span class="meta">@Valid</span> String id)</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">bookById</span> <span class="operator">=</span> bookService.findBookById(id);</span><br><span class="line">        <span class="keyword">return</span> R.success(bookById);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增图书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book 图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Void&gt; <span class="title function_">insertBook</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        bookService.insertBook(book);</span><br><span class="line">        <span class="keyword">return</span> R.ok(<span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更细图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book 图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Void&gt; <span class="title function_">updateBook</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        bookService.updateBook(book);</span><br><span class="line">        <span class="keyword">return</span> R.ok(<span class="string">&quot;修改图书信息成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除指定图书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Void&gt; <span class="title function_">deleteById</span><span class="params">(<span class="meta">@Valid</span> String id)</span>&#123;</span><br><span class="line">        bookService.deleteBookById(id);</span><br><span class="line">        <span class="keyword">return</span> R.ok(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403291023576.png"></p><p>可以看到也是可以正常使用的</p></li></ol><h2 id="MongoDB上传文件和下载文件"><a href="#MongoDB上传文件和下载文件" class="headerlink" title="MongoDB上传文件和下载文件"></a>MongoDB上传文件和下载文件</h2><p>首先我们要知道 MongoDB 存储文件的地方在哪 可以看到是在一个叫GridFS 存储桶的地方</p><p>​<img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403291040279.png"></p><p>那么 <strong>GridFS 是什么</strong></p><p>GridFS是用于存储和检索超过 16 MB大小限制的BSON文档文件的规范</p><blockquote><p>注意<br>GridFS不支持多文档事务</p></blockquote><p>相较于将一个文件存储在单条文档中，GridFS将文件分为多个部分或块[<a href="https://docs.mongodb.com/manual/core/gridfs/#footnote-chunk-disambiguation">1]</a>，并将每个块存储为单独的文档。默认情况下，GridFS使用的块默认大小为255kB；也就是说，除最后一个块，GridFS会将文件划分为255 kB的块。最后一个块只有必要的大小。同样，最后的那个块也不会大于默认的块大小，仅使用所需的空间以及一些其他元数据。</p><p>GridFS使用两个集合来存储文件。一个集合存储文件块，另一个集合存储文件元数据。 <a href="https://docs.mongodb.com/manual/core/gridfs/#std-label-gridfs-collections">GridFS集合</a>一节详细介绍了每个集合。</p><p>当你从GridFS查询文件时，驱动程序将根据需要重新组装该文件所有的块。你可以对GridFS存储的文件进行范围查询。你还可以从文件的任意部分访问其信息，例如“跳到”视频或音频文件的中间。</p><p>GridFS不仅可用于存储超过16 MB的文件，而且还可用于存储您要访问的任何文件而不必将整个文件加载到内存中。另请参阅何时使用<a href="https://docs.mongodb.com/manual/core/gridfs/#std-label-faq-developers-when-to-use-gridfs">GridFS</a>。</p><p><strong>什么时候使用 GridFS</strong></p><p>在MongoDB中，使用<a href="https://docs.mongodb.com/manual/reference/glossary/#std-term-GridFS">GridFS</a>存储大于16 MB的文件。</p><p>在某些情况下，在MongoDB数据库中存储大型文件可能比在系统级文件系统上存储效率更高。</p><ul><li>如果文件系统限制了目录中文件的数量，则可以使用GridFS来存储所需数量的文件。</li><li>当你要访问大文件部分的信息而不必将整个文件加载到内存中时，可以使用GridFS来调用文件的某些部分，而无需将整个文件读入内存。</li><li>当你希望保持文件和元数据在多个系统和设施之间自动同步和部署时，可以使用GridFS。使用<a href="https://docs.mongodb.com/manual/core/replica-set-architecture-geographically-distributed/#std-label-replica-set-geographical-distribution">地理分布的复制集</a>时，MongoDB可以自动将文件及其元数据分发到多个<a href="https://docs.mongodb.com/manual/reference/program/mongod/#mongodb-binary-bin.mongod">mongod</a>实例和设施。</li></ul><p>如果您需要对整个文件的内容进行原子更新，请不要使用GridFS。或者，您可以存储每个文件的多个版本，并在元数据中指定文件的当前版本。上传文件的新版本后，您可以原子更新元数据中指示为“最新”状态的字段，然后在需要时删除以前的版本。</p><p>此外，如果文件均小于16 MB <a href="https://docs.mongodb.com/manual/reference/limits/#mongodb-limit-BSON-Document-Size">BSON文档大小</a>限制，请考虑将每个文件存储在单个文档中，而不是使用GridFS。您可以使用BinData数据类型存储二进制数据。有关使用BinData的详细信息，请参见<a href="https://docs.mongodb.com/drivers/">驱动</a>程序文档。</p><p><strong>GridFS Collections</strong></p><p><a href="https://docs.mongodb.com/manual/reference/glossary/#std-term-GridFS">GridFS</a>将文件存储在两个集合中:</p><ul><li>块存储二进制块。有关详细信息，请参见<a href="https://docs.mongodb.com/manual/core/gridfs/#std-label-gridfs-chunks-collection">chunks集合</a>。</li><li>文件存储文件的元数据。有关详细信息，请参见<a href="https://docs.mongodb.com/manual/core/gridfs/#std-label-gridfs-files-collection">文件集合</a>。</li></ul><p>GridFS通过使用存储桶名称为每个集合添加前缀，将集合放置在一个公共存储桶中。默认情况下，GridFS使用两个集合以及一个名为fs的存储桶：</p><ul><li><code>fs.files</code></li><li><code>fs.chunks</code></li></ul><p>您可以选择其他存储桶名称，也可以在一个数据库中创建多个存储桶。完整集合名称（包括存储桶名称）受<a href="https://docs.mongodb.com/manual/reference/limits/#mongodb-limit-Namespace-Length">命名空间长度限制</a>。</p><p><strong>块集合</strong></p><p>块集合中的每个文档都代表了GridFS中表示的文件的不同的块。此集合中的文档具有以下格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> &lt;ObjectId&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files_id&quot;</span><span class="punctuation">:</span> &lt;ObjectId&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;n&quot;</span><span class="punctuation">:</span> &lt;num&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> &lt;binary&gt;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>chunks 集合中的文档包含以下字段：</p><ul><li><code>chunks._id</code><br>块的唯一ObjectId</li><li><code>chunks.files_id</code><br>在<code>files</code>集合中指定的“父”文档的<code>_id</code></li><li><code>chunk.n</code><br>块的序列号。GridFS从0开始对所有块进行编号</li><li><code>chunks.data</code><br>块 BSON 二进制类型的荷载</li></ul><p><strong>文件集合</strong></p><p>文件集合中的每个文档代表 GridFS 中的一个文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> &lt;ObjectId&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;length&quot;</span><span class="punctuation">:</span> &lt;num&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;chunkSize&quot;</span><span class="punctuation">:</span> &lt;num&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uploadDate&quot;</span><span class="punctuation">:</span> &lt;timestamp&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> &lt;hash&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> &lt;string&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;contentType&quot;</span><span class="punctuation">:</span> &lt;string&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> &lt;string array&gt;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> &lt;any&gt;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>files</code>集合中的文档包含以下或全部字段：</p><ul><li><p><code>files._id</code><br>该文档的唯一标识符。<code>_id</code>是您为原始文档选择的数据类型。MongoDB文档的默认类型是 BSON ObjectId</p></li><li><p><code>files.length</code><br>文档的大小(以字节为单位)</p></li><li><p><code>files.chunkSize</code><br>每个块的大小（以字节为单位）。GridFS将文档分为大小为<code>chunkSize</code>的块，最后一个除外，后者仅根据需要而变大。默认大小为255 KB。</p></li><li><p><code>files.uploadDate</code><br>GridFS首次存储这个文档的日期。此值为有<code>日期</code>类型。</p></li><li><p><code>files.md5</code></p><p>过期<br>FIPS 140-2禁止使用MD5算法。MongoDB驱动程序已弃用MD5支持，并将在未来版本中删除MD5的生成。需要文件摘要的应用程序应在GridFS外部实现它，并将其存储在<a href="https://github.com/mongodb-china/MongoDB-CN-Manual/blob/master/cun-chu">files.metadata</a>中。<br><a href="https://docs.mongodb.com/manual/reference/command/filemd5/">filemd5</a>命令返回的完整文件的MD5哈希。此值为字符串类型。</p></li><li><p><code>files.filename</code><br>可选的。GridFS文件的可读名称</p></li><li><p><code>files.contentType</code></p><p>过期<br>可选的。GridFS文件的有效MIME类型。仅应用程序用。<br>使用<a href="https://docs.mongodb.com/manual/core/gridfs/#mongodb-data-files.metadata">files.metadata</a>来存储与GridFS文件的MIME类型有关的信息。</p></li><li><p><code>files.aliases</code><br>过期</p><p>可选的。别名字符串数组。仅用于应用程序<br>使用<a href="https://docs.mongodb.com/manual/core/gridfs/#mongodb-data-files.metadata">files.metadata</a>来存储与GridFS文件的MIME类型有关的信息。</p></li><li><p><code>files.metadata</code><br>可选的。元数据字段可以是任何数据类型，并且可以保存您要存储的任何其他信息。如果希望将其他任意字段添加到文件集合中的文档，请将其添加到元数据字段中的对象。</p></li></ul><p>在 <code>application.yaml</code> 修改 Spring 上传文件大小的限制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">500MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">500MB</span></span><br></pre></td></tr></table></figure><p>在 <strong>MongoConfig</strong> 注册 <strong>GridFSBucket</strong> 的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MongoConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.data.mongodb.database&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String db;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;mongoTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> MongoTemplate <span class="title function_">mongoTemplate</span><span class="params">(MongoDatabaseFactory mongoDatabaseFactory, MongoMappingContext mongoMappingContext)</span> &#123;</span><br><span class="line">        <span class="type">DbRefResolver</span> <span class="variable">dbRefResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultDbRefResolver</span>(mongoDatabaseFactory);</span><br><span class="line">        <span class="type">MappingMongoConverter</span> <span class="variable">mappingConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingMongoConverter</span>(dbRefResolver, mongoMappingContext);</span><br><span class="line">        <span class="comment">//去掉_class字段</span></span><br><span class="line">        mappingConverter.setTypeMapper(<span class="keyword">new</span> <span class="title class_">DefaultMongoTypeMapper</span>(<span class="literal">null</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MongoTemplate</span>(mongoDatabaseFactory,mappingConverter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GridFSBucket <span class="title function_">getGridFSBucket</span><span class="params">(MongoClient mongoClient)</span>&#123;</span><br><span class="line">        <span class="type">MongoDatabase</span> <span class="variable">mongoDatabase</span> <span class="operator">=</span> mongoClient.getDatabase(db);</span><br><span class="line">        <span class="keyword">return</span> GridFSBuckets.create(mongoDatabase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>Service</strong> 创建上传文件和下载文件的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> multipartFile 文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 可能转换流失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ObjectId <span class="title function_">uploadFile</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileId 文件编号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response 响应</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 可能读取失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(String fileId, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p>在 <strong>ServiceImpl</strong> 实现方法</p><ol><li><p>注入 操作 GridFs 的 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> GridFsTemplate gridFsTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> GridFSBucket gridFSBucket;</span><br></pre></td></tr></table></figure><ul><li>GridFsTemplate<br>GridFsTemplate是Spring Data MongoDB库中用于操作GridFS的一个类。它提供了一组方法，用于执行与GridFS相关的操作，例如存储文件、检索文件、删除文件等。</li><li>GridFSBucket<br>它是MongoDB驱动程序中用于处理GridFS的一个类。 GridFS（Grid File System）是MongoDB用于存储和检索大型文件的规范。 GridFSBucket类提供了一组方法，用于执行与GridFS相关的常见操作，如上传文件、下载文件、删除文件等</li></ul></li><li><p>上传文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> multipartFile 文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 获取流可能失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ObjectId <span class="title function_">uploadFile</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">//获取类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> multipartFile.getContentType();</span><br><span class="line">        <span class="comment">//获取流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> multipartFile.getInputStream();</span><br><span class="line">        <span class="comment">//上传</span></span><br><span class="line">        <span class="type">ObjectId</span> <span class="variable">objectId</span> <span class="operator">=</span> gridFsTemplate.store(inputStream, originalFilename, contentType);</span><br><span class="line">        <span class="keyword">return</span> objectId;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;上传失败&quot;</span>,e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;上传失败:&#123;&quot;</span> + e + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>下载文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载我文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileId 文件编号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response 响应</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 可能读取失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(String fileId, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;准备下载文件....&quot;</span>);</span><br><span class="line">    <span class="comment">//查询条件</span></span><br><span class="line">    <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;_id&quot;</span>).is(fileId));</span><br><span class="line">    <span class="comment">//查询单个文件</span></span><br><span class="line">    <span class="type">GridFSFile</span> <span class="variable">gridFSFile</span> <span class="operator">=</span> gridFsTemplate.findOne(query);</span><br><span class="line">    <span class="keyword">if</span>(gridFSFile == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名和后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> gridFSFile.getFilename().replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> gridFSFile.getMetadata().get(<span class="string">&quot;_contentType&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//通知浏览器进行文件下载</span></span><br><span class="line">    response.setContentType(contentType);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=\&quot;&quot;</span>+ URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>) + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    <span class="type">GridFSDownloadStream</span> <span class="variable">gridFSDownloadStream</span> <span class="operator">=</span> gridFSBucket.openDownloadStream(gridFSFile.getObjectId());</span><br><span class="line">    <span class="type">GridFsResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridFsResource</span>(gridFSFile, gridFSDownloadStream);</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">    IOUtils.copy(inputStream,outputStream);</span><br><span class="line">    outputStream.flush();</span><br><span class="line">    outputStream.close();</span><br><span class="line">    inputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在 <strong>Controller</strong> 定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> multipartFile 文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 上传结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile multipartFile)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectId</span> <span class="variable">objectId</span> <span class="operator">=</span> bookService.uploadFile(multipartFile);</span><br><span class="line">        <span class="keyword">return</span> R.success(String.valueOf(objectId));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.fail(ReturnCode.RC500.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileId 文件编号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response 响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/downloadFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(String fileId, HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bookService.downloadFile(fileId,response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403291123410.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403291124746.png"></p><p>可以看到上传成功了</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403291125836.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403291126294.png"></p><p>下载文件也没有问题</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java使用MinIO</title>
      <link href="/2024/03/27/java%E4%BD%BF%E7%94%A8minio/"/>
      <url>/2024/03/27/java%E4%BD%BF%E7%94%A8minio/</url>
      
        <content type="html"><![CDATA[<h1 id="Java使用MinIo"><a href="#Java使用MinIo" class="headerlink" title="Java使用MinIo"></a>Java使用MinIo</h1><h2 id="MinIo介绍"><a href="#MinIo介绍" class="headerlink" title="MinIo介绍"></a>MinIo介绍</h2><p>Minio 是个基于Apache License v2.0开源协议的对象存储服务，虽然轻量，却拥有着不错的性能。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据。 </p><p>例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等，而一个对象文件可以是任意大小，从几 kb 到最大 5T 不等。</p><p>官网地址：<a href="https://min.io/">minio</a></p><p>何为对象存储？我们来看下<a href="https://help.aliyun.com/zh/oss/">阿里云 OSS</a>(Object Storage Service) 的介绍</p><blockquote><p>对象存储服务（Object Storage Service，OSS）是一种海量、安全、低成本、高可靠的云存储服务，适合存放任意类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成本。</p></blockquote><p>对于中小型企业，如果不选择存储上云，那么 Minio 是个不错的选择，麻雀虽小，五脏俱全。当然 Minio 除了直接作为对象存储使用，还可以作为云上对象存储服务的网关层，无缝对接到 Amazon S3、MicroSoft Azure。</p><h2 id="下载MinIO"><a href="#下载MinIO" class="headerlink" title="下载MinIO"></a>下载MinIO</h2><p>既然知道了Minio是做什么的，就来看一下如何下载Minio</p><p><a href="https://min.io/download#/agpl-kubernetes">Minio官方下载文档</a></p><h3 id="Docker安装minio"><a href="#Docker安装minio" class="headerlink" title="Docker安装minio"></a>Docker安装minio</h3><p><strong>Docker</strong>如果想安装软件，必须先到 <strong>Docker</strong> 镜像仓库下载镜像</p><p><a href="https://hub.docker.com/">Docker官方镜像</a></p><ol><li><p>寻找Minio镜像<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403271931043.png"></p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403271932427.png" alt="image-20240327193224316"></p></li><li><p>下载Minio镜像</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>docker pull minio&#x2F;minio</td><td>下载最新版Minio镜像 (其实此命令就等同于 : docker pull minio&#x2F;minio:latest )</td></tr><tr><td>docker pull minio&#x2F;minio:RELEASE.2024-03-26T22-10-45Z.fips</td><td>下载指定版本的Minio镜像(xxx指具体版本号)</td></tr></tbody></table><blockquote><p>检查当前Docker下载的镜像<br><code>docker images</code></p></blockquote></li><li><p>创建目录<br>一个用来存放配置，一个用来存储上传文件的目录<br>启动前需要先创建Minio外部挂载的配置文件(&#x2F;home&#x2F;minio&#x2F;config)和存储上传文件的目录(&#x2F;home&#x2F;minio&#x2F;data)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/minio/config</span><br><span class="line">mkdir -p /home/minio/data</span><br></pre></td></tr></table></figure></li><li><p>创建Minio容器并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 9090:9090 \</span><br><span class="line">     --net=host \</span><br><span class="line">     --name minio \</span><br><span class="line">     -d --restart=always \</span><br><span class="line">     -e <span class="string">&quot;MINIO_ACCESS_KEY=minioadmin&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;MINIO_SECRET_KEY=minioadmin&quot;</span> \</span><br><span class="line">     -v /home/minio/data:/data \</span><br><span class="line">     -v /home/minio/config:/root/.minio \</span><br><span class="line">     minio/minio server \</span><br><span class="line">     /data --console-address <span class="string">&quot;:9090&quot;</span> -address <span class="string">&quot;:9000&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>9090端口指的是minio的客户端端口</p><p>MINIO_ACCESS_KEY ：账号</p><p>MINIO_SECRET_KEY ：密码（账号长度必须大于等于5，密码长度必须大于等于8位）</p></blockquote></li></ol><p>​通过<code>docker ps</code>查看是否正在运行<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403271946573.png"></p><ol start="5"><li>访问操作</li></ol><p>​访问: http:&#x2F;&#x2F;你虚拟机的ip:9090&#x2F;login </p><p>​用户名和密码填你自己的</p><p>​创建<strong>Bucket</strong></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272153140.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403271953083.png">、<img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272200783.png"></p><p>点进去设置访问策略为Public</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272201648.png"></p><h3 id="Windows安装minio"><a href="#Windows安装minio" class="headerlink" title="Windows安装minio"></a>Windows安装minio</h3><p>官网页面中有服务端、客户端以及不同语言SDK的依赖包</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272047040.png"></p><p>可以点击DOWNLOAD的下载服务端按钮，或者在Windows PowerShell中执行该命令:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> <span class="string">&quot;https://dl.min.io/server/minio/release/windows-amd64/minio.exe&quot;</span> <span class="literal">-OutFile</span> <span class="string">&quot;C:\minio.exe&quot;</span></span><br></pre></td></tr></table></figure><p>其中<code>C:\minio.exe</code>为下载的路径位置，可以自行更改</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272133824.png"></p><p>创建一个minio存放文件的目录</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272134904.png"></p><p>设置用户名和密码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户环境变量</span></span><br><span class="line">setx MINIO_ROOT_USER admin</span><br><span class="line">setx MINIO_ROOT_PASSWORD password</span><br><span class="line"></span><br><span class="line"><span class="comment">#系统环境变量(需管理员)</span></span><br><span class="line">setx MINIO_ROOT_USER admin /m</span><br><span class="line">setx MINIO_ROOT_PASSWORD password /m</span><br></pre></td></tr></table></figure><p>启动</p><p>启动需要在cmd里输入命令启动</p><p>D:\minio\data 为刚才创建的minio存放文件的目录</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minin.exe server D:\minio\data</span><br></pre></td></tr></table></figure><p>如果 9000 端口被别的服务占用了，可以在启动的时候指定服务的端口</p><p>例如指定 9100 和 9101，前提是这两个端口没有被占用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minio.exe server D:\minio\data --console-address &quot;:<span class="number">9100</span>&quot; --address &quot;:<span class="number">9101</span>&quot;</span><br></pre></td></tr></table></figure><p>访问</p><p>在启动后的窗口的WebUI查看访问地址</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272151014.png"></p><p>访问后输入用户名和密码登录进入控制台页面</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272153381.png"></p><p>创建桶</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272156465.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272200783.png"></p><p>点进去设置访问策略为Public</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403272201648.png"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先我们需要导入minio的依赖，来使用minio的api</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 配置minio的各项属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># minio的配置</span></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="comment"># minio地址 写你自己的地址</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://192.168.140.134:9000</span></span><br><span class="line">  <span class="comment"># 用户名 写你自己的</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">accessKey</span></span><br><span class="line">  <span class="comment"># 密码 同样写你自己的</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">secretKey</span></span><br><span class="line">  <span class="comment"># 桶 根据自己创的来写</span></span><br><span class="line">  <span class="attr">bucket:</span></span><br><span class="line">    <span class="comment"># 视频桶</span></span><br><span class="line">    <span class="attr">videofiles:</span> <span class="string">video</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册MinioClient Bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span></span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(endpoint)</span><br><span class="line">                        .credentials(accessKey, secretKey)</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> minioClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样minio的各项配置就配置完成，我们就可以用MinioClient中的方法来进行操作了</p><h2 id="Minio分片上传"><a href="#Minio分片上传" class="headerlink" title="Minio分片上传"></a>Minio分片上传</h2><h3 id="minio上传方法"><a href="#minio上传方法" class="headerlink" title="minio上传方法"></a>minio上传方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MinioClient</span>();</span><br><span class="line"><span class="comment">//上传文件</span></span><br><span class="line">minioClient.uploadObject(</span><br><span class="line">    <span class="comment">//构建上传文件的对象</span></span><br><span class="line">UploadObjectArgs.builder()</span><br><span class="line">    <span class="comment">//minio的桶相当于文件夹</span></span><br><span class="line">    .bucket(<span class="string">&quot;桶名&quot;</span>)</span><br><span class="line">    .filename(<span class="string">&quot;文件在本地的地址&quot;</span>)</span><br><span class="line">    .object(<span class="string">&quot;文件上传到minio后在minio中的地址&quot;</span>)</span><br><span class="line">    .contentType(<span class="string">&quot;文件类型&quot;</span>)</span><br><span class="line">    .build()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>首先来分析上传需要的参数：</p><ul><li><strong>bucket</strong><br>这个我们指定上传文件在哪个桶就行了</li><li><strong>fileName</strong><br>由于是本地地址，所以接收了前端传过来的文件后存储在临时的文件夹中就可以了</li><li><strong>object</strong><br>我们用传过来的文件的md5作目录加上&#x2F;chunk加上&#x2F;分片的顺序也就是1,2,3,4…这样就不会重复了</li><li><strong>contentType</strong><br>由于是分片所以类型是空也就是 “”</li></ul><p>这样我们就知道上传分片的接口要有什么参数了</p><p>正常来说切片应该是由前端来切片文件，然后调用接口来上传分片文件，等所有分片文件上传完后请求合并接口，如果上传到一半暂停检查minio中的分片，如果有从最后的分片开始接着传后面的分片，等所有分片文件上传完后请求合并接口</p><p>接口大概就是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload/uploadchunk&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Void&gt; <span class="title function_">uploadChunk</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">                           <span class="meta">@RequestParam(&quot;fileMd5&quot;)</span> String fileMd5,</span></span><br><span class="line"><span class="params">                           <span class="meta">@RequestParam(&quot;chunk&quot;)</span> <span class="type">int</span> chunk)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建临时文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">tempFile</span> <span class="operator">=</span> File.createTempFile(<span class="string">&quot;minio&quot;</span>, <span class="string">&quot;temp&quot;</span>);</span><br><span class="line">        <span class="comment">//上传的文件拷贝到临时文件</span></span><br><span class="line">        file.transferTo(tempFile);</span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">absolutePath</span> <span class="operator">=</span> tempFile.getAbsolutePath();</span><br><span class="line">        <span class="comment">//调用上传方法</span></span><br><span class="line">        minioService.uploadVideo(fileMd5,chunk,absolutePath);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">delete</span> <span class="operator">=</span> tempFile.delete();</span><br><span class="line">        <span class="keyword">if</span> (!delete) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.fail(ReturnCode.RC500.getCode(),<span class="string">&quot;上传分片失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.ok(i);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.fail(ReturnCode.RC500.getCode(),<span class="string">&quot;上传分片失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我是后端，在测试的时候需要查看分片的效果，所以接口就变成接受完整文件，分片在后端完成，返回分片数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@PostMapping(&quot;/upload/uploadchunk&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">uploadChunk</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span>  &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建临时文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">tempFile</span> <span class="operator">=</span> File.createTempFile(<span class="string">&quot;minio&quot;</span>, <span class="string">&quot;temp&quot;</span>);</span><br><span class="line">        <span class="comment">//上传的文件拷贝到临时文件</span></span><br><span class="line">        file.transferTo(tempFile);</span><br><span class="line">        <span class="comment">//调用上传方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> minioService.uploadVideo(tempFile);</span><br><span class="line">        <span class="keyword">return</span> R.success(i);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.fail(ReturnCode.RC500.getCode(),<span class="string">&quot;上传分片失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现分片的上传方法"><a href="#实现分片的上传方法" class="headerlink" title="实现分片的上传方法"></a>实现分片的上传方法</h3><ol><li><p>首先创建<strong>MinioService</strong><br>定义上传方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MinioService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传分片文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> videoFIle 完整视频文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 上传分片的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uploadVideo</span><span class="params">(File videoFIle)</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<strong>MinioServiceImpl</strong>，注入<strong>MinioClient</strong>，定义好每个分片的大小，从yaml里获取存储视频文件的桶名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MinioService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MinioClient minioClient;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//存储视频文件</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucket.videofiles&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucket_video;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置分片大小</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">partSize</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">//5MB</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinioServiceImpl</span><span class="params">(MinioClient minioClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.minioClient = minioClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建根据扩展名获取<strong>mimeType</strong>的方法，也就是我们上传需要的<strong>contentType</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据扩展名获取mimeType</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getMimeType</span><span class="params">(String extension)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(extension == <span class="literal">null</span>)&#123;</span><br><span class="line">        extension = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据扩展名取出mimeType</span></span><br><span class="line">    <span class="type">ContentInfo</span> <span class="variable">extensionMatch</span> <span class="operator">=</span>  ContentInfoUtil.findExtensionMatch(extension);</span><br><span class="line">    <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> MediaType.APPLICATION_OCTET_STREAM_VALUE;</span><br><span class="line">    <span class="keyword">if</span>(extensionMatch != <span class="literal">null</span>)&#123;</span><br><span class="line">        mimeType = extensionMatch.getMimeType();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mimeType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建获取文件的值的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文件的md5</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getFileMd5</span><span class="params">(File file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileMd5</span> <span class="operator">=</span> DigestUtils.md5Hex(fileInputStream);</span><br><span class="line">        <span class="keyword">return</span> fileMd5;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;获取文件md5失败&quot;</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建根据md5值来获取分块文件在minio里的目录的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//得到分块文件的目录</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getChunkFileFolderPath</span><span class="params">(String fileMd5)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fileMd5.substring(<span class="number">0</span>, <span class="number">1</span>) + <span class="string">&quot;/&quot;</span> + fileMd5.substring(<span class="number">1</span>, <span class="number">2</span>) + <span class="string">&quot;/&quot;</span> + fileMd5 + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;chunk&quot;</span> + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现上传视频的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uploadVideo</span><span class="params">(File videoFile)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>首先调用方法获取文件的<strong>md5</strong>和定义一个目录来存放分片文件<br>前端切片的话并不需要<strong>md5</strong>和定义目录存放分片文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文件的md5值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fileMd5</span> <span class="operator">=</span> getFileMd5(videoFile);</span><br><span class="line"><span class="comment">//存放分片的目录</span></span><br><span class="line"><span class="type">String</span> <span class="variable">chunkPath</span> <span class="operator">=</span> <span class="string">&quot;D:/testchunk/&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>计算文件总大小来计算需要分片的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算文件总大小</span></span><br><span class="line"><span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> videoFile.length();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算需要分片的数量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">partCount</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) fileSize / partSize);</span><br></pre></td></tr></table></figure></li><li><p>利用for循环循环上传每一个分片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; partCount; i++)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for循环里计算当前分片的范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算分片的范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经读取的数据</span></span><br><span class="line"><span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> i * partSize;</span><br><span class="line"><span class="comment">// 看5MB和剩下的数据哪个小，哪个小就用哪个</span></span><br><span class="line"><span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> Math.min(partSize, fileSize - offset);</span><br></pre></td></tr></table></figure></li><li><p>读取分片的数据将分片的数据写入文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取分片的数据</span></span><br><span class="line"><span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) size];</span><br><span class="line"><span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(videoFile, <span class="string">&quot;r&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//在这个位置添加指针，从这个位置读</span></span><br><span class="line">    raf.seek(offset);</span><br><span class="line">    raf.readFully(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将分片的数据写入到文件中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">chunkFileName</span> <span class="operator">=</span> chunkPath + fileMd5 + (i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(chunkFileName)) &#123;</span><br><span class="line">    fos.write(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将分片文件上传到minio</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将分片上传到Minio</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    minioClient.uploadObject(</span><br><span class="line">        <span class="comment">//构建上传文件的对象</span></span><br><span class="line">        UploadObjectArgs.builder()</span><br><span class="line">        .bucket(bucket_video)</span><br><span class="line">        .filename(chunkFileName)</span><br><span class="line">        .object(getChunkFileFolderPath(fileMd5) + (i + <span class="number">1</span>))</span><br><span class="line">        .contentType(getMimeType(<span class="literal">null</span>))</span><br><span class="line">        .build()</span><br><span class="line">    );</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;上传分块失败&quot;</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传分块失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在for循环外返回分块数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> partCount;</span><br></pre></td></tr></table></figure></li></ol><h3 id="上传方法完整代码"><a href="#上传方法完整代码" class="headerlink" title="上传方法完整代码"></a>上传方法完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MinioService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储视频文件</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucket.videofiles&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucket_video;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置分片大小</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">partSize</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">//5MB</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinioServiceImpl</span><span class="params">(MinioClient minioClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.minioClient = minioClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据扩展名获取mimeType</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getMimeType</span><span class="params">(String extension)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(extension == <span class="literal">null</span>)&#123;</span><br><span class="line">            extension = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据扩展名取出mimeType</span></span><br><span class="line">        <span class="type">ContentInfo</span> <span class="variable">extensionMatch</span> <span class="operator">=</span>  ContentInfoUtil.findExtensionMatch(extension);</span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> MediaType.APPLICATION_OCTET_STREAM_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(extensionMatch != <span class="literal">null</span>)&#123;</span><br><span class="line">            mimeType = extensionMatch.getMimeType();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mimeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件的md5</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getFileMd5</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileMd5</span> <span class="operator">=</span> DigestUtils.md5Hex(fileInputStream);</span><br><span class="line">            <span class="keyword">return</span> fileMd5;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取文件md5失败&quot;</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到分块文件的目录</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getChunkFileFolderPath</span><span class="params">(String fileMd5)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileMd5.substring(<span class="number">0</span>, <span class="number">1</span>) + <span class="string">&quot;/&quot;</span> + fileMd5.substring(<span class="number">1</span>, <span class="number">2</span>) + <span class="string">&quot;/&quot;</span> + fileMd5 + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;chunk&quot;</span> + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uploadVideo</span><span class="params">(File videoFile)</span> &#123;</span><br><span class="line">        <span class="comment">//获取文件的md5值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileMd5</span> <span class="operator">=</span> getFileMd5(videoFile);</span><br><span class="line">        <span class="comment">//存放分片的目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">chunkPath</span> <span class="operator">=</span> <span class="string">&quot;D:/testchunk/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算文件总大小</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> videoFile.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算需要分片的数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">partCount</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) fileSize / partSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传每个分片</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; partCount; i++)&#123;</span><br><span class="line">            <span class="comment">// 计算分片的范围</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> i * partSize;</span><br><span class="line">            <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> Math.min(partSize, fileSize - offset);</span><br><span class="line">            <span class="comment">// 读取分片的数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) size];</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(videoFile, <span class="string">&quot;r&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//在这个位置添加指针，从这个位置读</span></span><br><span class="line">                raf.seek(offset);</span><br><span class="line">                raf.readFully(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将分片的数据写入到文件中</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">chunkFileName</span> <span class="operator">=</span> chunkPath + fileMd5 + (i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(chunkFileName)) &#123;</span><br><span class="line">                fos.write(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将分片上传到Minio</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                minioClient.uploadObject(</span><br><span class="line">                        <span class="comment">//构建上传文件的对象</span></span><br><span class="line">                        UploadObjectArgs.builder()</span><br><span class="line">                                .bucket(bucket_video)</span><br><span class="line">                                .filename(chunkFileName)</span><br><span class="line">                                .object(getChunkFileFolderPath(fileMd5) + (i + <span class="number">1</span>))</span><br><span class="line">                                .contentType(getMimeType(<span class="literal">null</span>))</span><br><span class="line">                                .build()</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;上传分块失败&quot;</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传分块失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> partCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果:</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403271554133.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403271555768.png"></p><p>可以看到分片文件已上传成功</p></li></ol><h2 id="Minio合并分片并清除分片"><a href="#Minio合并分片并清除分片" class="headerlink" title="Minio合并分片并清除分片"></a>Minio合并分片并清除分片</h2><h3 id="minio合并方法"><a href="#minio合并方法" class="headerlink" title="minio合并方法"></a>minio合并方法</h3><p>这个方法可以组合来自不同源对象的数据来创建对象，我们用来合并分片为一个文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ObjectWriteResponse <span class="title function_">composeObject</span><span class="params">(ComposeObjectArgs args)</span></span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建不同文件的对象放入集合中</span></span><br><span class="line">List&lt;ComposeSource&gt; sources = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ComposeSource&gt;();</span><br><span class="line">        sources.add(</span><br><span class="line">            ComposeSource.builder()</span><br><span class="line">                .bucket(<span class="string">&quot;my-bucketname-one&quot;</span>)</span><br><span class="line">                .object(<span class="string">&quot;my-objectname-one&quot;</span>)</span><br><span class="line">                .build());</span><br><span class="line">        sources.add(</span><br><span class="line">            ComposeSource.builder()</span><br><span class="line">                .bucket(<span class="string">&quot;my-bucketname-two&quot;</span>)</span><br><span class="line">                .object(<span class="string">&quot;my-objectname-two&quot;</span>)</span><br><span class="line">                .build());</span><br><span class="line"><span class="comment">//合并集合中的对象</span></span><br><span class="line">minioClient.composeObject(</span><br><span class="line">    ComposeObjectArgs.builder()</span><br><span class="line">        .bucket(<span class="string">&quot;my-destination-bucket&quot;</span>)</span><br><span class="line">        .object(<span class="string">&quot;my-destination-object&quot;</span>)</span><br><span class="line">        .sources(sources)</span><br><span class="line">        .build());</span><br></pre></td></tr></table></figure><p>我们来思考合并接口需要的参数</p><ul><li>首先需要<strong>fileMd5</strong>获取分块文件的目录</li><li>其次需要<strong>fileExt</strong>来决定合成后文件的类型</li><li>最后需要<strong>分片的数量</strong>来决定迭代构建多少次对象</li></ul><p>合并完后我们返回文件的地址</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload/mergechunks&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">mergeChunks</span><span class="params">(<span class="meta">@RequestParam(&quot;fileMd5&quot;)</span> String fileMd5,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(&quot;fileExt&quot;)</span> String fileExt,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(&quot;chunkTotal&quot;)</span> <span class="type">int</span> chunkTotal)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> minioService.mergeChunksAndUpload(fileMd5, fileExt, chunkTotal);</span><br><span class="line">    <span class="keyword">return</span> R.success(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现合并分片的方法"><a href="#实现合并分片的方法" class="headerlink" title="实现合并分片的方法"></a>实现合并分片的方法</h3><ol><li><p>首先在<strong>MinioService</strong>创建合并分片的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MinioService</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并视频分片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileMd5 文件的md5来决定合并那个视频</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileExt 合并后的文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chunkTotal 分片数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 合并后的视频地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">mergeChunksAndUpload</span><span class="params">(String fileMd5, String fileExt, <span class="type">int</span> chunkTotal)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<strong>MinioServiceImpl</strong>实现合并分片的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">mergeChunksAndUpload</span><span class="params">(String fileMd5, String fileExt, <span class="type">int</span> chunkTotal)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>首先我们定义<strong>objectName</strong>作为最后返回的文件地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String objectName;</span><br></pre></td></tr></table></figure></li><li><p>创建根据<strong>md5</strong>和<strong>fileExt</strong>获取合并文件的目录的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 得到合并后的文件的地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileMd5 文件id即md5值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileExt 文件扩展名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getFilePathByMd5</span><span class="params">(String fileMd5,String fileExt)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fileMd5.substring(<span class="number">0</span>,<span class="number">1</span>) + <span class="string">&quot;/&quot;</span> + fileMd5.substring(<span class="number">1</span>,<span class="number">2</span>) + <span class="string">&quot;/&quot;</span> + fileMd5 + <span class="string">&quot;/&quot;</span> +fileMd5 +fileExt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后获取分片文件目录使用迭代构建分块文件的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分块文件所在目录</span></span><br><span class="line"><span class="type">String</span> <span class="variable">chunkFolderPath</span> <span class="operator">=</span> getChunkFileFolderPath(fileMd5);</span><br><span class="line"><span class="comment">//找到分块文件</span></span><br><span class="line">List&lt;ComposeSource&gt; sources = Stream.iterate(<span class="number">1</span>, i -&gt; ++i)</span><br><span class="line">    <span class="comment">//总数为5 最大返回5个流</span></span><br><span class="line">    .limit(chunkTotal)</span><br><span class="line">    <span class="comment">//映射i 构建每个分块文件的对象</span></span><br><span class="line">    .map(i -&gt; ComposeSource.builder()</span><br><span class="line">         .bucket(bucket_video)</span><br><span class="line">         .object(chunkFolderPath + i)</span><br><span class="line">         .build()</span><br><span class="line">        )</span><br><span class="line">    <span class="comment">//转为List</span></span><br><span class="line">    .toList();</span><br></pre></td></tr></table></figure></li><li><p>获取合并后的文件的目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并后的文件的objectName</span></span><br><span class="line">objectName = getFilePathByMd5(fileMd5,fileExt);</span><br></pre></td></tr></table></figure></li><li><p>将分片合并为一个文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将分片合并为一个文件</span></span><br><span class="line">minioClient.composeObject(ComposeObjectArgs</span><br><span class="line">          .builder()</span><br><span class="line">          .bucket(bucket_video)</span><br><span class="line">          .object(objectName)</span><br><span class="line">          .sources(sources)</span><br><span class="line">          .build());</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>如此合并的方法就已经完成，但是合并后还需要一个操作，那就是将分片全部清除</p><p>想要实现清除分片的方法，我们先来看minio的批量删除方法</p><h3 id="minio批量删除方法"><a href="#minio批量删除方法" class="headerlink" title="minio批量删除方法"></a>minio批量删除方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterable&lt;Result&lt;DeleteError&gt;&gt; <span class="title function_">removeObjects</span><span class="params">(RemoveObjectsArgs args)</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个列表来存储要删除的对象</span></span><br><span class="line">List&lt;DeleteObject&gt; objects = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 向列表中添加要删除的对象</span></span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">DeleteObject</span>(<span class="string">&quot;aa.tmp&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">DeleteObject</span>(<span class="string">&quot;my-objectname&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">DeleteObject</span>(<span class="string">&quot;nacos-server-2.0.3.tar.gz&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 minioClient 来删除指定的对象</span></span><br><span class="line">Iterable&lt;Result&lt;DeleteError&gt;&gt; results =</span><br><span class="line">    minioClient.removeObjects(</span><br><span class="line">    RemoveObjectsArgs.builder().bucket(<span class="string">&quot;my-bucketname&quot;</span>).objects(objects).build());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历结果以处理可能的删除错误</span></span><br><span class="line"><span class="keyword">for</span> (Result&lt;DeleteError&gt; result : results) &#123;</span><br><span class="line">    <span class="type">DeleteError</span> <span class="variable">error</span> <span class="operator">=</span> result.get();</span><br><span class="line">    <span class="comment">// 输出删除对象时的错误信息</span></span><br><span class="line">    System.out.println(</span><br><span class="line">        <span class="string">&quot;删除对象时发生错误：&quot;</span> + error.objectName() + <span class="string">&quot;; &quot;</span> + error.message());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来思考删除分片方法需要的参数</p><ul><li><p>分块文件的目录</p><p>目录加上分片的顺序1,2,3,4,5…作为object</p></li><li><p>分片总数<br>作为需要构建多少个对象的参数</p></li></ul><h3 id="实现清除分块的方法"><a href="#实现清除分块的方法" class="headerlink" title="实现清除分块的方法"></a>实现清除分块的方法</h3><ol><li><p>在<strong>MinioServiceImpl</strong>中创建清除分块的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除分块文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chunkFileFolderPath 分块文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chunkTotal 分块文件总数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">clearChunkFiles</span><span class="params">(String chunkFileFolderPath, <span class="type">int</span> chunkTotal)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代构建删除文件对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代构建文件对象放到集合中</span></span><br><span class="line">List&lt;DeleteObject&gt; deleteObjects = Stream.iterate(<span class="number">1</span>, i -&gt; ++i)</span><br><span class="line">    <span class="comment">//最多多少</span></span><br><span class="line">    .limit(chunkTotal)</span><br><span class="line">    <span class="comment">//object是分片目录加上i</span></span><br><span class="line">    .map(i -&gt; <span class="keyword">new</span> <span class="title class_">DeleteObject</span>(chunkFileFolderPath.concat(Integer.toString(i))))</span><br><span class="line">    .toList();</span><br></pre></td></tr></table></figure></li><li><p>删除分片文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除分块文件</span></span><br><span class="line">Iterable&lt;Result&lt;DeleteError&gt;&gt; results = minioClient.removeObjects(RemoveObjectsArgs</span><br><span class="line">        .builder()</span><br><span class="line">        .bucket(bucket_video)</span><br><span class="line">        .objects(deleteObjects)</span><br><span class="line">        .build());</span><br></pre></td></tr></table></figure></li><li><p>遍历结果以处理可能的删除错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历结果以处理可能的删除错误</span></span><br><span class="line">results.forEach(r -&gt; &#123;</span><br><span class="line">    <span class="type">DeleteError</span> <span class="variable">deleteError</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        deleteError = r.get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;清除分块文件失败,objectName:&#123;&#125;&quot;</span>,deleteError.objectName(),e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除分块文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chunkFileFolderPath 分块文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chunkTotal 分块文件总数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">clearChunkFiles</span><span class="params">(String chunkFileFolderPath, <span class="type">int</span> chunkTotal)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//迭代构建文件对象放到集合中</span></span><br><span class="line">        List&lt;DeleteObject&gt; deleteObjects = Stream.iterate(<span class="number">1</span>, i -&gt; ++i)</span><br><span class="line">            .limit(chunkTotal)</span><br><span class="line">            .map(i -&gt; <span class="keyword">new</span> <span class="title class_">DeleteObject</span>(chunkFileFolderPath.concat(Integer.toString(i))))</span><br><span class="line">            .toList();</span><br><span class="line">        <span class="comment">//删除分块文件</span></span><br><span class="line">        Iterable&lt;Result&lt;DeleteError&gt;&gt; results = minioClient.removeObjects(RemoveObjectsArgs</span><br><span class="line">                      .builder()</span><br><span class="line">                      .bucket(bucket_video)</span><br><span class="line">                      .objects(deleteObjects)</span><br><span class="line">                      .build());</span><br><span class="line">        <span class="comment">//遍历结果以处理可能的删除错误</span></span><br><span class="line">        results.forEach(r -&gt; &#123;</span><br><span class="line">            <span class="type">DeleteError</span> <span class="variable">deleteError</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                deleteError = r.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;清除分块文件失败,objectName:&#123;&#125;&quot;</span>,deleteError.objectName(),e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;清楚分块文件失败,chunkFileFolderPath:&#123;&#125;&quot;</span>,chunkFileFolderPath,e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这样清除分块的方法也完成了，在合并完文件后调用清除分块的方法合并分片的接口就完成了<br>合并分片方法完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并分片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileMd5 文件的md5来决定合并那个视频</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileExt 合并后的文件名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chunkTotal 分片数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 合并后的视频地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">mergeChunksAndUpload</span><span class="params">(String fileMd5, String fileExt, <span class="type">int</span> chunkTotal)</span> &#123;</span><br><span class="line">    String objectName;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//分块文件所在目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">chunkFolderPath</span> <span class="operator">=</span> getChunkFileFolderPath(fileMd5);</span><br><span class="line">        <span class="comment">//找到分块文件</span></span><br><span class="line">        List&lt;ComposeSource&gt; sources = Stream.iterate(<span class="number">1</span>, i -&gt; ++i)</span><br><span class="line">            <span class="comment">//总数为5 最大返回5个流</span></span><br><span class="line">            .limit(chunkTotal)</span><br><span class="line">            <span class="comment">//映射i 构建每个分块文件的对象</span></span><br><span class="line">            .map(i -&gt; ComposeSource.builder()</span><br><span class="line">                 .bucket(bucket_video)</span><br><span class="line">                 .object(chunkFolderPath + i)</span><br><span class="line">                 .build()</span><br><span class="line">                )</span><br><span class="line">            <span class="comment">//转为List</span></span><br><span class="line">            .toList();</span><br><span class="line">        <span class="comment">//合并后的文件的objectName</span></span><br><span class="line">        objectName = getFilePathByMd5(fileMd5,fileExt);</span><br><span class="line">        log.info(<span class="string">&quot;合并后的文件路径: &#123;&#125;&quot;</span>,objectName);</span><br><span class="line">        <span class="comment">//将分片合并为一个文件</span></span><br><span class="line">        minioClient.composeObject(ComposeObjectArgs</span><br><span class="line">                                  .builder()</span><br><span class="line">                                  .bucket(bucket_video)</span><br><span class="line">                                  .object(objectName)</span><br><span class="line">                                  .sources(sources)</span><br><span class="line">                                  .build());</span><br><span class="line">        log.info(<span class="string">&quot;文件合并并上传成功&quot;</span>);</span><br><span class="line">        clearChunkFiles(chunkFolderPath,chunkTotal);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;文件合并并上传失败&quot;</span>, e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件合并并上传失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objectName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403271557666.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403271558333.png"></p><p>可以看到分块已经被合并成一个视频文件，分块也已经被删除。请求后也返回了文件的目录</p><p>接下来我们来实现根据文件的目录来下载文件的接口</p><h2 id="Minio下载文件"><a href="#Minio下载文件" class="headerlink" title="Minio下载文件"></a>Minio下载文件</h2><h3 id="minio下载方法"><a href="#minio下载方法" class="headerlink" title="minio下载方法"></a>minio下载方法</h3><p>以流的方式下载一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InputStream <span class="title function_">getObject</span><span class="params">(GetObjectArgs args)</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象的InputStream,并保存为文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">stream</span> <span class="operator">=</span></span><br><span class="line">    minioClient.getObject(</span><br><span class="line">    GetObjectArgs.builder().bucket(<span class="string">&quot;my-bucketname&quot;</span>).object(<span class="string">&quot;my-objectname&quot;</span>).build());</span><br><span class="line"><span class="comment">// 读流</span></span><br><span class="line"><span class="type">File</span> <span class="variable">targetFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\deploy\\targetFile.tmp&quot;</span>);</span><br><span class="line">FileUtils.copyInputStreamToFile(stream, targetFile);</span><br><span class="line">stream.close();</span><br></pre></td></tr></table></figure><p>分析下载接口需要的参数</p><p>首先桶名我们指定了对应的桶名所以不需要</p><p>文件目录，这个就是合并后返回的，我们需要这个</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objectName 文件目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download/downloadvideo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downloadFileFromMinIO(String objectName)&#123;</span><br><span class="line">    <span class="keyword">return</span> minioService.downloadFileFromMinIO(objectName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现下载文件的方法"><a href="#实现下载文件的方法" class="headerlink" title="实现下载文件的方法"></a>实现下载文件的方法</h3><ol><li><p>在<strong>MinioService</strong>创建下载的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载指定文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objectName 文件目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downloadFileFromMinIO(String objectName);</span><br></pre></td></tr></table></figure></li><li><p>在<strong>MioioServiceImpl</strong>实现下载的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downloadFileFromMinIO(String objectName) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>首先获取指定对象的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取指定对象的数据</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> minioClient.getObject(GetObjectArgs</span><br><span class="line">            .builder()</span><br><span class="line">            .bucket(bucket_video)</span><br><span class="line">            .object(objectName)</span><br><span class="line">            .build());</span><br></pre></td></tr></table></figure></li><li><p>将文件转为byte字节数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将文件转为byte字节数组</span></span><br><span class="line"><span class="type">byte</span>[] byteArray = IOUtils.toByteArray(inputStream);</span><br></pre></td></tr></table></figure></li><li><p>设置响应头信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置响应头信息</span></span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line"><span class="comment">//设置二进制流数据格式</span></span><br><span class="line">headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line"><span class="comment">//通知浏览器以attachment(下载的方式)打开图片</span></span><br><span class="line">headers.setContentDispositionFormData(<span class="string">&quot;attachment&quot;</span>,objectName);</span><br></pre></td></tr></table></figure></li><li><p>返回文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//返回文件</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(byteArray,headers, HttpStatus.OK);</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载指定文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objectName 文件目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downloadFileFromMinIO(String objectName) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取指定对象的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> minioClient.getObject(GetObjectArgs</span><br><span class="line">                                                        .builder()</span><br><span class="line">                                                        .bucket(bucket_video)</span><br><span class="line">                                                        .object(objectName)</span><br><span class="line">                                                        .build());</span><br><span class="line">        <span class="comment">//将文件转为byte字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] byteArray = IOUtils.toByteArray(inputStream);</span><br><span class="line">        <span class="comment">//设置响应头信息</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        <span class="comment">//设置二进制流数据格式</span></span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">        <span class="comment">//通知浏览器以attachment(下载的方式)打开图片</span></span><br><span class="line">        headers.setContentDispositionFormData(<span class="string">&quot;attachment&quot;</span>,objectName);</span><br><span class="line">        <span class="comment">//返回文件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(byteArray,headers, HttpStatus.OK);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;下载文件失败&quot;</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403271639240.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403271639145.png"></p><p>可以看到下载了指定的文件，文件也并没有损坏可以打开播放</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> java文件存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 使用thumbnailator进行图片处理</title>
      <link href="/2024/03/19/Java%20%E4%BD%BF%E7%94%A8thumbnailator%E8%BF%9B%E8%A1%8C%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
      <url>/2024/03/19/Java%20%E4%BD%BF%E7%94%A8thumbnailator%E8%BF%9B%E8%A1%8C%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Thumbnailator</code>是一个开源的Java项目，它提供了非常简单的API来对图片进行缩放、旋转以及加水印的处理。</p><p>有多简单呢？简单到一行代码就可以完成图片处理。形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thumbnails.of(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/io/directory&quot;</span>).listFiles())</span><br><span class="line">.size(<span class="number">640</span>,<span class="number">480</span>)</span><br><span class="line">.outputFormat(<span class="string">&quot;jpg&quot;</span>)</span><br><span class="line">    .toFiles(Rename.PREFIX_DOT_THUMBNAIL);</span><br></pre></td></tr></table></figure><h1 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h1><h2 id="Thumbnails"><a href="#Thumbnails" class="headerlink" title="Thumbnails"></a>Thumbnails</h2><p><code>Thumbnails</code>是使用 Thumbnailator 创建缩略图的主入口。</p><p>它提供了一组初始化<code>Thumbnails.Builder</code>的接口。</p><p>先看下这组接口的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可变长度参数列表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;File&gt; <span class="title function_">of</span><span class="params">(String... files)</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;File&gt; <span class="title function_">of</span><span class="params">(File... files)</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;URL&gt; <span class="title function_">of</span><span class="params">(URL... urls)</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;? <span class="keyword">extends</span> <span class="title class_">InputStream</span>&gt; of(InputStream... inputStreams) &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;BufferedImage&gt; <span class="title function_">of</span><span class="params">(BufferedImage... images)</span> &#123;...&#125;</span><br><span class="line"><span class="comment">// 迭代器（所有实现 Iterable 接口的 Java 对象都可以，当然也包括 List、Set）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;File&gt; <span class="title function_">fromFilenames</span><span class="params">(Iterable&lt;String&gt; files)</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;File&gt; <span class="title function_">fromFiles</span><span class="params">(Iterable&lt;File&gt; files)</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;URL&gt; <span class="title function_">fromURLs</span><span class="params">(Iterable&lt;URL&gt; urls)</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;InputStream&gt; <span class="title function_">fromInputStreams</span><span class="params">(Iterable&lt;? extends InputStream&gt; inputStreams)</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Builder&lt;BufferedImage&gt; <span class="title function_">fromImages</span><span class="params">(Iterable&lt;BufferedImage&gt; images)</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>很显然，<strong>Thumbnails 允许通过传入文件名、文件、网络图的 URL、图片流、图片缓存多种方式来初始化构造器</strong>。</p><p>因此，你可以根据实际需求来灵活的选择图片的输入方式。</p><p>需要注意一点：<strong>如果输入是多个对象（无论你是直接输入容器对象或使用可变参数方式传入多个对象），则输出也必须选用输出多个对象的方式，否则会报异常。</strong></p><h2 id="Thumbnails-Builder"><a href="#Thumbnails-Builder" class="headerlink" title="Thumbnails.Builder"></a>Thumbnails.Builder</h2><p><code>Thumbnails.Builder</code> 是 <code>Thumbnails</code> 的内部静态类。它用于设置生成缩略图任务的相关参数。</p><p><em><strong>注：</strong></em><code>Thumbnails.Builder</code> <em><strong>的构造函数是私有函数。所以，它只允许通过</strong></em> <code>Thumbnails</code> <em><strong>的实例化函数来进行初始化。</strong></em></p><h3 id="设置参数的函数"><a href="#设置参数的函数" class="headerlink" title="设置参数的函数"></a>设置参数的函数</h3><p><code>Thumbnails.Builder</code> 提供了一组函数链形式的接口来设置缩放图参数。</p><p>以设置大小函数为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Builder&lt;T&gt; <span class="title function_">size</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span></span><br><span class="line">&#123;</span><br><span class="line">    updateStatus(Properties.SIZE, Status.ALREADY_SET);</span><br><span class="line">    updateStatus(Properties.SCALE, Status.CANNOT_SET);</span><br><span class="line"></span><br><span class="line">    validateDimensions(width, height);</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过返回 this 指针，使得设置参数函数可以以链式调用的方式来使用，形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thumbnails.of(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;original.jpg&quot;</span>))</span><br><span class="line">        .size(<span class="number">160</span>, <span class="number">160</span>)</span><br><span class="line">        .rotate(<span class="number">90</span>)</span><br><span class="line">        .watermark(Positions.BOTTOM_RIGHT, ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;watermark.png&quot;</span>)), <span class="number">0.5f</span>)</span><br><span class="line">        .outputQuality(<span class="number">0.8</span>)</span><br><span class="line">        .toFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;image-with-watermark.jpg&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h3><p><code>Thumbnails.Builder</code>提供了一组重载函数来输出生成的缩放图</p><p>函数声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回图片缓存</span></span><br><span class="line"><span class="keyword">public</span> List&lt;BufferedImage&gt; <span class="title function_">asBufferedImages</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> BufferedImage <span class="title function_">asBufferedImage</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="comment">// 返回文件列表</span></span><br><span class="line"><span class="keyword">public</span> List&lt;File&gt; <span class="title function_">asFiles</span><span class="params">(Iterable&lt;File&gt; iterable)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;File&gt; <span class="title function_">asFiles</span><span class="params">(Rename rename)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;File&gt; <span class="title function_">asFiles</span><span class="params">(File destinationDir, Rename rename)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toFile</span><span class="params">(File outFile)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toFile</span><span class="params">(String outFilepath)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toFiles</span><span class="params">(Iterable&lt;File&gt; iterable)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toFiles</span><span class="params">(Rename rename)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toFiles</span><span class="params">(File destinationDir, Rename rename)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="comment">// 创建输出流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toOutputStream</span><span class="params">(OutputStream os)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toOutputStreams</span><span class="params">(Iterable&lt;? extends OutputStream&gt; iterable)</span> <span class="keyword">throws</span> IOException &#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>Thumbnailator 的工作步骤十分简单，可分为三步：</p><ol><li>输入：<code>Thumbnails</code>根据输入初始化构造器 – <code>Thumbnails.Builder</code>。</li><li>设置：<code>Thumbnails.Builder</code>设置缩放图片的参数。</li><li>输出：<code>Thumbnails.Builder</code>输出图片文件或图片流。</li></ol><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>前文介绍了 Thumbnailator 的核心 API，接下来我们就可以通过实战来看看 Thumbnailator 究竟可以做些什么。</p><p>Thumbnailator 生成什么样的图片，是根据设置参数来决定的。</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>maven 项目中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.coobird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thumbnailator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片缩放"><a href="#图片缩放" class="headerlink" title="图片缩放"></a>图片缩放</h2><p><code>Thumbnails.Builder</code>的<code>size</code>函数可以设置图片精确的宽度和高度，也可以用<code>scale</code>函数设置缩放比例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Thumbnails.of(<span class="string">&quot;oldFile.png&quot;</span>)</span><br><span class="line">        .size(<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">        .toFile(<span class="string">&quot;newFile_16_16.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">Thumbnails.of(<span class="string">&quot;oldFile.png&quot;</span>)</span><br><span class="line">        .scale(<span class="number">2.0</span>)</span><br><span class="line">        .toFile(<span class="string">&quot;newFile_scale_2.0.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">Thumbnails.of(<span class="string">&quot;oldFile.png&quot;</span>)</span><br><span class="line">        .scale(<span class="number">1.0</span>, <span class="number">0.5</span>)</span><br><span class="line">        .toFile(<span class="string">&quot;newFile_scale_1.0_0.5.png&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="图片旋转"><a href="#图片旋转" class="headerlink" title="图片旋转"></a>图片旋转</h2><p><code>Thumbnails.Builder</code>的<code>size</code>函数可以设置新图片的旋转角度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thumbnails.of(<span class="string">&quot;oldFile.png&quot;</span>)</span><br><span class="line">        .scale(<span class="number">0.8</span>)</span><br><span class="line">        .rotate(<span class="number">90</span>)</span><br><span class="line">        .toFile(<span class="string">&quot;newFile_rotate_90.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">Thumbnails.of(<span class="string">&quot;oldFile.png&quot;</span>)</span><br><span class="line">        .scale(<span class="number">0.8</span>)</span><br><span class="line">        .rotate(<span class="number">180</span>)</span><br><span class="line">        .toFile(<span class="string">&quot;newFile_rotate_180.png&quot;</span>);</span><br></pre></td></tr></table></figure><p>正数：顺时针 负数：逆时针</p><h2 id="加水印"><a href="#加水印" class="headerlink" title="加水印"></a>加水印</h2><p><code>Thumbnails.Builder</code>的<code>watermark</code>函数可以为图片添加水印图片。第一个参数是水印的位置；第二个参数是水印图片的缓存数据；第三个参数是透明度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedImage</span> <span class="variable">watermarkImage</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;wartermarkFile.png&quot;</span>));</span><br><span class="line">Thumbnails.of(<span class="string">&quot;oldFile.png&quot;</span>)</span><br><span class="line">        .scale(<span class="number">0.8</span>)</span><br><span class="line">        .watermark(Positions.BOTTOM_LEFT, watermarkImage, <span class="number">0.5f</span>)</span><br><span class="line">        .toFile(<span class="string">&quot;newFile_watermark.png&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="批量处理图片"><a href="#批量处理图片" class="headerlink" title="批量处理图片"></a>批量处理图片</h2><p>例如批量为图片加水印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedImage</span> <span class="variable">watermarkImage</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;wartermarkFile.png&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">destinationDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\watermark\\&quot;</span>);</span><br><span class="line">Thumbnails.of(<span class="string">&quot;oldFile.png&quot;</span>, <span class="string">&quot;oldFile2.png&quot;</span>)</span><br><span class="line">        .scale(<span class="number">0.8</span>)</span><br><span class="line">        .watermark(Positions.BOTTOM_LEFT, watermarkImage, <span class="number">0.5f</span>)</span><br><span class="line">        .toFiles(destinationDir, Rename.PREFIX_DOT_THUMBNAIL);</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/coobird/thumbnailator/wiki/Examples">Thumbnailator 官方示例文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> Java影像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限管理</title>
      <link href="/2024/03/07/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2024/03/07/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="关于权限"><a href="#关于权限" class="headerlink" title="关于权限"></a>关于权限</h1><p>在一个系统中有很多功能例如：查看用户信息、修改用户信息、删除用户信息，而其中有些功能并不适宜让所有人都能够访问，例如修改用户信息和删除用户信息，这些功能需要被合理的使用，只能由一些人使用。</p><p>那么怎么识别谁能够使用这些功能，就是给每个人加上一个标识也就是角色</p><ul><li><p>如果你是管理员，就可以进行修改和删除的操作</p></li><li><p>如果你是普通用户，就只能进行查看操作</p></li></ul><p>有了对权限的认知，下面会讲解在数据库中如何实现权限</p><h1 id="数据库表的建立"><a href="#数据库表的建立" class="headerlink" title="数据库表的建立"></a>数据库表的建立</h1><h2 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h2><p>用户表就是存放用户的各种信息</p><p>大概为：</p><ul><li>id：作为方便查找用户信息的一种标识</li><li>name：名字</li><li>username：名字可能会与其他人重复，我们需要username来确认是否为要找的人</li><li>password：其他人不能操作自己的空间，需要登录判断是否为本人</li><li>phone：手机号 也是作为是否为本人的标识</li><li>gender：性别</li><li>enabled：是否为启用 如果进行了敏感操作，封禁账号</li><li>last_login_time：上一次登录时间</li></ul><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403021920546.png"></p><h2 id="角色表"><a href="#角色表" class="headerlink" title="角色表"></a>角色表</h2><p>我们首先思考角色需要什么，首先是名字用来区分，之后为备注对于角色的说明</p><p>字段：</p><ul><li>id：方便查找的标识</li><li>name：角色的名称</li><li>remark：备注</li></ul><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403021920509.png"></p><h2 id="权限表"><a href="#权限表" class="headerlink" title="权限表"></a>权限表</h2><p>权限需要什么：</p><ul><li>id</li><li>name： 名字用来区分哪个权限</li><li>url：实际的权限：每个功能由url请求获取，所以需要存储url</li><li>method：请求的方式</li><li>service：服务名</li><li>parent_id：父id，在一个菜单中可能拥有多个功能。在权限管理界面 查看权限时需要以树形结构显示</li></ul><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403021924592.png"></p><p>现在用户、角色、权限表的创建都已完成，那么这样就可以实现权限了吗？答案是还需要让它们关联起来</p><p>用户对应着角色而角色则对应着权限</p><p>首先创建用户角色表</p><h2 id="用户角色表"><a href="#用户角色表" class="headerlink" title="用户角色表"></a>用户角色表</h2><p>用户对应的角色</p><p>字段：</p><ul><li>id</li><li>role_id：角色的id </li><li>user_id：用户的id</li></ul><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403021923922.png"></p><p>其次是角色权限表</p><h2 id="角色权限表"><a href="#角色权限表" class="headerlink" title="角色权限表"></a>角色权限表</h2><p>角色拥有的权限</p><p>字段：</p><ul><li>id</li><li>role_id：角色的id</li><li>permission_id：权限的id</li></ul><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403021925052.png"></p><p>这样用户关联角色，角色关联权限，也让用户间接拥有了权限</p><h1 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h1><p>我们可以使用Spring整合SpringSecurity来实现权限控制</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403191110401.png"></p><p>首先看流程</p><p>在SpringSecurity中它通过<strong>UserDetailsService</strong>来获取用户信息，之后角色信息也被加载封装为<strong>GrantedAuthority</strong> 代表赋予给用户的权限的接口。</p><p>因为我们用的是数据库中的数据</p><p>所以我们需要先实现<strong>UserDetails</strong>提供用户详细信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">//权限</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities;</span><br><span class="line">    <span class="comment">//账户是否过期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> accountNonExpired;</span><br><span class="line">    <span class="comment">//账户是否锁定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> accountNonLocked;</span><br><span class="line">    <span class="comment">//证书是否过期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> credentialsNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountUser</span><span class="params">(Integer userId, String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(userId, username, password, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountUser</span><span class="params">(Integer userId, String username, String password,</span></span><br><span class="line"><span class="params">                       <span class="type">boolean</span> enabled, <span class="type">boolean</span> accountNonExpired, <span class="type">boolean</span> credentialsNonExpired,</span></span><br><span class="line"><span class="params">                       <span class="type">boolean</span> accountNonLocked, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        Assert.isTrue(username != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(username) &amp;&amp; password != <span class="literal">null</span>,</span><br><span class="line">                <span class="string">&quot;Cannot pass null or empty values to constructor&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.enabled = enabled;</span><br><span class="line">        <span class="built_in">this</span>.accountNonExpired = accountNonExpired;</span><br><span class="line">        <span class="built_in">this</span>.credentialsNonExpired = credentialsNonExpired;</span><br><span class="line">        <span class="built_in">this</span>.accountNonLocked = accountNonLocked;</span><br><span class="line">        <span class="built_in">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再实现<strong>UserDetailsService</strong>来获取<strong>AccountUser</strong>对象，从而实现用户的认证和授权</p><ol><li>创建<strong>AccountUserDetailsService</strong>实现<strong>UserDetailsService</strong>接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>注入<strong>UserService</strong>，因为我们的数据是从数据库中获得。至于数据库的实体类根据上面的表自己创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AccountUserDetailsService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userService = userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserService</strong></p><p>此 Service 中创建了获取用户对应权限的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; &#123;</span><br><span class="line">    <span class="comment">//用户角色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRoleService userRoleService;</span><br><span class="line">    <span class="comment">//角色权限</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RolePermissionService rolePermissionService;</span><br><span class="line">    <span class="comment">//权限</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserRoleService userRoleService, RolePermissionService rolePermissionService, PermissionService permissionService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userRoleService = userRoleService;</span><br><span class="line">        <span class="built_in">this</span>.rolePermissionService = rolePermissionService;</span><br><span class="line">        <span class="built_in">this</span>.permissionService = permissionService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过用户名获取权限</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Permission&gt; <span class="title function_">getPermissionByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">super</span>.getOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername, username), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getPermissionByUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过id获取权限</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Permission&gt; <span class="title function_">getPermissionByUserId</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">super</span>.getById(userId);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getPermissionByUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Permission&gt; <span class="title function_">getPermissionByUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//最终返回的权限集合</span></span><br><span class="line">        List&lt;Permission&gt; permissions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != user) &#123;</span><br><span class="line">            <span class="comment">//获取用户对应的全部角色</span></span><br><span class="line">            List&lt;UserRole&gt; userRoles = userRoleService.list(Wrappers.&lt;UserRole&gt;lambdaQuery().eq(UserRole::getUserId, user.getId()));</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(userRoles)) &#123;</span><br><span class="line">                List&lt;Integer&gt; roleIds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//将角色id收集到集合中</span></span><br><span class="line">                userRoles.forEach(userRole -&gt; roleIds.add(userRole.getRoleId()));</span><br><span class="line">                <span class="comment">//查找角色对应的所有权限id </span></span><br><span class="line">   List&lt;RolePermission&gt; rolePermissions = rolePermissionService.list(Wrappers.&lt;RolePermission&gt;lambdaQuery().in(RolePermission::getRoleId, roleIds));</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(rolePermissions)) &#123;</span><br><span class="line">                    <span class="comment">//将权限id都添加到集合中</span></span><br><span class="line">                    List&lt;Integer&gt; permissionIds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    rolePermissions.forEach(rolePermission -&gt; permissionIds.add(rolePermission.getPermissionId()));</span><br><span class="line">                    <span class="comment">//通过权限id查找id</span></span><br><span class="line">                    permissions = permissionService.list(Wrappers.&lt;Permission&gt;lambdaQuery().in(Permission::getId, permissionIds));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permissions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>重写 loadUserByUsername(String username) 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">       <span class="comment">//通过username查出用户的信息</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername, username), <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccountUser</span>(user.getId(), user.getUsername(), user.getPassword(), getUserAuthority(user.getUsername()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取用户权限信息（角色、菜单权限）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;GrantedAuthority&gt; <span class="title function_">getUserAuthority</span><span class="params">(String username)</span> &#123;</span><br><span class="line">       <span class="comment">// 角色(比如ROLE_admin)，菜单操作权限(比如sys:user:list)</span></span><br><span class="line">       <span class="comment">// 角色必须以ROLE_开头，security在判断角色时会自动截取ROLE_</span></span><br><span class="line">       List&lt;Permission&gt; permissions = userService.getPermissionByUsername(username);</span><br><span class="line">       <span class="comment">// 比如ROLE_admin,ROLE_normal,sys:user:list,...</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">authority</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">if</span> (CollectionUtils.isNotEmpty(permissions)) &#123;</span><br><span class="line">           List&lt;String&gt; urls = permissions.stream().map(Permission::getUrl).collect(Collectors.toList());</span><br><span class="line">           authority = StrUtil.join(<span class="string">&quot;,&quot;</span>, urls);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//commaSeparatedStringToAuthorityList: 为user账户添加一个或多个权限，用逗号分隔</span></span><br><span class="line">       <span class="keyword">return</span> AuthorityUtils.commaSeparatedStringToAuthorityList(authority);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>创建<strong>SecurityConfig</strong>在其中注册<strong>AuthenticationProvider</strong>使用我们的来获取用户数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启权限控制 prePostEnabled:在请求前验证</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccountUserDetailsService accountUserDetailsService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//进行JWT Token验证的过滤器。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtAuthenticationFilter jwtAuthenticationFilter;</span><br><span class="line">    <span class="comment">//处理登出成功事件。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtLogoutSuccessHandler jwtLogoutSuccessHandler;</span><br><span class="line">    <span class="comment">//处理访问被拒绝（Access Denied）情况。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtAccessDeniedHandler jwtAccessDeniedHandler;</span><br><span class="line">    <span class="comment">//处理身份验证成功事件。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="comment">//处理身份验证失败事件。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginFailureHandler loginFailureHandler;</span><br><span class="line">    <span class="comment">//处理身份验证失败（未经授权）情况。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityConfig</span><span class="params">(AccountUserDetailsService accountUserDetailsService, JwtAuthenticationFilter jwtAuthenticationFilter, JwtLogoutSuccessHandler jwtLogoutSuccessHandler, JwtAccessDeniedHandler jwtAccessDeniedHandler, LoginSuccessHandler loginSuccessHandler, LoginFailureHandler loginFailureHandler, JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountUserDetailsService = accountUserDetailsService;</span><br><span class="line">        <span class="built_in">this</span>.jwtAuthenticationFilter = jwtAuthenticationFilter;</span><br><span class="line">        <span class="built_in">this</span>.jwtLogoutSuccessHandler = jwtLogoutSuccessHandler;</span><br><span class="line">        <span class="built_in">this</span>.jwtAccessDeniedHandler = jwtAccessDeniedHandler;</span><br><span class="line">        <span class="built_in">this</span>.loginSuccessHandler = loginSuccessHandler;</span><br><span class="line">        <span class="built_in">this</span>.loginFailureHandler = loginFailureHandler;</span><br><span class="line">        <span class="built_in">this</span>.jwtAuthenticationEntryPoint = jwtAuthenticationEntryPoint;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//密码加密</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置身份认证提供者，用于对用户进行身份验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DaoAuthenticationProvider实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationProvider <span class="title function_">authenticationProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个用户认证提供者</span></span><br><span class="line">        <span class="type">DaoAuthenticationProvider</span> <span class="variable">authProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        <span class="comment">// 设置用户相关信息，可以从数据库中读取、或者缓存、或者配置文件</span></span><br><span class="line">        authProvider.setUserDetailsService(accountUserDetailsService);</span><br><span class="line">        <span class="comment">// 设置加密机制，用于对用户进行身份验证</span></span><br><span class="line">        authProvider.setPasswordEncoder(passwordEncoder());</span><br><span class="line">        <span class="keyword">return</span> authProvider;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置身份验证管理器，用于处理身份验证请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config AuthenticationConfiguration实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AuthenticationManager实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(AuthenticationConfiguration config)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> config.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Spring Security过滤器链，定义请求的安全配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http HttpSecurity实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecurityFilterChain实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">// 禁用csrf(防止跨站请求伪造攻击)</span></span><br><span class="line">                .csrf(csrf -&gt; csrf.disable())</span><br><span class="line">                <span class="comment">// 配置登录操作</span></span><br><span class="line">                .formLogin(form -&gt; form</span><br><span class="line">                        .successHandler(loginSuccessHandler).failureHandler(loginFailureHandler))</span><br><span class="line">                <span class="comment">// 配置登出操作</span></span><br><span class="line">                .logout(logout -&gt; logout.logoutSuccessHandler(jwtLogoutSuccessHandler))</span><br><span class="line">                <span class="comment">// 使用无状态session，即不使用session缓存数据</span></span><br><span class="line">                .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))</span><br><span class="line">                <span class="comment">// 设置白名单，允许特定路径的请求不进行身份验证</span></span><br><span class="line">                .authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/user/login&quot;</span>).permitAll()</span><br><span class="line">                        <span class="comment">//其他请求都需要认证后才能访问</span></span><br><span class="line">                        .anyRequest().authenticated())</span><br><span class="line">                <span class="comment">// 添加JWT身份验证过滤器</span></span><br><span class="line">                .authenticationProvider(authenticationProvider())</span><br><span class="line">                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要进行权限控制的controller方法上添加权限控制注解 <strong>@PreAuthorize</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/user&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationProvider authenticationProvider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(AuthenticationProvider authenticationProvider)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authenticationProvider = authenticationProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserLoginDTO userLoginDTO)</span> &#123;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationProvider</span><br><span class="line">                .authenticate(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userLoginDTO.getUsername(), userLoginDTO.getPassword()));</span><br><span class="line">        <span class="comment">// 认证成功</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtil.generateToken(userLoginDTO.getUsername());</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@PreAuthorize配合@EnableGlobalMethodSecurity(prePostEnabled = true)使用</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;/user/logout&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 退出登录</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">auth</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="keyword">if</span> (auth != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//清除认证</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SecurityContextLogoutHandler</span>().logout(request, response, auth);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于**@PreAuthorize：value** （可省略）属性是 <strong>Spring-EL</strong> 表达式类型的字符串。其值可参考类 <strong>SecurityExpressionRoot</strong>，这是Spring Security 框架封装的专门针对 Spring Security 框架本身的 Spring—EL表达式解析类。</p><p>分别介绍一下其中值选项：</p><ul><li>hasRole，对应 <strong>public final boolean hasRole(String role)</strong> 方法，含义为必须含有某角色（<strong>ROLE_开头</strong>），如有多个的话，必须同时具有这些角色，才可访问对应资源。</li><li>hasAnyRole，对应 <strong>public final boolean hasAnyRole(String… roles)</strong> 方法，含义为只要具有某一角色（<strong>多个角色的话，具有任意一个即可</strong>），即可访问对应资源。</li><li>hasAuthority，对应 <strong>public final boolean hasAuthority(String authority)</strong> 方法，含义同 <strong>hasRole</strong>，不同点在于这是权限，而不是角色，<strong>区别就在于角色往往带有前缀（如默认的ROLE_）</strong>，<strong>而权限只有标识</strong>。</li><li>hasAnyAuthority，对应 <strong>public final boolean hasAnyAuthority(String… authorities)</strong> 方法，含义同 <strong>hasAnyRole</strong>，不同点在于这是权限，而不是角色，<strong>区别就在于角色往往带有前缀（如默认的ROLE_）</strong>，<strong>而权限只有标识</strong>。</li><li>permitAll，对应 <strong>public final boolean permitAll()</strong> 方法，含义为<strong>允许所有人（可无任何权限）访问</strong>。</li><li>denyAll，对应 <strong>public final boolean denyAll()</strong> 方法，含义为<strong>不允许任何（即使有最大权限）访问</strong>。</li><li>isAnonymous，对应 <strong>public final boolean isAnonymous()</strong> 方法，含义为<strong>可匿名（不登录）访问</strong>。</li><li>isAuthenticated，对应 <strong>public final boolean isAuthenticated()</strong> 方法，含义为<strong>身份证认证后访问</strong>。</li><li>isRememberMe，对应 <strong>public final boolean isRememberMe()</strong> 方法，含义为<strong>记住我用户操作访问</strong>。</li><li>isFullyAuthenticated，对应 <strong>public final boolean isFullyAuthenticated()</strong> 方法，含义为<strong>非匿名且非记住我用户允许访问</strong>。</li></ul><p>最终效果：</p><p>admin用户拥有退出权限</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403071958028.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403071958191.png"></p><p>可以看到admin有登出权限，成功登出</p><p>normal用户没有 登出权限</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403071958119.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403071959679.png"></p><p>可以看到normal没有权限登出，操作失败返回不允许访问</p><h2 id="动态权限管理"><a href="#动态权限管理" class="headerlink" title="动态权限管理"></a>动态权限管理</h2><p>我们第一个实现权限管理的方法是直接在接口&#x2F;Service层方法上添加注解，这样做的好处是实现简单，但是有一个问题就是权限硬编码，每一个方法需要什么权限都是在代码中配置好的，后期如果想通过管理页面修改是不可能的，要修改某一个方法所需要的权限只能改代码</p><p>所以我们使用动态权限管理解决</p><p>将请求和权限的关系通过数据库来描述，每一个请求需要什么权限都在数据库中配置好，当请求到达的时候，动态查询，然后判断权限是否满足，这样做的好处是比较灵活，将来需要修改接口和权限之间的关系时，可以通过管理页面点几下，问题就解决了，不用修改代码。</p><p>一个url可以被多个role访问，只要user中有一个role即可访问该url</p><ol><li>首先创建一个类存储url和role对应的关系</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionWithRoleVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionWithRoleService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RolePermissionService rolePermissionService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;PermissionWithRoleVO&gt; <span class="title function_">getPermissionWithRole</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//最终返回的结果</span></span><br><span class="line">        List&lt;PermissionWithRoleVO&gt; permissionWithRoleVOS = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取所有权限</span></span><br><span class="line">        List&lt;Permission&gt; permissions = permissionService.list();</span><br><span class="line">        permissions.forEach(permission -&gt; &#123;</span><br><span class="line">            <span class="comment">//获取权限对应的角色id</span></span><br><span class="line">            List&lt;Integer&gt; roleIds = rolePermissionService</span><br><span class="line">                    .list(Wrappers.&lt;RolePermission&gt;lambdaQuery().eq(RolePermission::getPermissionId, permission.getId()))</span><br><span class="line">                    .stream().map(RolePermission::getRoleId).toList();</span><br><span class="line">            <span class="comment">//获取角色</span></span><br><span class="line">            List&lt;Role&gt; roles = roleService.list(Wrappers.&lt;Role&gt;lambdaQuery().in(Role::getId, roleIds));</span><br><span class="line">            <span class="comment">//将url和角色放进集合里</span></span><br><span class="line">            permissionWithRoleVOS.add(<span class="keyword">new</span> <span class="title class_">PermissionWithRoleVO</span>(permission.getUrl(),roles));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> permissionWithRoleVOS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在<strong>SecurityConfig</strong>中的**securityFilterChain()**方法配置动态权限管理<br>动态权限管理在.anyRequest().access()中配置。<br>此配置进行了如下操作：</p><ul><li><p>将**.authenticated()**的功能在这里实现 </p></li><li><p>动态权限管理</p><ul><li>首先获取此次访问请求的路径</li><li>对比看数据库中是否有此路径</li><li>如果有获取可以访问此路径的角色集</li><li>获取当前用户拥有的角色</li><li>判断角色集中是否有用户拥有的角色</li><li>如果有，请求访问通过</li><li>如果没有，不允许访问</li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.authorizeHttpRequests(auth -&gt;</span><br><span class="line">                    auth</span><br><span class="line">                        .requestMatchers(URL_WHITELIST).permitAll()</span><br><span class="line">                        .anyRequest()</span><br><span class="line">                        .access((authentication, object) -&gt; &#123;</span><br><span class="line">                            <span class="comment">// 验证是否认证 替换.authenticated()</span></span><br><span class="line">                            <span class="keyword">if</span> (authentication.get() <span class="keyword">instanceof</span> AnonymousAuthenticationToken) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">false</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 动态权限管理</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> object.getRequest().getRequestURI();</span><br><span class="line">                            <span class="keyword">for</span> (PermissionWithRoleVO p : permissionWithRoleService.getPermissionWithRole()) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>().match(p.getUrl(), requestURI)) &#123;</span><br><span class="line">                                    <span class="comment">//获取此url可以进行访问的角色</span></span><br><span class="line">                                    List&lt;Role&gt; roles = p.getRoles();</span><br><span class="line">                                    <span class="comment">//获取当前用户拥有的角色，只要有一个可以访问该url的角色即可访问</span></span><br><span class="line">                                    <span class="keyword">for</span> (GrantedAuthority authority : authentication.get().getAuthorities()) &#123;</span><br><span class="line">                                        <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">                                            <span class="keyword">if</span> (authority.getAuthority().equals(role.getName())) &#123;</span><br><span class="line">                                                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">true</span>);</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 如果没有匹配上，则默认不允许访问</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">false</span>);</span><br><span class="line">                        &#125;)</span><br><span class="line">                )</span><br></pre></td></tr></table></figure><ol start="4"><li><p>因为我们前面实现用户获取的权限信息是urls，所以我们需要将其改为获取角色</p><p><strong>UserService</strong> 获取用户拥有的权限方法改为获取用户拥有的角色，之前的方法名为<strong>getPermissionByUser()</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">getRoleByUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    List&lt;Role&gt; roles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != user) &#123;</span><br><span class="line">        <span class="comment">//获取用户对应的全部角色</span></span><br><span class="line">        List&lt;UserRole&gt; userRoles = userRoleService.list(Wrappers.&lt;UserRole&gt;lambdaQuery().eq(UserRole::getUserId, user.getId()));</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(userRoles)) &#123;</span><br><span class="line">            List&lt;Integer&gt; roleIds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//将角色id收集到集合中</span></span><br><span class="line">            userRoles.forEach(userRole -&gt; roleIds.add(userRole.getRoleId()));</span><br><span class="line">            roles = roleService.list(Wrappers.&lt;Role&gt;lambdaQuery().in(Role::getId, roleIds));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ <strong>AccountUserDetailsService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;GrantedAuthority&gt; <span class="title function_">getUserAuthority</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="comment">// 角色(比如ROLE_admin)，菜单操作权限(比如sys:user:list)</span></span><br><span class="line">    <span class="comment">// 角色必须以ROLE_开头，security在判断角色时会自动截取ROLE_</span></span><br><span class="line">    List&lt;Role&gt; roles = userService.getPermissionByUsername(username);</span><br><span class="line">    <span class="comment">// 比如ROLE_admin,ROLE_normal,sys:user:list,...</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">authority</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(roles)) &#123;</span><br><span class="line">        List&lt;String&gt; names = roles.stream().map(Role::getName).collect(Collectors.toList());</span><br><span class="line">        authority = StrUtil.join(<span class="string">&quot;,&quot;</span>, names);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> AuthorityUtils.commaSeparatedStringToAuthorityList(authority);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的动态权限管理就完成了，效果跟用注解一样。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信登录和支付的实现</title>
      <link href="/2024/03/07/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%92%8C%E6%94%AF%E4%BB%98%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/03/07/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%92%8C%E6%94%AF%E4%BB%98%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="微信登录"><a href="#微信登录" class="headerlink" title="微信登录"></a>微信登录</h1><h2 id="微信PC扫码登录"><a href="#微信PC扫码登录" class="headerlink" title="微信PC扫码登录"></a>微信PC扫码登录</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>网站应用微信登录是基于OAuth2.0协议标准构建的微信OAuth2.0授权登录系统。 在进行微信OAuth2.0授权登录接入之前，在微信开放平台注册开发者账号，并拥有一个已审核通过的网站应用，并获得相应的AppID和AppSecret，申请微信登录且通过审核后，可开始接入流程。</p><p>因为这个开放平台注册账号需要钱，所以我们申请一个微信公众平台接口测试账号<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">网站</a></p><h4 id="接口配置信息"><a href="#接口配置信息" class="headerlink" title="接口配置信息"></a>接口配置信息</h4><p>接口配置信息的url需要是一个能被外网访问的域名，本地链接是不可以的，如果没有域名可以用cpolar内网穿透</p><p>此url我们需要创建一个接口用来让微信校验是否可用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/wxCheck&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">wxSignatureCheck</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value = &quot;signature&quot;)</span> String signature,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value = &quot;timestamp&quot;)</span> String timestamp,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value = &quot;nonce&quot;)</span> String nonce,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value = &quot;echostr&quot;)</span> String echostr</span></span><br><span class="line"><span class="params">)</span>&#123;</span><br><span class="line">    log(<span class="string">&quot;收到微信校验请求,echostr:&quot;</span>,echostr);</span><br><span class="line">    <span class="comment">//校验是否微信的请求</span></span><br><span class="line">    <span class="keyword">return</span> echostr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据要求返回echostr就可以了</p><h4 id="体验接口权限表中的网页服务的网页账号填写回调网页域名"><a href="#体验接口权限表中的网页服务的网页账号填写回调网页域名" class="headerlink" title="体验接口权限表中的网页服务的网页账号填写回调网页域名"></a>体验接口权限表中的网页服务的网页账号填写回调网页域名</h4><p>回调域名不需要http:&#x2F;&#x2F;开头 正确示例：7fa65291.r16.cpolar.top</p><h3 id="授权流程说明"><a href="#授权流程说明" class="headerlink" title="授权流程说明"></a>授权流程说明</h3><p>微信OAuth2.0授权登录让微信用户使用微信身份安全登录第三方应用或网站，在微信用户授权登录已接入微信OAuth2.0的第三方应用后，第三方可以获取到用户的接口调用凭证<strong>（access_token）</strong>，通过access_token可以进行微信开放平台授权关系接口调用，从而可实现获取微信用户基本开放信息和帮助用户实现基础开放功能等。 微信OAuth2.0授权登录目前支持authorization_code模式，适用于拥有server端的应用授权。该模式整体流程为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第三方发起微信授权登录请求，微信用户允许授权第三方应用后，微信会拉起应用或重定向到第三方网站，并且带上授权临时票据code参数；</span><br><span class="line">2. 通过code参数加上AppID和AppSecret等，通过API换取access_token；</span><br><span class="line">3. 通过access_token进行接口调用，获取用户基本数据资源或帮助用户实现基本操作。</span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>引导用户访问<a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect%E6%AD%A4%E9%93%BE%E6%8E%A5">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect此链接</a></p><p>参数说明</p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>appid</td><td>是</td><td>公众号的唯一标识</td></tr><tr><td>redirect_uri</td><td>是</td><td>授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理</td></tr><tr><td>response_type</td><td>是</td><td>返回类型，请填写code</td></tr><tr><td>scope</td><td>是</td><td>应用授权作用域，snsapi_base <br />（不弹出授权页面，直接跳转，只能获取用户openid），<br />snsapi_userinfo <br />（弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， <br />即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td></tr><tr><td>state</td><td>是</td><td>重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</td></tr><tr><td>#wechat_redirect</td><td>是</td><td>无论直接打开还是做页面302重定向时候，必须带此参数</td></tr><tr><td>forcePopup</td><td>否</td><td>强制此次授权需要用户弹窗确认；<br />默认为false；需要注意的是，若用户命中了特殊场景下的静默授权逻辑，则此参数不生效</td></tr></tbody></table><p>首先肯定不能让用户自己输入链接访问，所以我们用此链接生成二维码，当用户点击微信登录时，后端返回二维码，前端展示，在用户扫码后自动跳转此连接</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>首先需要导入生成二维码的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写出微信登录的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/wxLogin&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wxLoginPage</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//redirect_url是回调的地址 注意要转成UrlEncode格式</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">redirectUrl</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;http://7fa65291.r16.cpolar.top/wxCallback&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">//构造二维码链接地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx4582e0245ae500d9&amp;redirect_uri=&quot;</span></span><br><span class="line">        + redirectUrl + <span class="string">&quot;&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect&quot;</span>;</span><br><span class="line">    <span class="comment">//生成二维码的，扫描后跳转上面的地址</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    QrCodeUtil.generate(url,<span class="number">300</span>,<span class="number">300</span>,<span class="string">&quot;jpg&quot;</span>,response.getOutputStream());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调地址下面讲解</p><p>此时引导用户访问连接已完成</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>通过code换取网页授权access_token</p><p>链接为：</p><p><a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a></p><p>参数说明</p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>appid</td><td>是</td><td>公众号的唯一标识</td></tr><tr><td>secret</td><td>是</td><td>公众号的appsecret</td></tr><tr><td>code</td><td>是</td><td>填写第一步获取的code参数</td></tr><tr><td>grant_type</td><td>是</td><td>填写为authorization_code</td></tr></tbody></table><p>首先这个code是会在用户授权后自动请求回调地址时获取的</p><p>写出回调接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/wxCallback&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pcCallback</span><span class="params">(String code, String state, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,</span></span><br><span class="line"><span class="params">                         HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//通过code获取用户信息</span></span><br><span class="line">    user = WeChatUtil.getUserInfo(code);</span><br><span class="line">    <span class="comment">//缓存用户信息，构造session</span></span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个WeChatUtil类并在里面创建getUserInfo(String code)方法</p><p>首先我们实现用code换取网页授权access_token</p><p>appId和secret在测试号信息里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> WeChatUser <span class="title function_">getUserInfo</span><span class="params">(String code)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//构造http请求客户端</span></span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//用code交换token，code为扫码后微信服务器响应来的值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">tokenUrl</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;</span> + appId + <span class="string">&quot;&amp;secret=&quot;</span> + secret + <span class="string">&quot;&amp;code=&quot;</span> + code + <span class="string">&quot;&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line">    <span class="comment">//发请求</span></span><br><span class="line">    <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(tokenUrl);</span><br><span class="line">    <span class="type">String</span> <span class="variable">responseResult</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//接受返回的数据，转成utf-8格式</span></span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">    <span class="keyword">if</span>(response.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">        responseResult = EntityUtils.toString(response.getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    log(<span class="string">&quot;获取accessToken返回结果：&#123;&#125;&quot;</span>,responseResult);</span><br><span class="line">    <span class="comment">//将结果封装到TokenInfo对象中</span></span><br><span class="line">    <span class="type">TokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> JSON.parseObject(responseResult, TokenInfo.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法现在用code交换了<strong>access_token</strong>和<strong>openid</strong>这样我们就能进行下一步了</p><p>TokenInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenInfo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网页授权接口调用凭证，注意：此access_token与基础支持的access_token不同</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String access_token;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  access_token接口调用凭证超时时间，单位(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String expires_in;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户刷新access_token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String refresh_token;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String openid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户授权的作用域，使用逗号(,)分割</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String scope;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>拉取用户信息（需scope为 snsapi_userinfo）</p><p>链接为</p><p><a href="https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN">https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>access_token</td><td>网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</td></tr><tr><td>openid</td><td>用户的唯一标识</td></tr><tr><td>lang</td><td>返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语</td></tr></tbody></table><p>继续在getUserInfo方法下写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用accessToken获取扫码人的个人信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">userInfoUrl</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=&quot;</span> + tokenInfo.getAccess_token()</span><br><span class="line">    + <span class="string">&quot;&amp;openid=&quot;</span> + tokenInfo.getOpenid() + <span class="string">&quot;&amp;lang=zh_CN&quot;</span>;</span><br><span class="line"><span class="comment">//发请求</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">httpGet1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(userInfoUrl);</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="type">HttpResponse</span> <span class="variable">response1</span> <span class="operator">=</span> httpClient.execute(httpGet1);</span><br><span class="line"><span class="keyword">if</span>(response1.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">    responseResult = EntityUtils.toString(response1.getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">log(<span class="string">&quot;获取个人信息返回: &#123;&#125;&quot;</span>,responseResult);</span><br><span class="line"><span class="comment">//将获取到的用户信息转化为WeChatUser对象</span></span><br><span class="line"><span class="type">WeChatUser</span> <span class="variable">weChatUser</span> <span class="operator">=</span> JSON.parseObject(responseResult, WeChatUser.class);</span><br><span class="line"><span class="keyword">return</span> weChatUser;</span><br></pre></td></tr></table></figure><p>这些代码实现了用accessToken和openid获取扫码人的个人信息</p><p>并将返回的个人信息存放到weChatUser对象中</p><p>到最后返回个人信息</p><p><strong>WeChatUser</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatUser</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户的唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String openid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 城市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 省份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 国家</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String headimgurl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小程序登录"><a href="#小程序登录" class="headerlink" title="小程序登录"></a>小程序登录</h2><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先注册一个小程序账号</p><p>注册后在开发管理-开发设置 查看AppID和获取AppSecret</p><p>小程序获取code是用 wx.login(Object object) 来获取的</p><p>所以当前端使用 wx.login(Object object)方法并将用户信息和code返回给后端，我们就可以通过code获取openid和session_key</p><h3 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h3><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403201626164.jpg"></p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>创建小程序登录的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> UserDTO <span class="title function_">appletLogin</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserDTO</strong> 里为用户信息和code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户的唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String wxId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String wxUsername;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 城市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 省份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 国家</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String wxHeadPic;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录凭证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该如何凭借code获取 openid 和 session_key </p><p>请求此链接：GET <a href="https://api.weixin.qq.com/sns/jscode2session">https://api.weixin.qq.com/sns/jscode2session</a> </p><p>请求参数</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>appid</td><td>string</td><td>是</td><td>小程序 appId</td></tr><tr><td>secret</td><td>string</td><td>是</td><td>小程序 appSecret</td></tr><tr><td>js_code</td><td>string</td><td>是</td><td>登录时获取的 code，可通过<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html">wx.login</a>获取</td></tr><tr><td>grant_type</td><td>string</td><td>是</td><td>授权类型，此处只需填写 authorization_code</td></tr></tbody></table><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造http请求客户端</span></span><br><span class="line"><span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"><span class="comment">//用code交换token，code为扫码后微信服务器响应来的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">tokenUrl</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session?appid=wx325282a4da418aca&amp;secret=9222d4e72894f1210cba8de8d630d6ee&amp;js_code=&quot;</span> + userDTO.getCode() + <span class="string">&quot;&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line"><span class="comment">//发请求</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(tokenUrl);</span><br><span class="line"><span class="type">String</span> <span class="variable">responseResult</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//接受返回的数据，转成utf-8格式</span></span><br><span class="line"><span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line"><span class="keyword">if</span>(response.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">    responseResult = EntityUtils.toString(response.getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">log(<span class="string">&quot;获取accessToken返回结果：&#123;&#125;&quot;</span>,responseResult);</span><br><span class="line"><span class="comment">//将结果封装到TokenInfo对象中</span></span><br><span class="line"><span class="type">LoginDTO</span> <span class="variable">loginDTO</span> <span class="operator">=</span> JSON.parseObject(responseResult, LoginDTO.class);</span><br></pre></td></tr></table></figure><p>通过发送请求获取openid和session_key存在放LoginDTO中</p><p>LoginDTO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginDTO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String openid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String session_key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户在开放平台的唯一标识符，若当前小程序已绑定到微信开放平台账号下会返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String unionid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer errcode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String errmsg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到openid和session_key即可将用户信息存放到我们的数据库中</p><p>User实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String wxId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String headPic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String wxHeadPic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String wxUsername;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存放逻辑，用openid查找数据库是否有同样的id，如果有说明已经注册过，如果没有进行注册</p><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//如果没有失败code</span></span><br><span class="line">   <span class="keyword">if</span>(<span class="literal">null</span> == loginDTO.getErrcode())&#123;</span><br><span class="line">       <span class="comment">//添加唯一标识</span></span><br><span class="line">       userDTO.setWxId(loginDTO.getOpenid());</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   log(userDTO.toString());</span><br><span class="line">   <span class="comment">//查询数据库中是否有相同用户</span></span><br><span class="line">   <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getWxId, userDTO.getWxId()));</span><br><span class="line">   Optional&lt;User&gt; optional = Optional.ofNullable(user);</span><br><span class="line">   <span class="comment">//如果有，将数据库的数据复制到返回对象</span></span><br><span class="line">   <span class="keyword">if</span>(optional.isPresent())&#123;</span><br><span class="line">       BeanUtils.copyProperties(user,userDTO);</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//数据库中不存在，注册用户信息</span></span><br><span class="line">       user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       BeanUtils.copyProperties(userDTO,user);</span><br><span class="line">       user.setId(user.getWxId());</span><br><span class="line">       user.setUsername(user.getWxUsername());</span><br><span class="line">       user.setHeadPic(user.getWxHeadPic());</span><br><span class="line">       userMapper.insert(user);</span><br><span class="line">       BeanUtils.copyProperties(user,userDTO);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//测试token</span></span><br><span class="line">   userDTO.setToken(UUID.randomUUID().toString());</span><br><span class="line">   redisCache.setCacheObject(<span class="string">&quot;USER_&quot;</span> + userDTO.getToken(),loginDTO.getSession_key(),<span class="number">3600</span>, TimeUnit.SECONDS);</span><br><span class="line">   <span class="keyword">return</span> userDTO;</span><br></pre></td></tr></table></figure><p>登录后的token不要直接存放session_key</p><h1 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h1><h2 id="微信Native支付"><a href="#微信Native支付" class="headerlink" title="微信Native支付"></a>微信Native支付</h2><h3 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Native支付是指商户系统按微信支付协议生成支付二维码，用户再用微信“扫一扫”完成支付的模式。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>Native支付适用于PC网站、实体店单品或订单、媒体广告支付等场景</p><p>用户扫描商户展示在各种场景的二维码进行支付，具体操作流程如下：</p><p><strong>步骤一</strong> 商户根据微信支付的规则，为不同商品生成不同的二维码（如图3.1），展示在各种场景，用于用户扫描购买。</p><p><strong>步骤二</strong> 用户使用微信“扫一扫”（如图3.2）扫描二维码后，获取商品支付信息，引导用户完成支付（如图3.3）。</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211320241.png">           <img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211321613.png"><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211322842.png">   </p><p> 图3.1支付二维码图3.2打开微信扫一扫二维码图3.3确认支付页面</p><p><strong>步骤三</strong> 用户确认支付，输入支付密码（如图3.4）。</p><p><strong>步骤四</strong> 支付完成后会提示用户支付成功（如图3.5），商户后台得到支付成功的通知，然后进行发货处理。</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211323337.png"><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211323424.png"></p><p>​     图3.4用户确认支付，输入密码图3.5支付成功提示</p><h3 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h3><p>在接入微信支付native服务前，你需要进行以下准备步骤：</p><ol><li>选择接入模式：普通商户或普通服务商</li><li>申请参数：AppID、商户号</li><li>配置应用</li><li>下载并配置商户证书</li></ol><h4 id="选择接入模式"><a href="#选择接入模式" class="headerlink" title="选择接入模式"></a>选择接入模式</h4><p>商户需要判断自己公司注册区域适用的接入模式和自身实际情况，申请成为普通商户或普通服务商：</p><ul><li>普通商户自行申请入驻微信支付，无需服务商协助</li><li>普通服务商则自身无法作为一个普通商户直接发起交易，其发起交易必须传入相关特约商户商户号的参数信息。</li></ul><h4 id="参数申请"><a href="#参数申请" class="headerlink" title="参数申请"></a>参数申请</h4><ol><li>申请AppID<ul><li>由于微信支付的产品体系全部搭载于微信的社交体系之上，所以普通商户或服务商商户接入微信支付之前，都需要有一个微信社交载体，该载体对应的ID即为AppID。</li><li>对于普通商户，该社交载体可以是公众号（<a href="https://mp.weixin.qq.com/mp/opshowpage?action=newoplaw">什么是公众号</a>），小程序（<a href="https://mp.weixin.qq.com/cgi-bin/wx?token=&lang=zh_CN">什么是小程序</a>）或App。</li><li>如申请社交载体为公众号，请前往 <a href="https://mp.weixin.qq.com/cgi-bin/loginpage?t=wxm2-login&lang=zh_CN&token=">公众平台</a>申请。</li><li>如申请社交载体为小程序，请前往 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/getstart.html#%E7%94%B3%E8%AF%B7%E5%B8%90%E5%8F%B7">小程序平台</a>申请。</li><li>如商户已拥有自己的App，且希望该App接入微信支付，请前往 <a href="https://open.weixin.qq.com/">开放平台</a>申请。</li><li>商户可根据实际的业务需求来选择申请不同的社交载体。</li><li>各类社交载体一旦申请成功后，可以登录对应平台查看账号信息以获取对应的AppID。</li></ul></li><li>申请mchid<ul><li>申请mchid和AppID的操作互不影响，可以并行操作，申请地址如下： 商户号申请平台。</li><li>申请成功后，会向服务商填写的联系邮箱下发通知邮件，内容包含申请成功的mchid及其登录账号密码，请妥善保存。<br>注意：一个mchid只能对应一个结算币种，若需要使用多个币种收款，需要申请对应数量的mchid。</li></ul></li><li>绑定AppID及mchid<ul><li>AppID和mchid全部申请完毕后，需要建立两者之间的绑定关系</li><li>普通商户模式下，AppID与mchid之间的关系为多对多，即一个AppID下可以绑定多个mchid，而一个mchid也可以绑定多个AppID。</li></ul></li><li>完成</li></ol><h4 id="配置应用"><a href="#配置应用" class="headerlink" title="配置应用"></a>配置应用</h4><p>API v3密钥主要用于平台证书解密、回调信息解密，具体使用方式可参见接口规则文档中证书和回调报文解密章节。</p><ol><li><p>登录<a href="https://pay.wechatpay.cn/">微信商户平台</a>，进入【账户中心 &gt; API安全 】目录，设置APIv3密钥。<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210912299.png"></p></li><li><p>在弹出窗口中点击“已沟通”。<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210912444.png"></p></li><li><p>输入API密钥，内容为32位字符，包括数字及大小写字母。点击获取短信验证码。<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210913945.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210913098.png"></p></li><li><p>输入短信验证码，点击“确认”即设置成功。</p></li></ol><h4 id="下载并配置商户证书"><a href="#下载并配置商户证书" class="headerlink" title="下载并配置商户证书"></a>下载并配置商户证书</h4><p>商户API证书具体使用说明可参见接口规则文档中<a href="https://pay.weixin.qq.com/docs/merchant/development/interface-rules/privatekey-and-certificate.html">私钥和证书</a>章节</p><p>以下为具体下载步骤：</p><ol><li>从2018年底开始，微信支付新入住机构及商户都将使用CA签发证书，在证书申请页面上点击”申请证书”<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210916321.png"></li><li>在弹出窗口中点击”确定”。<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210916370.png"></li><li>在弹出窗口内点击“下载证书工具”按钮下载证书工具。<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210917279.png"></li><li>安装证书工具并打开，选择证书需要存储的路径后点击“申请证书”。<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210917652.png"></li><li>在证书工具中，将复制的商户信息粘贴并点击“下一步”。<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210918976.png"></li><li>获取请求串<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210918086.png"><br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210918315.png"><br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210919536.png"></li><li>生成证书串<br>步骤1：生成证书串<br>步骤2：在【证书工具】-“复制请求串”环节，点击“下一步”按钮进入“粘贴证书串”环节；<br>步骤3：在【证书工具】-“粘贴证书串”环节，点击“粘贴”按钮将证书串粘贴至文本<br>步骤4：点击“下一步”按钮，进入【证书工具】-“生成证书”环节<br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210928758.png"><br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210928401.png"><br><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210928548.png"></li><li>在【证书工具】-“生成证书”环节，已完成申请证书流程，点击“查看证书文件夹”，查看已生成的证书文件</li></ol><h3 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h3><h4 id="搭建和配置开发环境"><a href="#搭建和配置开发环境" class="headerlink" title="搭建和配置开发环境"></a>搭建和配置开发环境</h4><p>为了帮助开发者调用开放接口，微信提供了<strong>JAVA</strong>、<strong>PHP</strong>、<strong>GO</strong>三种语言版本的开发库，封装了<strong>签名生成、签名验证、敏感信息加&#x2F;解密、媒体文件上传</strong> 等基础功能（更多语言版本的开发库将在近期陆续提供）。</p><p>测试步骤：</p><ol><li><p>根据自身开发语言，选择对应的开发库并构建项目，具体配置请参考下面链接的详细说明：</p><ul><li><a href="https://github.com/wechatpay-apiv3/wechatpay-java">wechatpay-java</a>（推荐）、<a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient">wechatpay-apache-httpclient</a>，适用于Java开发者。<ul><li>注：当前开发指引接口JAVA示例代码采用wechatpay-apache-httpclient版本。</li></ul></li><li><a href="https://github.com/wechatpay-apiv3/wechatpay-php">wechatpay-php</a>（推荐）、<a href="https://github.com/wechatpay-apiv3/wechatpay-guzzle-middleware">wechatpay-guzzle-middleware</a>，适用于PHP开发者<ul><li>注：当前开发指引接口PHP示例代码采用wechatpay-guzzle-middleware版本。</li></ul></li><li><a href="https://github.com/wechatpay-apiv3/wechatpay-go">wechatpay-go</a>，适用于Go开发者。</li></ul></li><li><p>创建加载商户私钥、加载平台证书、初始化httpClient的通用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 加载商户私钥（privateKey：私钥字符串）</span></span><br><span class="line">    <span class="type">PrivateKey</span> <span class="variable">merchantPrivateKey</span> <span class="operator">=</span> PemUtil</span><br><span class="line">            .loadPrivateKey(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(privateKey.getBytes(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 加载平台证书（mchId：商户号,mchSerialNo：商户证书序列号,apiV3Key：V3密钥）</span></span><br><span class="line">    <span class="type">AutoUpdateCertificatesVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoUpdateCertificatesVerifier</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(mchId, <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(mchSerialNo, merchantPrivateKey)),apiV3Key.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 初始化httpClient</span></span><br><span class="line">    httpClient = WechatPayHttpClientBuilder.create()</span><br><span class="line">            .withMerchant(mchId, mchSerialNo, merchantPrivateKey)</span><br><span class="line">            .withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(verifier)).build();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于接口的示例代码，替换请求参数后可发起测试</p></li></ol><h3 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h3><h4 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h4><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403210943927.png"></p><p>重点步骤：</p><h5 id="步骤2：Native下单"><a href="#步骤2：Native下单" class="headerlink" title="步骤2：Native下单"></a>步骤2：Native下单</h5><p>用户确认支付后，商户调用微信支付<a href="https://pay.weixin.qq.com/docs/merchant/apis/native-payment/direct-jsons/native-prepay.html">Native下单API</a>生成预支付交易以获取支付二维码链接code_url；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CreateOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//请求URL</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/v3/pay/transactions/native&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 请求body参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reqdata</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;amount\&quot;: &#123;&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;total\&quot;: 100,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;currency\&quot;: \&quot;CNY\&quot;&quot;</span></span><br><span class="line">        + <span class="string">&quot;&#125;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;mchid\&quot;: \&quot;1900006891\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;description\&quot;: \&quot;Image形象店-深圳腾大-QQ公仔\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;notify_url\&quot;: \&quot;https://www.weixin.qq.com/wxpay/pay.php\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;out_trade_no\&quot;: \&quot;1217752501201407033233388881\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;goods_tag\&quot;: \&quot;WXG\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;appid\&quot;: \&quot;wxdace645e0bc2c424\&quot;&quot;</span> + <span class="string">&quot;&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(reqdata,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">                <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;failed,resp code = &quot;</span> + statusCode+ <span class="string">&quot;,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">            httpClient.close();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际中我们可以创建Amount 和 NativePayParams 来接收下单的参数</p><p>示例：</p><p><strong>Amount</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Amount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line">    <span class="keyword">private</span> String currency;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NativePayParams</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativePayParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String appid; <span class="comment">//应用id</span></span><br><span class="line">    <span class="keyword">private</span> String mchid; <span class="comment">//商户id</span></span><br><span class="line">    <span class="keyword">private</span> String description; <span class="comment">//商品描述</span></span><br><span class="line">    <span class="keyword">private</span> String out_trade_no; <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String notify_url; <span class="comment">//支付成功回调通知地址</span></span><br><span class="line">    <span class="keyword">private</span> Amount amount; <span class="comment">//订单金额信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求参数替换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Amount</span> <span class="variable">amount</span> <span class="operator">=</span> Amount.builder()</span><br><span class="line">                .currency(<span class="string">&quot;CNY&quot;</span>)</span><br><span class="line">                .total(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"><span class="type">NativePayParams</span> <span class="variable">payParams</span> <span class="operator">=</span> NativePayParams.builder()</span><br><span class="line">    .appid(<span class="string">&quot;appId&quot;</span>)</span><br><span class="line">    .mchid(<span class="string">&quot;mchId&quot;</span>)</span><br><span class="line">    .description(<span class="string">&quot;java从入门到精通&quot;</span>)</span><br><span class="line">    .out_trade_no(<span class="string">&quot;1217752501201407033233388881&quot;</span>)</span><br><span class="line">    .notify_url(<span class="string">&quot;https://21045581.r10.cpolar.top/native/notify&quot;</span>)</span><br><span class="line">    .amount(amount)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求body参数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reqdata</span> <span class="operator">=</span> JSON.toJSONString(payParams);</span><br></pre></td></tr></table></figure><p>这样对应参数的添加就简洁明了</p><h5 id="步骤4：商户根据返回的code-url生成二维码供用户扫描"><a href="#步骤4：商户根据返回的code-url生成二维码供用户扫描" class="headerlink" title="步骤4：商户根据返回的code_url生成二维码供用户扫描"></a>步骤4：商户根据返回的code_url生成二维码供用户扫描</h5><p>可以使用此依赖将链接转为二维码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以查看此<a href="https://doc.hutool.cn/pages/QrCodeUtil/#%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81">文档</a>来学习如何生成二维码</p><h5 id="步骤9-11："><a href="#步骤9-11：" class="headerlink" title="步骤9-11："></a>步骤9-11：</h5><p>支付结果</p><ul><li>方法一：支付结果通知。用户支付成功后，微信支付会将支付成功的结果以回调通知的形式同步给商户，商户的回调地址需要在调用Native下单API时传入notify_url参数。</li><li>方法二：当因网络抖动或本身notify_url存在问题等原因，导致无法接收到回调通知时，商户也可主动调用查询订单API来获取订单状态。</li></ul><h6 id="支付结果通知"><a href="#支付结果通知" class="headerlink" title="支付结果通知"></a>支付结果通知</h6><p>我们可以定义一个回调接口</p><p>微信支付通知的api在以下链接查看</p><p><a href="https://pay.weixin.qq.com/docs/merchant/apis/native-payment/payment-notice.html">支付通知</a></p><p>对应下单时的<strong>notify_url</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/notify&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,String&gt; <span class="title function_">payNotify</span><span class="params">(<span class="meta">@RequestBody</span> NotifyDto dto)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NotifyDto是支付成功后返回的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotifyDto</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知的创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String create_time;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String event_type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知的资源数据类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String resource_type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知资源数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ResourceDto resource;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调摘要</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现逻辑在Service中实现</p><p>NativePayService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NativePayService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,String&gt; <span class="title function_">payNotify</span><span class="params">(NotifyDto dto)</span> <span class="keyword">throws</span> GeneralSecurityException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NativePayServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativePayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">NativePayService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">apiV3Key</span> <span class="operator">=</span> <span class="string">&quot;apiV3Key&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">payNotify</span><span class="params">(NotifyDto dto)</span> &#123;</span><br><span class="line">        Map&lt;String,String&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//解密微信传递过来的参数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesUtil</span>(apiV3Key.getBytes()).decryptToString(dto.getResource().getAssociated_data().getBytes(),</span><br><span class="line">                    dto.getResource().getNonce().getBytes(),</span><br><span class="line">                    dto.getResource().getCiphertext());</span><br><span class="line">            <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> JSON.parseObject(json, Map.class).get(<span class="string">&quot;out_trade_no&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;----------支付成功的订单号:&quot;</span> + outTradeNo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GeneralSecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            res.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">            res.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析上面的代码</p><ol><li><p>首先Map作为返回参数</p></li><li><p>解密微信传递过来的参数</p><p><a href="https://pay.weixin.qq.com/docs/merchant/development/interface-rules/certificate-callback-decryption.html">解密api</a></p><p>步骤一：验证签名<br>微信支付会对发送给商户的通知进行签名，并将签名值放在通知的HTTP头Wechatpay-Signature。商户应当验证签名，以确认请求来自微信，而不是其他的第三方。签名验证的算法请参考 <a href="https://pay.weixin.qq.com/docs/merchant/development/interface-rules/signature-verification.html">《微信支付API v3签名验证》</a>。<br>步骤二：参数解密<br>为了保证安全性，微信支付在回调通知，对关键信息进行了AES-256-GCM加密。商户应当按照以下的流程进行解密关键信息，解密的流程：</p><ol><li>用商户平台上设置的APIv3密钥【<a href="https://pay.weixin.qq.com/index.php/core/home/login?return_url=/">微信商户平台</a>—&gt;账户设置—&gt;API安全—&gt;设置APIv3密钥】，记为key；</li><li>获取resource.algorithm中描述的算法（目前为AEAD_AES_256_GCM），以及resource.nonce和resource.associated_data；</li><li>使用key、nonce和associated_data，对数据密文resource.ciphertext进行解密，得到JSON形式的资源对象。</li></ol></li><li><p>如此得到支付结果的信息，之后可以自己进行相关业务操作</p></li><li><p>如果失败，返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FAIL&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;失败&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>成功无需返回应答报文</p></li></ol><h6 id="主动调用查询订单API来获取订单状态。"><a href="#主动调用查询订单API来获取订单状态。" class="headerlink" title="主动调用查询订单API来获取订单状态。"></a>主动调用查询订单API来获取订单状态。</h6><p>微信官方不保证支付通知的调用是正确的，所以我们必须加上双保险，可以主动去查询支付的结果</p><p><a href="https://pay.weixin.qq.com/docs/merchant/apis/native-payment/query-by-out-trade-no.html">主动查询api</a></p><p>参考下单的api，编写测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//请求URL</span></span><br><span class="line">    <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;/v3/pay/transactions/out-trade-no/1217752501201407033233388881?mchid=&quot;</span> + mchid);</span><br><span class="line">    httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成签名并执行请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity())</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;failed,resp code = &quot;</span> + statusCode+ <span class="string">&quot;,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际中，轮询去查询订单状态</p><h5 id="关闭订单"><a href="#关闭订单" class="headerlink" title="关闭订单"></a>关闭订单</h5><p>当商户订单支付失败需要生成新单号重新发起支付，要对原订单号调用关单，避免重复支付；系统下单后，用户支付超时，系统退出不再受理，避免用户继续，请调用关单接口</p><blockquote><p>注意</p><ul><li>关单没有时间限制，建议在订单生成后间隔几分钟（最短5分钟）再调用关单接口，避免出现订单状态同步不及时导致关单失败。</li><li>已支付成功的订单不能关闭。</li></ul></blockquote><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CloseOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//请求URL</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/v3/pay/transactions/out-trade-no/sdkphp12345678920201028112429/close&quot;</span>);</span><br><span class="line">    <span class="comment">//请求body参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">reqdata</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;mchid\&quot;: \&quot;&quot;</span>+mchId+<span class="string">&quot;\&quot;&#125;&quot;</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(reqdata,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    httpPost.setEntity(entity);</span><br><span class="line">    httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//完成签名并执行请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;failed,resp code = &quot;</span> + statusCode+ <span class="string">&quot;,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        response.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="微信JSAPI支付"><a href="#微信JSAPI支付" class="headerlink" title="微信JSAPI支付"></a>微信JSAPI支付</h2><h3 id="产品介绍-1"><a href="#产品介绍-1" class="headerlink" title="产品介绍"></a>产品介绍</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>JSAPI支付是指商户通过调用微信支付提供的JSAPI接口，在支付场景中调起微信支付模块完成收款。</p><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>JSAPI支付适用于线下场所、公众号场景和PC网站场景。</p><p>商户已有H5商城网站，用户通过消息或扫描二维码在微信内打开网页时，可以调用微信支付完成下单购买的流程。具体操作流程如下：</p><p><strong>步骤一</strong> 如图2.1，商户下发图文消息或者通过自定义菜单吸引用户点击进入商户网页。</p><p><strong>步骤二</strong> 如图2.2，进入商户网页，用户选择购买，完成选购流程。</p><p><strong>步骤三</strong> 如图2.3，调起微信支付控件，用户开始输入支付密码。</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211325514.png"><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211326145.png"><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211326724.png"></p><p>​图2.1 商户网页下单图2.2请求微信支付图2.3 用户确认支付，输入密码</p><p><strong>步骤四</strong> 如图2.4，密码验证通过，支付成功。商户后台得到支付成功的通知。</p><p><strong>步骤五</strong> 如图2.5，返回商户页面，显示购买成功。该页面由商户自定义。</p><p><strong>步骤六</strong> 如图2.6，微信支付公众号下发支付凭证。</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211328929.png"><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211328367.png">      <img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211333587.png"></p><p>图2.4用户支付成功提示图2.5 返回商户页面图2.6 用户收到微信通知</p><h3 id="准备工作-3"><a href="#准备工作-3" class="headerlink" title="准备工作"></a>准备工作</h3><p>在正式接入微信支付JSAPI服务前，你需要进行以下准备步骤：</p><ol><li>选择接入模式：普通商户或普通服务商</li><li>申请参数：AppID、商户号</li><li>配置应用</li></ol><h4 id="选择接入模式-1"><a href="#选择接入模式-1" class="headerlink" title="选择接入模式"></a>选择接入模式</h4><p>商户需要判断自己公司注册区域适用的接入模式和自身实际情况，申请成为普通商户或普通服务商：</p><ul><li>普通商户自行申请入驻微信支付，无需服务商协助。</li><li>普通服务商则自身无法作为一个普通商户直接发起交易，其发起交易必须传入相关特约商户商户号的参数信息。</li></ul><p>具体接入模式介绍请参考<a href="https://pay.weixin.qq.com/docs/merchant/development/glossary/mode.html">接入模式</a>文档，并按照参考文档完成相应模式的接入。</p><h4 id="申请参数"><a href="#申请参数" class="headerlink" title="申请参数"></a>申请参数</h4><p>请根据自身接入模式分别参考<a href="https://pay.weixin.qq.com/docs/merchant/development/development-preparation/parameter-application.html">微信支付接入准备-普通商户</a>或<a href="https://pay.weixin.qq.com/docs/partner/development/development-preparation/parameter-application.html">微信支付接入准备-普通服务商</a>中的<a href="https://pay.weixin.qq.com/docs/merchant/development/development-preparation/parameter-application.html">参数申请</a> - <a href="https://pay.weixin.qq.com/docs/merchant/development/development-preparation/api-key-config.html">配置API key</a> - <a href="https://pay.weixin.qq.com/docs/merchant/development/development-preparation/download-configure-merchant-certificates.html">下载并配置商户证书</a>三个步骤申请接入参数。</p><h4 id="配置应用-1"><a href="#配置应用-1" class="headerlink" title="配置应用"></a>配置应用</h4><h5 id="设置支付授权目录"><a href="#设置支付授权目录" class="headerlink" title="设置支付授权目录"></a>设置支付授权目录</h5><h6 id="支付授权目录说明"><a href="#支付授权目录说明" class="headerlink" title="支付授权目录说明"></a>支付授权目录说明</h6><ul><li>普通商户最后请求拉起微信支付收银台的页面地址我们称之为“支付授权目录”，例如：<code>https://www.weixin.com/pay.php</code>的支付授权目录为：<code>https://www.weixin.com/</code>。</li><li>普通商户实际的支付授权目录必须和在微信支付商户平台设置的一致，否则会报错“当前页面的URL未注册：”。</li></ul><h6 id="支付授权目录设置说明"><a href="#支付授权目录设置说明" class="headerlink" title="支付授权目录设置说明"></a>支付授权目录设置说明</h6><p>登录【<a href="https://pay.wechatpay.cn/index.php/core/home/login?return_url=/">微信支付商户平台 </a>—&gt;产品中心—&gt;开发配置】，设置后一般5分钟内生效</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211340779.png"></p><h6 id="支付授权目录校验规则说明"><a href="#支付授权目录校验规则说明" class="headerlink" title="支付授权目录校验规则说明"></a>支付授权目录校验规则说明</h6><ul><li>如果支付授权目录设置为顶级域名（例如：<code>https://www.weixin.com/</code> ），那么只校验顶级域名，不校验后缀；</li><li>如果支付授权目录设置为多级目录，就会进行全匹配，例如设置支付授权目录为 <code>https://www.weixin.com/abc/123/</code>，则实际请求页面目录不能为<code>https://www.weixin.com/abc/</code>，也不能为<code>https://www.weixin.com/abc/123/pay/</code>，必须为<code>https://www.weixin.com/abc/123/</code>。</li></ul><h5 id="设置授权域名"><a href="#设置授权域名" class="headerlink" title="设置授权域名"></a>设置授权域名</h5><p>开发JSAPI支付时，在JSAPI下单接口中要求必传用户OpenID，而获取OpenID则需要您在<a href="https://mp.weixin.qq.com/">微信公众平台</a>设置获取OpenID的域名，只有被设置过的域名才是一个有效的获取OpenID的域名，否则将获取失败。具体界面如图所示：</p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211342484.png"></p><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211342740.png"></p><p><strong>开通流程：</strong> 在入驻时选择线下场所，公众号场景，PC网站场景的商户系统默认开通此功能，其他商户如有需要，可以在入驻后前往<a href="https://pay.wechatpay.cn/index.php/core/home/login?return_url=/">商户平台</a>-产品中心-JSAPI支付-申请开通。</p><h3 id="开发准备-1"><a href="#开发准备-1" class="headerlink" title="开发准备"></a>开发准备</h3><h4 id="搭建和配置开发环境-1"><a href="#搭建和配置开发环境-1" class="headerlink" title="搭建和配置开发环境"></a>搭建和配置开发环境</h4><p>为了帮助开发者调用开放接口，微信提供了<strong>JAVA</strong>、<strong>PHP</strong>、<strong>GO</strong>三种语言版本的开发库，封装了<strong>签名生成、签名验证、敏感信息加&#x2F;解密、媒体文件上传</strong> 等基础功能（更多语言版本的开发库将在近期陆续提供）。</p><p>测试步骤：</p><ol><li><p>根据自身开发语言，选择对应的开发库并构建项目，具体配置请参考下面链接的详细说明：</p><ul><li><a href="https://github.com/wechatpay-apiv3/wechatpay-java">wechatpay-java</a>（推荐）、<a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient">wechatpay-apache-httpclient</a>，适用于Java开发者。<ul><li>注：当前开发指引接口JAVA示例代码采用wechatpay-apache-httpclient版本。</li></ul></li><li><a href="https://github.com/wechatpay-apiv3/wechatpay-php">wechatpay-php</a>（推荐）、<a href="https://github.com/wechatpay-apiv3/wechatpay-guzzle-middleware">wechatpay-guzzle-middleware</a>，适用于PHP开发者<ul><li>注：当前开发指引接口PHP示例代码采用wechatpay-guzzle-middleware版本。</li></ul></li><li><a href="https://github.com/wechatpay-apiv3/wechatpay-go">wechatpay-go</a>，适用于Go开发者。</li></ul></li><li><p>创建加载商户私钥、加载平台证书、初始化httpClient的通用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 加载商户私钥（privateKey：私钥字符串）</span></span><br><span class="line">    <span class="type">PrivateKey</span> <span class="variable">merchantPrivateKey</span> <span class="operator">=</span> PemUtil</span><br><span class="line">            .loadPrivateKey(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(privateKey.getBytes(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 加载平台证书（mchId：商户号,mchSerialNo：商户证书序列号,apiV3Key：V3密钥）</span></span><br><span class="line">    <span class="type">AutoUpdateCertificatesVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoUpdateCertificatesVerifier</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(mchId, <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(mchSerialNo, merchantPrivateKey)),apiV3Key.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 初始化httpClient</span></span><br><span class="line">    httpClient = WechatPayHttpClientBuilder.create()</span><br><span class="line">            .withMerchant(mchId, mchSerialNo, merchantPrivateKey)</span><br><span class="line">            .withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(verifier)).build();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于接口的示例代码，替换请求参数后可发起测试</p></li></ol><h3 id="快速接入-1"><a href="#快速接入-1" class="headerlink" title="快速接入"></a>快速接入</h3><h4 id="业务流程-1"><a href="#业务流程-1" class="headerlink" title="业务流程"></a>业务流程</h4><p><img src="https://raw.githubusercontent.com/879x/Drawingbed/main/img/202403211347744.png"></p><p>重点步骤：</p><h5 id="步骤3：JSAPI下单"><a href="#步骤3：JSAPI下单" class="headerlink" title="步骤3：JSAPI下单"></a>步骤3：JSAPI下单</h5><p><a href="https://pay.weixin.qq.com/docs/merchant/apis/jsapi-payment/direct-jsons/jsapi-prepay.html">JSAPI下单api</a></p><p>用户通过商户下发的模板消息或扫描二维码在微信内进入商户网页，当用户选择相关商户购买时，商户系统先调用该接口在微信支付服务后台生成预支付交易单。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CreateOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//请求URL</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/v3/pay/transactions/jsapi&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 请求body参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reqdata</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;amount\&quot;: &#123;&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;total\&quot;: 100,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;currency\&quot;: \&quot;CNY\&quot;&quot;</span></span><br><span class="line">        + <span class="string">&quot;&#125;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;mchid\&quot;: \&quot;1900006891\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;description\&quot;: \&quot;Image形象店-深圳腾大-QQ公仔\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;notify_url\&quot;: \&quot;https://www.weixin.qq.com/wxpay/pay.php\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;payer\&quot;: &#123;&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;openid\&quot;: \&quot;o4GgauE1lgaPsLabrYvqhVg7O8yA\&quot;&quot;</span> + <span class="string">&quot;&#125;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;out_trade_no\&quot;: \&quot;1217752501201407033233388881\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;goods_tag\&quot;: \&quot;WXG\&quot;,&quot;</span></span><br><span class="line">        + <span class="string">&quot;\&quot;appid\&quot;: \&quot;wxdace645e0bc2c424\&quot;&quot;</span> + <span class="string">&quot;&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(reqdata,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">                <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;failed,resp code = &quot;</span> + statusCode+ <span class="string">&quot;,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">            httpClient.close();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际中我们可以创建Amount 和  Payer 和 JSAPIPayParams 来接收下单的参数</p><p>示例：</p><p><strong>Amount</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Amount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line">    <span class="keyword">private</span> String currency;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Payer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String openid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NativePayParams</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativePayParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String appid; <span class="comment">//应用id</span></span><br><span class="line">    <span class="keyword">private</span> String mchid; <span class="comment">//商户id</span></span><br><span class="line">    <span class="keyword">private</span> String description; <span class="comment">//商品描述</span></span><br><span class="line">    <span class="keyword">private</span> String out_trade_no; <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String notify_url; <span class="comment">//支付成功回调通知地址</span></span><br><span class="line">    <span class="keyword">private</span> Amount amount; <span class="comment">//订单金额信息</span></span><br><span class="line">    <span class="keyword">private</span> Payer payer;<span class="comment">//支付者信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求参数替换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">Amount</span> <span class="variable">amount</span> <span class="operator">=</span> Amount.builder()</span><br><span class="line">                   .currency(<span class="string">&quot;CNY&quot;</span>)</span><br><span class="line">                   .total(<span class="number">1</span>)</span><br><span class="line">                   .build();</span><br><span class="line"><span class="type">Payer</span> <span class="variable">payer</span> <span class="operator">=</span> Payer.builder()</span><br><span class="line">       .openid(<span class="string">&quot;openid&quot;</span>)</span><br><span class="line">       .build();</span><br><span class="line">   <span class="type">NativePayParams</span> <span class="variable">payParams</span> <span class="operator">=</span> NativePayParams.builder()</span><br><span class="line">       .appid(<span class="string">&quot;appId&quot;</span>)</span><br><span class="line">       .mchid(<span class="string">&quot;mchId&quot;</span>)</span><br><span class="line">       .description(<span class="string">&quot;java从入门到精通&quot;</span>)</span><br><span class="line">       .out_trade_no(<span class="string">&quot;1217752501201407033233388881&quot;</span>)</span><br><span class="line">       .notify_url(<span class="string">&quot;https://21045581.r10.cpolar.top/jsapi/notify&quot;</span>)</span><br><span class="line">       .amount(amount)</span><br><span class="line">       .payer(payer)</span><br><span class="line">       .build();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 请求body参数</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">reqdata</span> <span class="operator">=</span> JSON.toJSONString(payParams);</span><br></pre></td></tr></table></figure><p>这样对应参数的添加就简洁明了</p><h5 id="步骤8：JSAPI调起支付"><a href="#步骤8：JSAPI调起支付" class="headerlink" title="步骤8：JSAPI调起支付"></a>步骤8：JSAPI调起支付</h5><p><a href="https://pay.weixin.qq.com/docs/merchant/apis/jsapi-payment/jsapi-transfer-payment.html">JSAPI调起支付api</a></p><p>通过JSAPI下单API成功获取预支付交易会话标识（prepay_id）后，需要通过JSAPI调起支付API来调起微信支付收银台。</p><p>由后端返回prepay_id给前端，前端请求JSAPI调起支付api</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">onBridgeReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">WeixinJSBridge</span>.<span class="title function_">invoke</span>(<span class="string">&#x27;getBrandWCPayRequest&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;wx2421b1c4370ecxxx&quot;</span>,   <span class="comment">//公众号ID，由商户传入    </span></span><br><span class="line">            <span class="string">&quot;timeStamp&quot;</span>: <span class="string">&quot;1395712654&quot;</span>,   <span class="comment">//时间戳，自1970年以来的秒数    </span></span><br><span class="line">            <span class="string">&quot;nonceStr&quot;</span>: <span class="string">&quot;e61463f8efa94090b1f366cccfbbb444&quot;</span>,      <span class="comment">//随机串    </span></span><br><span class="line">            <span class="string">&quot;package&quot;</span>: <span class="string">&quot;prepay_id=wx21201855730335ac86f8c43d1889123400&quot;</span>,</span><br><span class="line">            <span class="string">&quot;signType&quot;</span>: <span class="string">&quot;RSA&quot;</span>,     <span class="comment">//微信签名方式：    </span></span><br><span class="line">            <span class="string">&quot;paySign&quot;</span>: <span class="string">&quot;oR9d8PuhnIc+YZ8cBHFCwfgpaK9gd7vaRvkYD7rthRAZ\/X+QBhcCYL21N7cHCTUxbQ+EAt6Uy+lwSN22f5YZvI45MLko8Pfso0jm46v5hqcVwrk6uddkGuT+Cdvu4WBqDzaDjnNa5UK3GfE1Wfl2gHxIIY5lLdUgWFts17D4WuolLLkiFZV+JSHMvH7eaLdT9N5GBovBwu5yYKUR7skR8Fu+LozcSqQixnlEZUfyE55feLOQTUYzLmR9pNtPbPsu6WVhbNHMS3Ss2+AehHvz+n64GDmXxbX++IOBvm2olHu3PsOUGRwhudhVf7UcGcunXt8cqNjKNqZLhLw4jq\/xDg==&quot;</span> <span class="comment">//微信签名</span></span><br><span class="line">        &#125;,</span><br><span class="line">                              <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">err_msg</span> == <span class="string">&quot;get_brand_wcpay_request:ok&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：</span></span><br><span class="line">                <span class="comment">//res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">WeixinJSBridge</span> == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, onBridgeReady, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, onBridgeReady);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onWeixinJSBridgeReady&#x27;</span>, onBridgeReady);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">onBridgeReady</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>重要入参说明：</strong></p><ul><li><strong>package：</strong> JSAPI下单接口返回的prepay_id参数值，提交格式如：prepay_id&#x3D;***。</li><li><strong>signType：</strong> 该接口V3版本仅支持RSA。</li><li><strong>paySign：</strong> 签名。</li></ul><p>paySign生成规则、响应详情及错误码请参见 <a href="https://pay.weixin.qq.com/docs/merchant/apis/jsapi-payment/jsapi-transfer-payment.html">JSAPI调起支付</a>接口文档。</p><h5 id="步骤15：接收微信支付结果"><a href="#步骤15：接收微信支付结果" class="headerlink" title="步骤15：接收微信支付结果"></a>步骤15：接收微信支付结果</h5><p>我们可以定义一个回调接口</p><p>微信支付通知的api在以下链接查看</p><p><a href="https://pay.weixin.qq.com/docs/merchant/apis/native-payment/payment-notice.html">支付通知</a></p><p>对应下单时的<strong>notify_url</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/notify&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,String&gt; <span class="title function_">payNotify</span><span class="params">(<span class="meta">@RequestBody</span> NotifyDto dto)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NotifyDto是支付成功后返回的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotifyDto</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知的创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String create_time;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String event_type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知的资源数据类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String resource_type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知资源数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ResourceDto resource;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调摘要</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现逻辑在Service中实现</p><p>JSAPIPayService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JSAPIPayService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,String&gt; <span class="title function_">payNotify</span><span class="params">(NotifyDto dto)</span> <span class="keyword">throws</span> GeneralSecurityException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSAPIPayServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSAPIPayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">NativePayService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">apiV3Key</span> <span class="operator">=</span> <span class="string">&quot;apiV3Key&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">payNotify</span><span class="params">(NotifyDto dto)</span> &#123;</span><br><span class="line">        Map&lt;String,String&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//解密微信传递过来的参数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesUtil</span>(apiV3Key.getBytes()).decryptToString(dto.getResource().getAssociated_data().getBytes(),</span><br><span class="line">                    dto.getResource().getNonce().getBytes(),</span><br><span class="line">                    dto.getResource().getCiphertext());</span><br><span class="line">            <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> JSON.parseObject(json, Map.class).get(<span class="string">&quot;out_trade_no&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;----------支付成功的订单号:&quot;</span> + outTradeNo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GeneralSecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            res.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">            res.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析上面的代码</p><ol><li><p>首先Map作为返回参数</p></li><li><p>解密微信传递过来的参数</p><p><a href="https://pay.weixin.qq.com/docs/merchant/development/interface-rules/certificate-callback-decryption.html">解密api</a></p><p>步骤一：验证签名<br>微信支付会对发送给商户的通知进行签名，并将签名值放在通知的HTTP头Wechatpay-Signature。商户应当验证签名，以确认请求来自微信，而不是其他的第三方。签名验证的算法请参考 <a href="https://pay.weixin.qq.com/docs/merchant/development/interface-rules/signature-verification.html">《微信支付API v3签名验证》</a>。<br>步骤二：参数解密<br>为了保证安全性，微信支付在回调通知，对关键信息进行了AES-256-GCM加密。商户应当按照以下的流程进行解密关键信息，解密的流程：</p><ol><li>用商户平台上设置的APIv3密钥【<a href="https://pay.weixin.qq.com/index.php/core/home/login?return_url=/">微信商户平台</a>—&gt;账户设置—&gt;API安全—&gt;设置APIv3密钥】，记为key；</li><li>获取resource.algorithm中描述的算法（目前为AEAD_AES_256_GCM），以及resource.nonce和resource.associated_data；</li><li>使用key、nonce和associated_data，对数据密文resource.ciphertext进行解密，得到JSON形式的资源对象。</li></ol></li><li><p>如此得到支付结果的信息，之后可以自己进行相关业务操作</p></li><li><p>如果失败，返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FAIL&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;失败&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>成功无需返回应答报文</p></li></ol><h5 id="步骤20：主动查询订单"><a href="#步骤20：主动查询订单" class="headerlink" title="步骤20：主动查询订单"></a>步骤20：主动查询订单</h5><p><a href="https://pay.weixin.qq.com/docs/merchant/apis/jsapi-payment/query-by-out-trade-no.html">查询订单api</a></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">QueryOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//请求URL</span></span><br><span class="line">   <span class="type">URIBuilder</span> <span class="variable">uriBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URIBuilder</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/v3/pay/transactions/id/4200000745202011093730578574&quot;</span>);</span><br><span class="line">   uriBuilder.setParameter(<span class="string">&quot;mchid&quot;</span>, mchId);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//完成签名并执行请求</span></span><br><span class="line">  <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(uriBuilder.build());</span><br><span class="line">  httpGet.addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">  <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">      <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;success,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;failed,resp code = &quot;</span> + statusCode+ <span class="string">&quot;,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      response.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="关闭订单-1"><a href="#关闭订单-1" class="headerlink" title="关闭订单"></a>关闭订单</h5><p>当商户订单支付失败需要生成新单号重新发起支付，要对原订单号调用关单，避免重复支付；系统下单后，用户支付超时，系统退出不再受理，避免用户继续，请调用关单接口。</p><blockquote><p>注意</p><ul><li>关单没有时间限制，建议在订单生成后间隔几分钟（最短5分钟）再调用关单接口，避免出现订单状态同步不及时导致关单失败。</li><li>已支付成功的订单不能关闭。</li></ul></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CloseOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//请求URL</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/v3/pay/transactions/out-trade-no/sdkphp12345678920201028112429/close&quot;</span>);</span><br><span class="line">    <span class="comment">//请求body参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">reqdata</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;mchid\&quot;: \&quot;&quot;</span>+mchId+<span class="string">&quot;\&quot;&#125;&quot;</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(reqdata,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    httpPost.setEntity(entity);</span><br><span class="line">    httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//完成签名并执行请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;failed,resp code = &quot;</span> + statusCode+ <span class="string">&quot;,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        response.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java，Java微信登录和支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="/2024/03/05/Spring%20Cloud/"/>
      <url>/2024/03/05/Spring%20Cloud/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务远程调用"><a href="#微服务远程调用" class="headerlink" title="微服务远程调用"></a>微服务远程调用</h1><h2 id="提供者和消费者"><a href="#提供者和消费者" class="headerlink" title="提供者和消费者"></a>提供者和消费者</h2><ul><li>服务提供者：一次业务中，被其他微服务调用的服务。（提供接口给其他微服务）</li><li>服务消费者：一次业务中，调用其他微服务的服务。（调用其他微服务提供的接口）</li><li>提供者与消费者是相对的</li><li>一个服务可以同时是服务提供者和服务消费者</li></ul><h1 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h1><h2 id="Eureka的作用"><a href="#Eureka的作用" class="headerlink" title="Eureka的作用"></a><strong>Eureka的作用</strong></h2><ol><li>注册服务信息</li><li>拉去服务 user-serice的信息</li><li>负载均衡</li><li>远程调用</li></ol><ul><li>消费者该如何获取服务提供者具体信息？<ul><li>服务提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>消费者根据服务名称向eureka拉去提供者信息</li></ul></li><li>如果有多个服务提供者，消费者该如何选择？<ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li></ul></li><li>消费者如何感知服务提供者健康状态？<ul><li>服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态</li><li>eureka会更新记录服务列表信息，心跳不正常会被剔除</li><li>消费者就可以拉取到最新的信息</li></ul></li></ul><h2 id="Eureka架构"><a href="#Eureka架构" class="headerlink" title="Eureka架构"></a><strong>Eureka架构</strong></h2><p>在Eureka架构中微服务角色有两类：</p><ul><li>EurekaServer：服务端，注册中心<ul><li>记录服务信息</li><li>心跳监控</li></ul></li><li>EurekaClient：客户端<ul><li>Provider：服务提供者，例如案例中的user-service<ul><li>注册自己的信息到EurekaServer</li><li>每隔30秒向EurekaServer发送心跳</li></ul></li><li>consumer：服务消费者，例如案例中的order-serice<ul><li>根据服务名称从EurekaServer拉去服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li></ul></li></ul></li></ul><h2 id="搭建EurekaServer"><a href="#搭建EurekaServer" class="headerlink" title="搭建EurekaServer"></a><strong>搭建EurekaServer</strong></h2><p>搭建EurekaServer服务步骤如下：</p><ol><li>创建项目，引入spring-cloud-starter-netflix-eureka-server的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写启动类，添加@EnableEurekaServer注解</li><li>添加application.yml文件，编写下面的配置：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">applicatiopn:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span></span><br><span class="line"><span class="attr">eureka:</span>  </span><br><span class="line">  <span class="attr">client:</span>  </span><br><span class="line">    <span class="attr">service-url:</span>  </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span>    </span><br></pre></td></tr></table></figure></li></ol><h2 id="注册user-service"><a href="#注册user-service" class="headerlink" title="注册user-service"></a><strong>注册user-service</strong></h2><p>将user-service服务注册都按EurekaServer步骤如下：</p><ol><li>在user-service项目引入spring-cloud-starter-netflix-eureka-client的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka客户端依赖--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在application.yml文件，编写下面的配置：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka/</span></span><br></pre></td></tr></table></figure></li></ol><p>另外，我们可以将user-service多次启动，模拟多实例部署，但为了避免端口冲突，需要修改端口设置：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051436867.png" alt="Pasted image 20231010114855"></p><h2 id="服务拉取"><a href="#服务拉取" class="headerlink" title="服务拉取"></a><strong>服务拉取</strong></h2><h3 id="在order-service完成服务拉取"><a href="#在order-service完成服务拉取" class="headerlink" title="在order-service完成服务拉取"></a><strong>在order-service完成服务拉取</strong></h3><p>服务拉取是基于服务名称获取服务列表，然后在对服务列表做负载均衡</p><ol><li>修改OrderService的代码，修改访问的url路径，用服务名代替ip、端口：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userservice/user/&quot;</span> + order.getUserId();</span><br></pre></td></tr></table></figure></li><li>在order-service项目的启动类OrderApplication中的RestTemplate添加<strong>负载均衡</strong>注解：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">//负载均衡注解</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><h3 id="负载均衡流程"><a href="#负载均衡流程" class="headerlink" title="负载均衡流程"></a><strong>负载均衡流程</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051436799.png" alt="[Pasted image 20231010151331.png]"></p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a><strong>负载均衡策略</strong></h3><p>Ribbon的负载均衡规则是一个叫做IRule的接口来定义的，每一个子接口都是一个规则：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051437235.png" alt="[Pasted image 20231010162016.png]"></p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051437608.png" alt="[Pasted image 20231010162039.png]"></p><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个 新的IRule：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#负载均衡规则</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a><strong>饥饿加载</strong></h3><p>Ribbon默认是采用懒加载，及第一次访问时才会创建LoadBalanceClient，请求时间会很长。<br>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span> <span class="comment">#指定对userservice这个服务器饥饿加载 </span></span><br></pre></td></tr></table></figure><h1 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h1><h2 id="服务注册到Nacos"><a href="#服务注册到Nacos" class="headerlink" title="服务注册到Nacos"></a><strong>服务注册到Nacos</strong></h2><ol><li>在cloud-demo父工程中添加spring-cloud-alibaba的管理依赖:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5。RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>注释掉order-service和user-service中原有的eureka依赖。</li><li>添加nacos的客户端依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos客户端依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改user-service&amp;order-service中的application.yml文件，注释eureka地址，添加nacos地址：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> </span><br></pre></td></tr></table></figure></li></ol><h2 id="服务集群属性"><a href="#服务集群属性" class="headerlink" title="服务集群属性"></a><strong>服务集群属性</strong></h2><ol><li>修改application.yml，添加如下内容：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> </span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 配置集群名称，也就是机房位置，例如：HZ，杭州</span></span><br></pre></td></tr></table></figure></li><li>在Nacos控制台可以看到集群变化：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051437463.png" alt="[Pasted image 20231011153258.png]"></li></ol><h2 id="根据集群负载均衡"><a href="#根据集群负载均衡" class="headerlink" title="根据集群负载均衡"></a><strong>根据集群负载均衡</strong></h2><ol><li>修改order-service中的application.yml，设置集群为HZ：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> </span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 配置集群名称，也就是机房位置</span></span><br></pre></td></tr></table></figure></li><li>然后在order-service中设置负载均衡的Rule为NacosRule，这个规则优先会寻找与自己同集群的服务：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment">#负载均衡规则</span></span><br></pre></td></tr></table></figure></li><li>注意将user-service的权重都设置为1</li></ol><h2 id="根据权重负载均衡"><a href="#根据权重负载均衡" class="headerlink" title="根据权重负载均衡"></a><strong>根据权重负载均衡</strong></h2><p>实际部署中会出现这样的场景：</p><ul><li>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求<br>Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高</li></ul><ol><li>在Nacos控制台可以设置实例的权重值，首先选中实例后面的编辑按钮<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051437761.png" alt="[Pasted image 20231011164637.png]"></li><li>将权重设置为0.1，测试可以发现8081被访问到的频率大大降低<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051438566.png" alt="[Pasted image 20231011164858.png]"></li><li>权重设置为0则完全不会被访问</li></ol><h2 id="环境隔离-namespace"><a href="#环境隔离-namespace" class="headerlink" title="环境隔离-namespace"></a><strong>环境隔离-namespace</strong></h2><p>Nacos中服务存储和数据存储的最外层都是一个名为namespace的东西，用来做最外层隔离<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051439867.png" alt="[Pasted image 20231012085904.png]"></p><ol><li>在Nacos控制台可以创建namespace，用来隔离不同环境<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051439516.png" alt="[Pasted image 20231012110758.png]"></li><li>然后填写一个新的命名空间信息：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051439884.png" alt="[Pasted image 20231012110848.png]"></li><li>保存后会在控制台看到这个命名空间的id：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051439317.png" alt="[Pasted image 20231012111026.png]"></li><li>修改order-service的application.yml，添加namespace：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">datasource:</span>  </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloud_user?useSSL=false&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span>  </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span>  </span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span>  </span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>  </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">nacos:</span>  </span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos服务地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">SH</span> <span class="comment">#上海</span></span><br><span class="line">        <span class="comment"># 命名空间添ID </span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">78523f49-6663-4d0d-b5a4-9d4cada9023e</span></span><br></pre></td></tr></table></figure></li><li>重启order-service后，再来查看控制台：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051439310.png" alt="[Pasted image 20231012162256.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051440762.png" alt="[Pasted image 20231012162306.png]"></li><li>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051440637.png" alt="[Pasted image 20231012162532.png]"></li></ol><h2 id="nacos注册中心细节分析"><a href="#nacos注册中心细节分析" class="headerlink" title="nacos注册中心细节分析"></a><strong>nacos注册中心细节分析</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051440039.png" alt="[Pasted image 20231015203656.png]"></p><h2 id="临时实例和非临时实例"><a href="#临时实例和非临时实例" class="headerlink" title="临时实例和非临时实例"></a><strong>临时实例和非临时实例</strong></h2><p>服务注册到Nacos时，可以选择注册为临时或非临时实例，通过以下的配置来设置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">nacos:</span>  </span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  </span><br><span class="line">      <span class="attr">discovery:</span>  </span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 是否为临时实例 true 是临时实例 false 是非临时实例 默认true</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ol><li>Nacos与eureka的共同点<ol><li>都支持服务注册饥和服务拉取</li><li>都支持服务提供者心跳方式组偶健康检测</li></ol></li><li>Nacos与Eureka的区别<ol><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被踢出</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式：Eureka采用AP方式</li></ol></li></ol><h1 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h1><h2 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h2><ol><li><p>在Nacos中添加配置信息：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051440933.png" alt="[Pasted image 20231015210554.png]"></p></li><li><p>在弹出表单中填写配置信息：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051441746.png" alt="[Pasted image 20231015211126.png]"></p></li></ol><p>配置获取的步骤如下：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051441465.png" alt="[Pasted image 20231015211414.png]"></p><ol><li>引入Nacos的配置管理客户端依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos配置管理依赖 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在userservice中的resource目录添加一个bootstrap.yml文件，这个文件时引导文件，优先级高于application.yml：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span>  </span><br><span class="line">  <span class="attr">profiles:</span>  </span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 开发环境，这里是dev  </span></span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">nacos:</span>  </span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址  </span></span><br><span class="line">      <span class="attr">config:</span>  </span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure>我们在user-service中将pattern.dateformat这个属性注入到UserController中做测试：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> UserService userService;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入nacos中的配置属性</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String dateformat;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;now&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置自动刷新"><a href="#配置自动刷新" class="headerlink" title="配置自动刷新"></a>配置自动刷新<br></h2><p>Nacos中的配置文件变更后，微服务无需重启就可以感知。不过需要通过下面两种配置实现：</p><ul><li>方式一：在@Value注入的变量所在类上添加注解@RefreshScope<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span>  </span><br><span class="line"><span class="meta">@RefreshScope</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br></pre></td></tr></table></figure></li><li>方式二：使用@ConfigurationProperties注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String dateformat;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享<br></h2><p>微服务启动时会从nacos读取多个配置文件：</p><ul><li>[spring.application.name]-[spring.profiles.active].yaml，例如：userseevice-dev.yaml</li><li>[spring.application.name].yaml，例如：userservice.yaml<br>无论profile如何变化，[spring.application.name].yaml这个文件一定会加载，因此多环境共享配置可以写入这个文件<br>![[Pasted image 20231016100557.png]]</li></ul><p>多种配置的优先级：</p><ul><li>服务名-profile.yaml &gt; 服务名称.yaml &gt; 本地配置</li></ul><h2 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建<br></h2><p>集群搭建步骤：</p><ol><li>搭建MySQL集群并初始化数据库表</li><li>下载解压nacos</li><li>修改集群配置(节点信息)、数据库配置</li><li>分别启动多个nacos节点</li><li>nginx反向代理</li></ol><h1 id="http客户端Feign"><a href="#http客户端Feign" class="headerlink" title="http客户端Feign"></a>http客户端Feign<br></h1><h2 id="Feign替换RestTemplate"><a href="#Feign替换RestTemplate" class="headerlink" title="Feign替换RestTemplate"></a>Feign替换RestTemplate</h2><h3 id="RestTemplate方式调用存在的问题"><a href="#RestTemplate方式调用存在的问题" class="headerlink" title="RestTemplate方式调用存在的问题"></a><strong>RestTemplate方式调用存在的问题</strong></h3><p>先来看看我们以前利用RestTemplate发起远程调用的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userservice/user/&quot;</span> + order.getUserId();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br></pre></td></tr></table></figure><p>存在下面的问题：</p><ul><li>代码可读性差，编程体验不统一</li><li>参数复杂URL难以维护</li></ul><h3 id="Feign的介绍"><a href="#Feign的介绍" class="headerlink" title="Feign的介绍"></a><strong>Feign的介绍</strong></h3><p>Feign是一个声明式的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a><br>其作用就是帮助我们优雅的实现http请求的发送，解决上面的问题。</p><h2 id="定义和使用Feign客户端"><a href="#定义和使用Feign客户端" class="headerlink" title="定义和使用Feign客户端"></a><strong>定义和使用Feign客户端</strong></h2><p>使用Feign的步骤如下：</p><ol><li>引入依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在order-service的启动类添加注解开启Feign的功能：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启Feign</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span>  </span><br><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写Feign客户端：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">user <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>主要是基于SPringMVC的注解来声明远程调用的信息，比如：</li></ol><ul><li>服务名称：userservice</li><li>请求方式：GET</li><li>请求路径：&#x2F;user&#x2F;{id}</li><li>请求参数：Long id</li><li>返回值类型：User</li></ul><ol start="4"><li>用Feign客户端代替RestTemplate<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>  </span><br><span class="line"><span class="keyword">private</span> UserClient userClient;  </span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;  </span><br><span class="line">    <span class="comment">// 1.查询订单  </span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);  </span><br><span class="line">    <span class="comment">//2.用Feign远程调用  </span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.findById(order.getUserId());  </span><br><span class="line">    <span class="comment">//3.封装user到order</span></span><br><span class="line">    order.setUser(user);  </span><br><span class="line">    <span class="comment">// 4.返回  </span></span><br><span class="line">    <span class="keyword">return</span> order;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="自定义Feign的配置"><a href="#自定义Feign的配置" class="headerlink" title="自定义Feign的配置"></a>自定义Feign的配置<br></h2><p>Fegin运行自定义配置来覆盖默认配置，可以修改的配置如下：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051441520.png" alt="[Pasted image 20231016110655.png]"><br>一般我们需要配置的就是日志级别。</p><p>配置Feign日志有两种方式：</p><p>方式一：配置文件方式</p><ol><li>全局生效：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment">#这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#日志级别</span></span><br></pre></td></tr></table></figure></li><li>局部生效：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment">#这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#日志级别</span></span><br></pre></td></tr></table></figure>配置Feign日志的方式二：java代码方式，需要先声明一个Bean：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignClientConfiguration</span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Logger.Level.feignLogLevel()&#123;</span><br><span class="line"><span class="keyword">return</span> Logger.Level.BASIC;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>而后如果是全局配置，则把它放到@EnableFeignClients这个注解中：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = FeignClientConfiguration.class)</span></span><br></pre></td></tr></table></figure></li><li>如果是局部配置，则把它放到@FeignClient这个注解中：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;,configuration = FeignClientConfiguration.class)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Feign的性能优化"><a href="#Feign的性能优化" class="headerlink" title="Feign的性能优化"></a>Feign的性能优化<br></h2><p>Feign底层的客户端实现：</p><ul><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient：支持连接池</li><li>OKHttp：支持连接池<br>因此优化Feign的性能主要包括：</li></ul><ol><li>使用连接池代替默认的URLConnection</li><li>日志级别，最好用basic或none</li></ol><h3 id="Feign的性能优化-连接池配置"><a href="#Feign的性能优化-连接池配置" class="headerlink" title="Feign的性能优化-连接池配置"></a><strong>Feign的性能优化-连接池配置</strong><br></h3><p>Fegin添加HttpClient的支持：<br>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置连接池:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment">#default全局配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment">#日志级别，BASIC就是基本的请求和相应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="string">ture</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment">#最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure><h2 id="Fegin的最佳实践"><a href="#Fegin的最佳实践" class="headerlink" title="Fegin的最佳实践"></a>Fegin的最佳实践<br></h2><p>方式一（继承）：给消费者的FeignClient和提供者的controller定义统一的父接口作为标准<br>缺点：</p><ul><li>服务紧耦合</li><li>父接口参数列表中的映射不会被继承<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserAPI</span>&#123;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> <span class="keyword">extends</span> <span class="title class_">UserAPI</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">implements</span> <span class="title class_">USerAPI</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>方式二（抽取）：将FeignClient抽取为独立模块，并把接口有关的POJO，默认的Feign配置都放到这个模块中，提供给所有消费者使用<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051441841.png" alt="[Pasted image 20231016143704.png]"></li></ul><h2 id="抽取FeignClient"><a href="#抽取FeignClient" class="headerlink" title="抽取FeignClient"></a>抽取FeignClient<br></h2><p>实现最佳实践方式二的步骤如下：</p><ol><li>首先创建一个module，命名为feign-api，然后引入feign的starter依赖</li><li>将order-service中编写的UserClient、User、DefaultFeignCOnfiguration都复制到feign-api项目中</li><li>在order-service中引入feign-api的依赖</li><li>修改order-service中的所有与上述三个组件有关的import部分，改成导入feign-api中的包</li><li>重启测试<br>当定义的FeignClient不在SpringBootApplication的扫描包范围时，这些FeignClient无法使用。有两种方式解决：<br>方式一：指定FeignClient所在包<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcase.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure>方式二：指定FeignClient字节码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clicents = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="统一网关Gateway"><a href="#统一网关Gateway" class="headerlink" title="统一网关Gateway"></a>统一网关Gateway<br></h1><h2 id="为什么需要网关"><a href="#为什么需要网关" class="headerlink" title="为什么需要网关"></a>为什么需要网关<br></h2><p>网关功能：</p><ul><li>身份认证和权限校验</li><li>服务路由、负载均衡</li><li>请求限流</li></ul><h2 id="网关的技术实现"><a href="#网关的技术实现" class="headerlink" title="网关的技术实现"></a>网关的技术实现<br></h2><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul<br>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</li></ul><h2 id="搭建网关服务"><a href="#搭建网关服务" class="headerlink" title="搭建网关服务"></a>搭建网关服务<br></h2><p>搭建网关服务的步骤：</p><ol><li>创建新的module，引入SpringCloudGateway的依赖和nacos的服务发现依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nacos服务发现依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写路由配置及nacos地址<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">  <span class="comment"># uri http://127.0.0.1:8081 #路由的目标地址 http就是固定地址</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">  <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="路由断言工厂Route-Predicate-Factoy"><a href="#路由断言工厂Route-Predicate-Factoy" class="headerlink" title="路由断言工厂Route Predicate Factoy"></a>路由断言工厂Route Predicate Factoy<br></h2><p>网关路由可以配置的内容包括：</p><ul><li><p>路由id：路由唯一标识</p></li><li><p>uri：路由目的地。支持lb和http两种</p></li><li><p>predicates：路由断言，判断请求是否符合要求，符合则转发到路由目的地</p></li><li><p>filters：路由过滤器，处理请求或响应</p></li><li><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p></li><li><p>例如Path&#x3D;&#x2F;user&#x2F;** 是按照路径匹配，这个规则是由org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory类来处理的</p></li><li><p>像这样的断言工厂在SpringCloudGateway还有十几个</p></li></ul><p>Spring提供了11种基本的Predicate工厂：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051442016.png" alt="[Pasted image 20231016164528.png]"></p><h2 id="路由过滤器-GatewayFilter"><a href="#路由过滤器-GatewayFilter" class="headerlink" title="路由过滤器 GatewayFilter"></a>路由过滤器 GatewayFilter<br></h2><p>GatewayFilter是网关中提供的一种过滤器，可以对进行网关的请求和微服务返回的响应做处理：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051442031.png" alt="[Pasted image 20231016173504.png]"></p><h2 id="过滤器工厂-GatewayFilterFactory"><a href="#过滤器工厂-GatewayFilterFactory" class="headerlink" title="过滤器工厂 GatewayFilterFactory"></a>过滤器工厂 GatewayFilterFactory<br></h2><p>Spring提供了31种不同的路由过滤器工厂，例如：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051442696.png" alt="[Pasted image 20231016173759.png]"></p><h2 id="案例：给所有进入userservice的请求添加一个请求头"><a href="#案例：给所有进入userservice的请求添加一个请求头" class="headerlink" title="案例：给所有进入userservice的请求添加一个请求头"></a>案例：给所有进入userservice的请求添加一个请求头<br></h2><p>给所有进入userservice的请求添加一个请求头：Truth&#x3D;itcast is freaking awesome!<br>实现方式：在gateway中修改application.yml文件，给userservice的路由添加过滤器：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring：</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb//userservice</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth=itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> <span class="comment">#添加请求头</span></span><br></pre></td></tr></table></figure><h3 id="默认过滤器"><a href="#默认过滤器" class="headerlink" title="默认过滤器"></a><strong>默认过滤器</strong><br></h3><p>如果要对所有的路由都生效，则可以将过滤工厂写到Default下。格式如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span>  </span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span>  </span><br><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">nacos:</span>  </span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos地址  </span></span><br><span class="line">    <span class="attr">gateway:</span>  </span><br><span class="line">      <span class="attr">routes:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由标识，必须唯一  </span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址  </span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断请求是否符合规则  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 路径断言，判断路径是否以/user开头，如果是则符合  </span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span>  </span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orderservice</span>  </span><br><span class="line">          <span class="attr">predicates:</span>  </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">  <span class="attr">default-filters:</span> <span class="comment"># 默认过滤器，会对所有的路由请求都生效</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="全局过滤器-GlobalFilter"><a href="#全局过滤器-GlobalFilter" class="headerlink" title="全局过滤器 GlobalFilter"></a>全局过滤器 GlobalFilter<br></h2><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。<br>区别在于GatewayFilter通过配置定义，处理逻辑是固定的。而GlobalFilter的逻辑需要自己写代码实现。<br>定义方式是实现GlobalFilter接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span>&#123;</span><br><span class="line">Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤一：自定义过滤器<br>自定义类，实现GlobalFilter接口，添加@Order注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(-1)</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  </span><br><span class="line">        <span class="comment">//1.获取请求参数  </span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();  </span><br><span class="line">        MultiValueMap&lt;String, String&gt; queryParams = request.getQueryParams();  </span><br><span class="line">        <span class="comment">//2.获取参数中的authorization 参数  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> queryParams.getFirst(<span class="string">&quot;authorization&quot;</span>);  </span><br><span class="line">        <span class="comment">//3.判断参数值是否等于admin  </span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(auth))&#123;  </span><br><span class="line">            <span class="comment">//4.是，放行  </span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//5.否，拦截  </span></span><br><span class="line">        <span class="comment">//5.1.设置状态码  </span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);  </span><br><span class="line">        <span class="comment">//5.2.拦截请求  </span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序<br></h2><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter<br>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器</p><ul><li>每一个过滤器都必须指定一个int类型的order值，order值越小，优先级越高，执行顺序越靠前</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增</li><li>当过滤器的order值一样时，会按照defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行<br>可以参考下面几个类的源码来查看：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051442403.png" alt="[Pasted image 20231016205931.png]"></li></ul><h2 id="跨域问题处理"><a href="#跨域问题处理" class="headerlink" title="跨域问题处理"></a>跨域问题处理<br></h2><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li>域名不同：<a href="http://www.taobao.com和www.taobao.org和www.jd.com和miaosha.jd.com/">www.taobao.com和www.taobao.org和www.jd.com和miaosha.jd.com</a></li><li>域名相同，端口不同：loaclhost:8080和loaclhost8081<br>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题<br>解决方案：CORS</li></ul><p>网关处理跨域采用的同样是CORS方案，并且只需要简单配置即可实现：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>   </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">nacos:</span>  </span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos地址  </span></span><br><span class="line">    <span class="attr">gateway:</span>  </span><br><span class="line">      <span class="attr">globalcors:</span>  </span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment">#解决options请求被拦截问题  </span></span><br><span class="line">        <span class="attr">corsConfigurations:</span>  </span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span>  </span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment">#允许那些网站的跨域请求  </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span>  </span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://www.leyou.com&quot;</span>  </span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment">#允许的跨域ajax的请求方式  </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span>  </span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span>  </span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span>  </span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span>  </span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span>  </span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息 </span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment">#是否允许携带cookie  </span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment">#这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><h1 id="初始Docker"><a href="#初始Docker" class="headerlink" title="初始Docker"></a>初始Docker<br></h1><h2 id="项目部署的问题"><a href="#项目部署的问题" class="headerlink" title="项目部署的问题"></a>项目部署的问题<br></h2><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境有差异<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051442831.png" alt="[Pasted image 20231017074555.png]"></li></ul><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker<br></h2><p>Docker如何解决依赖的兼容问题的？</p><ul><li>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</li><li>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰<br>不同环境的操作系统不同，Docker如何解决？我们先来了解下操作系统架构<br>![[Pasted image 20231017075912.png]]<br>内核与硬件交互，提供操作硬件的指令<br>系统应用封装内核指令为函数，便于程序员调用<br>用户程序基于系统函数库实现功能<br>Ubuntu和CentOS都是基于Linux内核，只是系统应用不同，提供的函数库有差异</li></ul><p>Docker如何解决不同系统环境的问题？</p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的库函数，借助于操作系统的Linux内核来运行<br>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</li><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong><br>Docker如何解决开发、测试、生存环境有差异的问题</li><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以再任意Linux操作系统上运行<br>Docker是一个快速交付应用、运行应用的技术：</li></ul><ol><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ol><h2 id="Docker与虚拟机"><a href="#Docker与虚拟机" class="headerlink" title="Docker与虚拟机"></a>Docker与虚拟机<br></h2><p>虚拟机(virtual machine)是在操作系统重模拟硬件设备，然后运行另一个操作系统，比如在Windows系统里面运行Ubuntu系统，这样就可以运行任意的Ubuntu应用了<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051442453.png" alt="[Pasted image 20231017081809.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051442349.png" alt="[Pasted image 20231017081828.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051443075.png" alt="[Pasted image 20231017081857.png]"><br>Docker和虚拟机的差异：</p><ul><li>docker是一个系统进程；虚拟机是在操作系统重的操作系统</li><li>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li></ul><h2 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器<br></h2><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像<br><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器做隔离，对外不可见</p><h2 id="Docker和DockerHub"><a href="#Docker和DockerHub" class="headerlink" title="Docker和DockerHub"></a>Docker和DockerHub<br></h2><ul><li>DockerHub：DockerHub是一个Docker镜像的托管平台。这样的平台称为Docker Registry</li><li>国内也有类似于DockerHub的公开服务，比如网易云镜像服务、阿里云镜像库等</li></ul><h2 id="docker架构"><a href="#docker架构" class="headerlink" title="docker架构"></a>docker架构<br></h2><p>Docker是一个CS架构的程序，有两部分组成：</p><ul><li>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以再本地或远程向服务端发送指令<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051444876.png" alt="[Pasted image 20231017083507.png]"></li></ul><h1 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作<br></h1><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令<br></h2><ul><li>镜像名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051443465.png" alt="[Pasted image 20231017100702.png]"></li></ul><h2 id="镜像操作命令"><a href="#镜像操作命令" class="headerlink" title="镜像操作命令"></a>镜像操作命令<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051443617.png" alt="[Pasted image 20231017100959.png]"></p><h3 id="案例：从DockerHub中拉取一个nginx镜像并查看"><a href="#案例：从DockerHub中拉取一个nginx镜像并查看" class="headerlink" title="案例：从DockerHub中拉取一个nginx镜像并查看"></a><strong>案例：从DockerHub中拉取一个nginx镜像并查看</strong><br></h3><ol><li>首先去镜像仓库搜索nginx镜像，比如DockerHub：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051444146.png" alt="[Pasted image 20231017101811.png]"></li><li>根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051444344.png" alt="[Pasted image 20231017101922.png]"></li><li>通过命令：docker images 查看拉取到的镜像<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051444582.png" alt="[Pasted image 20231017102010.png]"></li></ol><h3 id="案例：利用docker-save将nginx镜像导出磁盘，然后在通过load加载回来"><a href="#案例：利用docker-save将nginx镜像导出磁盘，然后在通过load加载回来" class="headerlink" title="案例：利用docker save将nginx镜像导出磁盘，然后在通过load加载回来"></a><strong>案例：利用docker save将nginx镜像导出磁盘，然后在通过load加载回来</strong><br></h3><p>步骤一：利用docker xx –help命令查看docker save和docker load的语法</p><p>步骤二：使用docker tag 创建新镜像mynginx1.0</p><p>步骤三：使用docker save导出镜像到磁盘</p><h3 id="镜像操作有哪些？"><a href="#镜像操作有哪些？" class="headerlink" title="镜像操作有哪些？"></a><strong>镜像操作有哪些？</strong><br></h3><ul><li>docker images 查看镜像</li><li>docker rmi 删除</li><li>docker pull 拉取</li><li>docker push 推送</li><li>docker save 保存</li><li>docker load 加载</li></ul><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051445073.png" alt="[Pasted image 20231017105030.png]"></p><h3 id="案例：创建运行一个nginx容器"><a href="#案例：创建运行一个nginx容器" class="headerlink" title="案例：创建运行一个nginx容器"></a><strong>案例：创建运行一个nginx容器</strong><br></h3><p>步骤一：去docker hub查看Nginx的容器运行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name containerName -p 80:80 -d nginx</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li>docker run：创建并运行一个容器</li><li>--name：给容器起一个名字，比如叫做mn</li><li>-p：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx<br>查看容器日志的命令：</li><li>docker logs</li><li>添加 -f 参数可以持续查看日志<br>查看容器状态：</li><li>docker ps</li></ul><h3 id="案例：进入Nginx容器，修改HTML文件内容，添加“Hello”"><a href="#案例：进入Nginx容器，修改HTML文件内容，添加“Hello”" class="headerlink" title="案例：进入Nginx容器，修改HTML文件内容，添加“Hello”"></a><strong>案例：进入Nginx容器，修改HTML文件内容，添加“Hello”</strong><br></h3><p>步骤一：进入容器。进入我们刚刚创建的nginx容器的命令为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mn bash</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li>docker exec：进入容器内部，执行一个命令</li><li>-it：给当前进入的容器创建一个标椎输入、输出终端，允许我们与容器交互</li><li>mn：要进入的容器的名称</li><li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷<br></h2><p>容器与数据耦合的问题<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051447377.png" alt="[Pasted image 20231017113857.png]"></p><p><strong>数据卷（volume）</strong>：是一个虚拟目录，指向宿主机文件系统的某个目录<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051447246.png" alt="[Pasted image 20231017114419.png]"></p><h2 id="操作数据卷"><a href="#操作数据卷" class="headerlink" title="操作数据卷"></a>操作数据卷<br></h2><p>数据卷操作的基本语法如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume[COMMAND]</span><br></pre></td></tr></table></figure><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create  创建一个volume</li><li>inspect  显示一个或多个volume的信息</li><li>ls  列出所有的volume</li><li>prune  删除未使用的volume</li><li>rm  删除一个或多个指定的volume</li></ul><h3 id="创建一个数据卷，并查看数据卷在宿主机的目录位置"><a href="#创建一个数据卷，并查看数据卷在宿主机的目录位置" class="headerlink" title="创建一个数据卷，并查看数据卷在宿主机的目录位置"></a><strong>创建一个数据卷，并查看数据卷在宿主机的目录位置</strong><br></h3><ol><li>创建数据卷<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></table></figure></li><li>查看所有数据<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure></li><li>查看数据卷详细信息卷<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure></li></ol><h2 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷<br></h2><p>我们在创建容器时，可以通过-v参数来挂载一个数据卷到某个容器目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run: 就是创建并运行容器</span><br><span class="line">-- name mn: 给容器起个名字叫mn</span><br><span class="line">-v html:/root/html: 把html数据卷挂载到容器内的/root/html这个目录中</span><br><span class="line">-p 8080:80: 把宿主机的8080端口映射到容器内的80端口</span><br><span class="line">nginx: 镜像名称</span><br></pre></td></tr></table></figure><h3 id="创建一个nginx容器，修改容器内的html目录内的index-html内容"><a href="#创建一个nginx容器，修改容器内的html目录内的index-html内容" class="headerlink" title="创建一个nginx容器，修改容器内的html目录内的index.html内容"></a><strong>创建一个nginx容器，修改容器内的html目录内的index.html内容</strong><br></h3><p>需求说明：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置&#x2F;user&#x2F;share&#x2F;nginx&#x2F;html，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。<br>提示：运行容器时使用-v参数挂载数据卷<br>步骤：</p><ol><li>创建容器并挂载数据卷到容器内的HTML目录<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure></li><li>进入html数据卷所在位置，并修改HTML内容<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入该目录</span></span><br><span class="line">cd /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建并运行一个MySQL容器，将宿主机目录直接挂载到容器"><a href="#创建并运行一个MySQL容器，将宿主机目录直接挂载到容器" class="headerlink" title="创建并运行一个MySQL容器，将宿主机目录直接挂载到容器"></a><strong>创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</strong><br></h3><p>提示：目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v[宿主机目录]:[容器内目录]</li><li>-v[宿主机文件]:[容器内文件]<br>实现思路如下：</li></ul><ol><li>在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</li><li>创建目录&#x2F;tmp&#x2F;myql&#x2F;data</li><li>创建目录&#x2F;tmp&#x2F;myql&#x2F;conf，将课前资料提供的hmy.cnf文件上传到&#x2F;tpm&#x2F;myql&#x2F;conf</li><li>去DockerHub查阅资料，创建并运行MySQL容器，要求：<ol><li>挂载&#x2F;tmp&#x2F;myql&#x2F;data到mysql容器内数据存储目录</li><li>挂载&#x2F;tmp&#x2F;myql&#x2F;conf&#x2F;hmy.cnf到msql容器的配置文件</li><li>设置MySQL密码</li></ol></li></ol><h3 id="数据卷挂载的方式对比"><a href="#数据卷挂载的方式对比" class="headerlink" title="数据卷挂载的方式对比"></a><strong>数据卷挂载的方式对比</strong><br></h3><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051448783.png" alt="[Pasted image 20231017160552.png]"></p><h1 id="Dcokerfile自定义镜像"><a href="#Dcokerfile自定义镜像" class="headerlink" title="Dcokerfile自定义镜像"></a>Dcokerfile自定义镜像<br></h1><h2 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构<br></h2><ul><li>镜像是指将应用程序及其需要的系统函数库、环境、配置、依赖打包而成</li><li>入口（Entrypoint）<ul><li>镜像运行入口，一般是程序启动的脚本和参数</li></ul></li><li>层（Layer）<ul><li>在BaseImage基础上添加安装包、依赖、配置等，每次操作都形成新的一层</li></ul></li><li>基础镜像（BaseImage）<ul><li>应用依赖的系统函数库、环境、配置、文件等</li></ul></li></ul><h2 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile"></a>什么是Dockerfile<br></h2><p>Docekrfile就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>,用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051448521.png" alt="[Pasted image 20231017162228.png]"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例<br></h3><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051448955.png" alt="[Pasted image 20231017163840.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051448590.png" alt="[Pasted image 20231017163859.png]"></p><h1 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose<br></h1><h2 id="什么是DockerCompose"><a href="#什么是DockerCompose" class="headerlink" title="什么是DockerCompose"></a>什么是DockerCompose<br></h2><ul><li>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</li><li>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/mysql/data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">8090:</span> <span class="number">8090</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库<br></h1><h2 id="常见镜像仓库服务"><a href="#常见镜像仓库服务" class="headerlink" title="常见镜像仓库服务"></a>常见镜像仓库服务<br></h2><p>镜像仓库（Docker Registry）有公共的和私有的两种形式：</p><ul><li>公共仓库：例如Docker官方的<a href="hub.docker.com">Docker Hub</a>，国内也有一些云服务商提供类似于Docker Hub的公开服务，比如网易云镜像服务、DaoCloud镜像服务、阿里云镜像服务等</li><li>除了使用公开仓库外，用户还可以再本地搭建私有Docker Registry。企业自己的镜像最好是采用私有Docker Registry来实现</li></ul><h2 id="在私有镜像仓库推送或拉取镜像"><a href="#在私有镜像仓库推送或拉取镜像" class="headerlink" title="在私有镜像仓库推送或拉取镜像"></a>在私有镜像仓库推送或拉取镜像<br></h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><ol><li>重新tag本地镜像，名称前缀为私有仓库的地址：192.168.140.130:8080&#x2F;<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.140.130:8080/nginx:1.0</span><br></pre></td></tr></table></figure></li><li>推送镜像<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.140.130:8080/nginx:1.0</span><br></pre></td></tr></table></figure></li><li>拉取镜像<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.140.130:8080/nginx:1.0</span><br></pre></td></tr></table></figure></li></ol><h1 id="初识MQ"><a href="#初识MQ" class="headerlink" title="初识MQ"></a>初识MQ<br></h1><h2 id="同步通讯和异步通讯"><a href="#同步通讯和异步通讯" class="headerlink" title="同步通讯和异步通讯"></a>同步通讯和异步通讯<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051448948.png" alt="[Pasted image 20231018092107.png]"></p><h2 id="同步调用的问题"><a href="#同步调用的问题" class="headerlink" title="同步调用的问题"></a>同步调用的问题<br></h2><p>微服务间基于Feign的调用就属于同步方式，存在一些问题<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051449927.png" alt="[Pasted image 20231018092747.png]"></p><ol><li>耦合度高<ul><li>每次加入新的需求，都要修改原来的代码</li></ul></li><li>性能下降<ul><li>调用者需要等待服务提供者响应，如果调用链过长则响应时间等于每次调用的时间之和</li></ul></li><li>资源浪费<ul><li>调用链中的每个服务在等待响应过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源</li></ul></li><li>级联失败<ul><li>如果服务提供者出现问题，所有调用方都会跟着出问题，如同多米诺骨牌一样，迅速导致整个微服务群故障<br> 同步调用的优点：</li></ul></li></ol><ul><li>时效性较强，可以立即得到结果<br>同步调用的问题：</li><li>耦合度高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败问题</li></ul><h2 id="异步调用方案"><a href="#异步调用方案" class="headerlink" title="异步调用方案"></a>异步调用方案<br></h2><p>异步调用常见实现就是事件驱动模式<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051450859.png" alt="[Pasted image 20231018094900.png]"></p><h2 id="事件驱动优势"><a href="#事件驱动优势" class="headerlink" title="事件驱动优势"></a>事件驱动优势<br></h2><p>优势一：服务解耦<br>优势二：性能提升，吞吐量提高<br>优势三：服务没有强依赖，不担心级联失败问题<br>优势四：流量削峰</p><h2 id="异步通信的缺点"><a href="#异步通信的缺点" class="headerlink" title="异步通信的缺点"></a>异步通信的缺点<br></h2><p>缺点一：依赖于Broker的可靠性、安全性、吞吐能力<br>缺点二：架构复杂了，业务没有明显的流程线，不好追踪管理</p><h2 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ<br></h2><p>MQ（MessageQueue），中文是消息队列，字面来看就是存放消息的队列。也就是事件驱动架构中的Broker<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051450945.png" alt="[Pasted image 20231018100927.png]"></p><h1 id="RabbitMQ快速入门"><a href="#RabbitMQ快速入门" class="headerlink" title="RabbitMQ快速入门"></a>RabbitMQ快速入门<br></h1><h2 id="RabbitMQ概述"><a href="#RabbitMQ概述" class="headerlink" title="RabbitMQ概述"></a>RabbitMQ概述<br></h2><p>RabbitMQ是基于Erlang语言开发的开源消息通信中间件，官网地址：(<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a>)</p><p>RabbitMQ的结构和概念<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051451181.png" alt="[Pasted image 20231018105546.png]"><br>概念：</p><ul><li>channel：操作MQ的工具</li><li>exchange：路由消息到队列中</li><li>queue：缓存消息</li><li>virtual host：虚拟主机，是对queue、exchange等资源的逻辑分组</li></ul><h2 id="常见消息模型"><a href="#常见消息模型" class="headerlink" title="常见消息模型"></a>常见消息模型<br></h2><p>MQ的官方文档中给出了5个MQ的Demo示例，对应了几种不同的用法：</p><ul><li>基本消息队列（BasicQueue）</li><li><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051451961.png" alt="[Pasted image 20231018110645.png]"></li><li>工作消息队列（WorkQueue）</li><li><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051451451.png" alt="[Pasted image 20231018110658.png]"></li><li>发布订阅（Publish、Subscribe），有根据交换机类型不同分为三种：<ul><li>Fanout Exchange：广播</li><li><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051451309.png" alt="[Pasted image 20231018110714.png]"></li><li>Direct Exchange：路由</li><li><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051452496.png" alt="[Pasted image 20231018110726.png]"></li><li>Topic Exchange：主题</li><li><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051452591.png" alt="[Pasted image 20231018110734.png]"></li></ul></li></ul><h2 id="HelloWorld案例"><a href="#HelloWorld案例" class="headerlink" title="HelloWorld案例"></a>HelloWorld案例<br></h2><p>官方的HellowWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到对类queue</li><li>queue：消息队列里，负责接收并缓存消息</li><li>consumer：订阅队列，处理队列中的消息<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051452729.png" alt="[Pasted image 20231018111117.png]"></li></ul><h2 id="完成官方Demo中的hello-world案例"><a href="#完成官方Demo中的hello-world案例" class="headerlink" title="完成官方Demo中的hello world案例"></a>完成官方Demo中的hello world案例<br></h2><p>实现步骤：</p><ul><li>导入课前资料中的demo工程</li><li>运行publisher服务中的测试类PublisherTest中的测试方法testSendMessage()</li><li>查看RabbitMQ控制台的消息</li><li>启动consumer服务，查看是否能接收消息<br>基本消息队列的消息发送流程：</li></ul><ol><li>建立connection</li><li>创建channel</li><li>利用channel声明队列</li><li>利用channel向队列发送消息<br>基本消息队列的消息接收流程：</li><li>建立connection</li><li>创建channel</li><li>利用channel声明队列</li><li>定义consumer的消费行为handleDelivery()</li><li>利用channel将消费者与队列绑定</li></ol><h1 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP<br></h1><h2 id="什么SpringAMQP"><a href="#什么SpringAMQP" class="headerlink" title="什么SpringAMQP"></a>什么SpringAMQP<br></h2><p>SpringAmqp的官方地址：(<a href="https://spring.io/pojects/spring-amqp">https://spring.io/pojects/spring-amqp</a>)<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051453603.png" alt="[Pasted image 20231018114602.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051453359.png" alt="[Pasted image 20231018114610.png]"></p><h2 id="利用SpringAMQP实现HelloWorld中的基础消息队列功能"><a href="#利用SpringAMQP实现HelloWorld中的基础消息队列功能" class="headerlink" title="利用SpringAMQP实现HelloWorld中的基础消息队列功能"></a>利用SpringAMQP实现HelloWorld中的基础消息队列功能<br></h2><p>流程如下：</p><ol><li>在父工程中引入spring-amqp的依赖</li><li>在publisher服务中利用RabbitTemplate发送消息到simple.queue这个队列</li><li>在consumer服务中编写消费逻辑，绑定simple.queue这个队列<br>步骤1：引入AMQP依赖<br>因为publisher和consumer服务都需要amqp依赖，因此这里吧依赖直接放到父工程mq-demo中：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AMQP依赖，包含RabbitMQ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>步骤2：在publisher中编写测试方法，向simple.queue发送消息</li><li>在publisher服务中编写application.yml，添加mq连接信息：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.130</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">huanji</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure></li><li>在publisher服务中新建一个测试类，编写测试方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span>  </span><br><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,spring amqp&quot;</span>;  </span><br><span class="line">        rabbitTemplate.convertAndSend(queueName,message);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤3：在consumer中编写消费逻辑，监听simple.queue</li><li>在consumer服务中编写application.yml，添加mq连接信息：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">rabbitmq:</span>  </span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.130</span> <span class="comment"># 主机名  </span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口  </span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机  </span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">huanji</span> <span class="comment"># 用户名  </span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure></li><li>在consumer服务中新建一个类，编写消费逻辑：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;  </span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息 : 【&quot;</span>+ msg +<span class="string">&quot;】&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Work-Queue工作队列"><a href="#Work-Queue工作队列" class="headerlink" title="Work Queue工作队列"></a>Work Queue工作队列<br></h2><p>Work queue，工作队列，可以提高消息处理速度，避免队列消息堆积</p><h2 id="模拟WorkQueue，实现一个队列绑定多个消费者"><a href="#模拟WorkQueue，实现一个队列绑定多个消费者" class="headerlink" title="模拟WorkQueue，实现一个队列绑定多个消费者"></a>模拟WorkQueue，实现一个队列绑定多个消费者<br></h2><p>基本思路如下：</p><ol><li>在publisher服务中定义测试方法，每秒产生50条消息，发送到simple.queue</li><li>在consumer服务中定义两个消息监听者，都监听simplq.queue队列</li><li>消费者1每秒处理50条消息，消费者2每秒处理10条信息</li></ol><h2 id="消费预取限制"><a href="#消费预取限制" class="headerlink" title="消费预取限制"></a>消费预取限制<br></h2><p>修改application.yml文件，设置preFetch这个值，可以控制预取消息的上限：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">rabbitmq:</span>  </span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.130</span> <span class="comment"># 主机名  </span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口  </span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机  </span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">huanji</span> <span class="comment"># 用户名  </span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span> <span class="comment"># 密码</span></span><br><span class="line">    <span class="attr">listenter:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="string">prefetch:1</span> <span class="comment">#每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><h2 id="发布（Publish）、订阅（Subscribe）"><a href="#发布（Publish）、订阅（Subscribe）" class="headerlink" title="发布（Publish）、订阅（Subscribe）"></a>发布（Publish）、订阅（Subscribe）<br></h2><p>发布订阅模式与之前案例的区别就是允许将同一消息发送给多个消费者。实现方式是加入了exchange（交换机）<br>常见exchange类型包括：</p><ul><li>Fanout：广播</li><li>Direct：路由</li><li>Topic：话题<br>![[Pasted image 20231019074657.png]]<br>注意：exchange负责消息路由，而不是存储，路由失败则消息丢失</li></ul><h2 id="发布订阅-Fanout-Exchange"><a href="#发布订阅-Fanout-Exchange" class="headerlink" title="发布订阅-Fanout Exchange"></a>发布订阅-Fanout Exchange<br></h2><p>Fanout Exchange 会将接收到的消息路由到每一个跟其绑定的queue<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051454618.png" alt="[Pasted image 20231019075136.png]"></p><h2 id="利用SpringAMQP演示FanoutExchange的使用"><a href="#利用SpringAMQP演示FanoutExchange的使用" class="headerlink" title="利用SpringAMQP演示FanoutExchange的使用"></a>利用SpringAMQP演示FanoutExchange的使用<br></h2><p>实现思路如下：</p><ol><li>在consumer服务中，利用代码声明队列、交换机，并将两者绑定</li><li>在consumer服务中，编写两个消费者方法，分别监听fanout.queue1和fanout.queue2</li><li>在publisher中编写测试方法，向huanji.fanout发送消息<br>步骤1：在consumer服务声明Exchange、Queue、Binding<br>SpringAMQP提供了声明交换机、队列、绑定关系的API，例如：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051454775.png" alt="[Pasted image 20231019075950.png]"><br>在consumer服务常见一个类，添加@Configuration注解，并声明FanoutExchange、Queue和绑定关系对象Binding，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;  </span><br><span class="line">    <span class="comment">// huanji.fanout  </span></span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;huanji.fanout&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//fanout.queue1  </span></span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//绑定队列1到交换机  </span></span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//fanout.queue2  </span></span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//绑定队列2到交换机  </span></span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤2：在consumer服务声明两个消费者<br><br>在consumer服务的SpringRabbitListener类中，添加两个方法，分别监听fanout.queue1和fanout.queue2:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span>&#123;  </span><br><span class="line">    System.err.println(<span class="string">&quot;消费者接收到fanout.queue1的消息 : 【&quot;</span>+ msg +<span class="string">&quot;】&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span>&#123;  </span><br><span class="line">    System.err.println(<span class="string">&quot;消费者接收到fanout.queue2的消息 : 【&quot;</span>+ msg +<span class="string">&quot;】&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤3：在publisher服务发送消息到FanoutExchange<br>在publisher服务的SpringAmqpTest类中添加测试方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendFanoutExchange</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="comment">// 交换机名称  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;huanji.fanout&quot;</span>;  </span><br><span class="line">    <span class="comment">// 消息  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, every one!&quot;</span>;  </span><br><span class="line">    <span class="comment">// 发送消息  </span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;&quot;</span>,message); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="发送订阅-DirectExchange"><a href="#发送订阅-DirectExchange" class="headerlink" title="发送订阅-DirectExchange"></a>发送订阅-DirectExchange<br></h2><p>Direct Exchange会将接收到的消息根据规则路由到指定的Queue，因此称为路由模式（routes）</p><ul><li>每一个Queue都与Exchange设置一个BindingKey</li><li>发布者发送消息时，指定消息的RoutingKey</li><li>Exchange将消息路由到BindingKey与消息RoutingKey一致的队列<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051455370.png" alt="[Pasted image 20231019101904.png]"></li></ul><h2 id="利用SpringAMQP演示DirectExchange的使用"><a href="#利用SpringAMQP演示DirectExchange的使用" class="headerlink" title="利用SpringAMQP演示DirectExchange的使用"></a>利用SpringAMQP演示DirectExchange的使用<br></h2><p>实现思路如下：</p><ol><li>利用@RabbitListener声明Exchange、Queue、RoutingKey</li><li>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</li><li>在publisher中编写测试方法，向huanji.direct发送消息<br>步骤1：在consumer服务声明Exchange、Queue</li><li>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</li><li>并利用@RabbitListener声明Exchange、Queue、RoutingKey<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException&#123;  </span><br><span class="line">    System.err.println(<span class="string">&quot;消费者接收到fanout.queue2的消息 : 【&quot;</span>+ msg +<span class="string">&quot;】&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(  </span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue1&quot;),  </span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;huanji.direct&quot;,type = ExchangeTypes.DIRECT),  </span></span><br><span class="line"><span class="meta">        key = &#123;&quot;red&quot;,&quot;blue&quot;&#125;  </span></span><br><span class="line"><span class="meta">))</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerDirectQueue1</span><span class="params">(String msg)</span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;消费者收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(  </span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue2&quot;),  </span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;huanji.direct&quot;,type = ExchangeTypes.DIRECT),  </span></span><br><span class="line"><span class="meta">        key = &#123;&quot;red&quot;,&quot;yellow&quot;&#125;  </span></span><br><span class="line"><span class="meta">))</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerDirectQueue2</span><span class="params">(String msg)</span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;消费者收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤2：在publisher服务发送消息到DirectExchange<br>在publisher服务的SpringAmqpTest类中添加测试方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchange</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//队列名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;huanji.direct&quot;</span>;</span><br><span class="line"><span class="comment">//消息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">messge</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>；</span><br><span class="line"><span class="comment">//发送消息，参数依次为：交换机名称，RoutingKey，消息</span></span><br><span class="line">rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;red&quot;</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="发布订阅-TopicExchange"><a href="#发布订阅-TopicExchange" class="headerlink" title="发布订阅-TopicExchange"></a>发布订阅-TopicExchange<br></h2><p>TopicExchange与DIrectExchange类似，区别在于routingKey必须是多个单词的列表，并且以 . 分割。<br>Queue与Exchange指定BindingKey时可以使用通配符：<br>#: 代指0个或多个单词<br>*: 代指一个单词<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051455355.png" alt="[Pasted image 20231019114704.png]"></p><h2 id="利用SpringAMQP演示TopicExchange的使用"><a href="#利用SpringAMQP演示TopicExchange的使用" class="headerlink" title="利用SpringAMQP演示TopicExchange的使用"></a>利用SpringAMQP演示TopicExchange的使用<br></h2><p>实现思路：</p><ol><li>并利用@RabbitListener声明Exchange、Queue、RoutingKey</li><li>在consumer服务中，编写两个消息者方法，分别监听topic.queue1和topic.queue2</li><li>在publisher中编写测试方法，向huanji.topic发送消息<br>步骤1：在consumer服务声明Exchange、Queue</li><li>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2，</li><li>并利用@RabbitListener声明Exchange、Queue、RoutingKey<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(  </span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;topic.queue1&quot;),  </span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;huanji.topic&quot;,type = ExchangeTypes.TOPIC),  </span></span><br><span class="line"><span class="meta">        key = &quot;china.#&quot;  </span></span><br><span class="line"><span class="meta">))</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(  </span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;topic.queue2&quot;),  </span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;huanji.topic&quot;,type = ExchangeTypes.TOPIC),  </span></span><br><span class="line"><span class="meta">        key = &quot;#.news&quot;  </span></span><br><span class="line"><span class="meta">))</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤2：在publisher服务发送消息到TopicExchange<br>在publisher服务的SpringAmqpTest类中添加测试方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//队列名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;huanji.topic&quot;</span>;</span><br><span class="line"><span class="comment">//消息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">messge</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>；</span><br><span class="line"><span class="comment">//发送消息，参数依次为：交换机名称，RoutingKey，消息</span></span><br><span class="line">rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;china.news&quot;</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringAMQP-消息转换器"><a href="#SpringAMQP-消息转换器" class="headerlink" title="SpringAMQP-消息转换器"></a>SpringAMQP-消息转换器<br></h1><h2 id="测试发送Object类型消息"><a href="#测试发送Object类型消息" class="headerlink" title="测试发送Object类型消息"></a>测试发送Object类型消息<br></h2><p>说明：在SpringAMQP的发送方法中，接收消息的类型是Object，也就是说我们可以发送任意对象类型的消息，SpringAMQP会帮我们序列化为字节后发送。<br>我们在consumer中利用@Bean声明一个队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">objectMessageQueue</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;object.queue&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在publisher中发送消息以测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line"><span class="comment">//准备消息</span></span><br><span class="line">Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">msg.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">msg.put(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>);</span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;object.queue&quot;</span>,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器<br></h2><p>Spring的对消息对象的处理是由org.springframework.amqp.support.converter.MessageConverter来处理的。而默认实现是SimpleMessageConverter，基于JDK的ObjectOutputStream完成序列化。<br>如果要修改只需要定义一个MessageConverter类型的Bean即可。推荐用JSON方式序列化，步骤如下：</p><ul><li>我们在publisher服务引入依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>我们在consumer服务定义MessageConverter：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>然后定义一个消费者，监听object.queue队列并消费消息：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueue</span><span class="params">(Map&lt;String,Object&gt; msg)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="初识elasticsearch"><a href="#初识elasticsearch" class="headerlink" title="初识elasticsearch"></a>初识elasticsearch<br></h1><h2 id="什么是elasticsearch"><a href="#什么是elasticsearch" class="headerlink" title="什么是elasticsearch"></a>什么是elasticsearch<br></h2><p>elasticsearch是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容<br>elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域<br>elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051456510.png" alt="[Pasted image 20231019154919.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051456732.png" alt="[Pasted image 20231019155111.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051456278.png" alt="[Pasted image 20231019154941.png]"></p><h2 id="elasticsearch的发展"><a href="#elasticsearch的发展" class="headerlink" title="elasticsearch的发展"></a>elasticsearch的发展<br></h2><p>Lucene是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发。<br>官网地址：(<a href="https://lucene.apache.org/)%E3%80%82">https://lucene.apache.org/)。</a><br>Lucene的优势：</p><ul><li>易扩展</li><li>高性能（基于倒排索引）<br>Lucene的缺点:</li><li>只限于Java语言开发</li><li>学习曲线陡峭</li><li>不支持水平扩展</li></ul><p>2004年Shay Banon基于Lucene开发了Compass<br>2010年Shay Banon重写了Compass，取名为Elasticsearch。<br>官网地址：(<a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a>)<br>目前最新的版本是：8.10.4<br>相比于lucene，elasticsearch具备下列优势：</p><ul><li>支持分布式，可水平扩展</li><li>提供Restful接口，可被任何语言调用</li></ul><h2 id="为什么学习elasticsearch？"><a href="#为什么学习elasticsearch？" class="headerlink" title="为什么学习elasticsearch？"></a>为什么学习elasticsearch？<br></h2><p>搜索引擎技术排名：</p><ol><li>Elasticsearch：开源的分布式搜索引擎</li><li>Splunk：商业项目</li><li>Solr：Apache的开源搜索引擎</li></ol><h2 id="正向索引和倒排索引"><a href="#正向索引和倒排索引" class="headerlink" title="正向索引和倒排索引"></a>正向索引和倒排索引<br></h2><p>传统数据库（如MySQL采用正向索引，例如给下表（tb_goods）中的id创建索引）：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051456410.png" alt="[Pasted image 20231019161233.png]"><br>elasticsearch采用倒排索引：</p><ul><li>文档（document）：每条数据就是一个文档</li><li>词条（term）：文档按照语义分成的词语<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051456380.png" alt="[Pasted image 20231019161720.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051456397.png" alt="[Pasted image 20231019161906.png]"></li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档<br></h2><p>elasticsearch是面向文档存储的，可以是数据库中的一条商品数据，一个订单信息。<br>文档数据会被序列化为json格式后存储在elasticsearch中<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051457217.png" alt="[Pasted image 20231019162626.png]"></p><h2 id="索引（index）"><a href="#索引（index）" class="headerlink" title="索引（index）"></a>索引（index）<br></h2><ul><li>索引（index）：相同类型的文档的集合</li><li>映射（mapping）：索引中文档的字段约束信息，类似表的结构约束<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051457882.png" alt="[Pasted image 20231019162834.png]"></li></ul><h2 id="概念对比"><a href="#概念对比" class="headerlink" title="概念对比"></a>概念对比<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051457687.png" alt="[Pasted image 20231019163113.png]"></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构<br></h2><p>MySQL：擅长事务类型操作，可以确保数据的安全和一致性<br>Elasticsearch：擅长海量数据的搜索、分析、计算<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051457990.png" alt="[Pasted image 20231019163806.png]"></p><h2 id="安装elasticsearch、kibana"><a href="#安装elasticsearch、kibana" class="headerlink" title="安装elasticsearch、kibana"></a>安装elasticsearch、kibana<br></h2><p>运行Elasticsearch</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name es \</span><br><span class="line">-e <span class="string">&quot;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">-v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">--privileged \</span><br><span class="line">--network es-net \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">elasticsearch:7.12.1 </span><br></pre></td></tr></table></figure><p>运行kibana</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">--network=es-net \</span><br><span class="line">-p 5601:5601  \</span><br><span class="line">kibana:7.12.1</span><br></pre></td></tr></table></figure><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器<br></h2><p>es在创建倒排索引时需要对文档分词；在搜索时，需要对用户输入内容分词。但默认的分词规则对中文处理并不友好。<br>我们在kibana的DevTools中测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;黑马程序员学习java太棒了!&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>语法说明：</p><ul><li>POST：请求方式</li><li>&#x2F;_analyze：请求路径，这里省略了<a href="http://192.168.140.130:9200，有kibana帮我们补充">http://192.168.140.130:9200，有kibana帮我们补充</a></li><li>请求参数，json风格：<ul><li>analyzer：分词器类型，这里是默认的standard分词器</li><li>text：要分词的内容<br>  处理中文分词，一般会使用IK分词器。(<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a>)<br>  安装IK分词器，参考资料《安装elasticsearch.md》：<br>  <a href="%E5%AE%89%E8%A3%85elasticsearch.md">[安装elasticsearch]</a></li></ul></li></ul><h2 id="ik分词器-模式"><a href="#ik分词器-模式" class="headerlink" title="ik分词器-模式"></a>ik分词器-模式<br></h2><ul><li>ik_smart：智能切分，粗粒度<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;蚌埠住了&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>ik_max_word：最细切分，细粒度<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;蚌埠住了&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ik分词器-扩展词库"><a href="#ik分词器-扩展词库" class="headerlink" title="ik分词器-扩展词库"></a>ik分词器-扩展词库<br></h2><p>要扩展ik分词器的词库，只需要修改一个ik分词器目录中的config目录中的IKAnalyzer.cfg.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Aanalyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 * * * 添加扩展词典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ik分词器-停用词库"><a href="#ik分词器-停用词库" class="headerlink" title="ik分词器-停用词库"></a>ik分词器-停用词库<br></h2><p>要禁用某些敏感词条，只需要修改一个ik分词器目录中的config目录中的IkAnalyzer.cfg.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Aanalyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用户可以在这里配置自己的扩展停止词字典 * * * 添加停用词词典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在名为stopword.dic的文件中，添加想要拓展的词语即可</p><h1 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作<br></h1><h2 id="mapping属性"><a href="#mapping属性" class="headerlink" title="mapping属性"></a>mapping属性<br></h2><p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用那种分词器</li><li>properties：该字段的子字段</li></ul><h2 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库<br></h2><p>ES中通过Restful请求操作索引库、文档。请求文档用DSL语句来表示。创建索引库和mapping的DSL语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUt /索引库名称</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;字段名2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="string">&quot;false&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;字段名3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;子字段&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// ...略</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引库</span><br><span class="line">PUT /heima</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="查看、删除索引库"><a href="#查看、删除索引库" class="headerlink" title="查看、删除索引库"></a>查看、删除索引库<br></h2><p>查看索引库语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /索引库名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /heima</span><br></pre></td></tr></table></figure><p>删除索引库的语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /索引库名</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /heima</span><br></pre></td></tr></table></figure><h2 id="修改索引库"><a href="#修改索引库" class="headerlink" title="修改索引库"></a>修改索引库<br></h2><p>索引库和mapping一旦创建无法修改，但是可以添加新的字段，语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引库名/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;新字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作<br></h1><h2 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档<br></h2><p>新增文档的DSL语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span><span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span><span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;字段3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;子属性1&quot;</span><span class="punctuation">:</span><span class="string">&quot;值3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;子属性2&quot;</span><span class="punctuation">:</span><span class="string">&quot;值4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /heima/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;黑马程序员Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="查看、删除文档"><a href="#查看、删除文档" class="headerlink" title="查看、删除文档"></a>查看、删除文档<br></h2><p>查看文档语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><p>删除索引库的语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档<br></h2><p>方式一：全量修改，会删除旧文档，添加新文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引库名/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// ...略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;黑马程序员Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;ZhaoYun@itcase.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span><span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span><span class="string">&quot;赵&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方式二：增量修改，修改指定字段值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/_update/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /heima/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhaoYun@itcast.cn&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="RestClient操作索引库"><a href="#RestClient操作索引库" class="headerlink" title="RestClient操作索引库"></a>RestClient操作索引库<br></h1><h2 id="什么是RestClient"><a href="#什么是RestClient" class="headerlink" title="什么是RestClient"></a>什么是RestClient<br></h2><p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址：<br><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><h2 id="利用JavaRestClient实现创建、删除索引库、判断索引库是否存在"><a href="#利用JavaRestClient实现创建、删除索引库、判断索引库是否存在" class="headerlink" title="利用JavaRestClient实现创建、删除索引库、判断索引库是否存在"></a>利用JavaRestClient实现创建、删除索引库、判断索引库是否存在<br></h2><p>根据课前资料提供的酒店数据创建索引库，索引库名为hotel，mapping属性根据数据库结构定义。<br>基本步骤如下：</p><ol><li>导入课前资料Demo</li><li>分析数据结构，定义mapping属性</li><li>初始化JavaRestClient</li><li>利用JavaRestClient创建索引库</li><li>利用JavaRestClient删除索引库</li><li>利用JavaRestClient判断索引库是否存在<br>步骤1：导入课前资料Demo<br>首先导入课前资料提供的数据库数据：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051458501.png" alt="[Pasted image 20231020162716.png]"><br>然后导入课前资料提供的项目：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051458179.png" alt="[Pasted image 20231020162800.png]"><br>步骤2：分析数据结构<br>mapping要考虑的问题：<br>字段名、数据类型、是否参与搜索、是否分词、如果分词，分词器是什么？<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051459239.png" alt="[Pasted image 20231020164505.png]"><br>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;star_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>步骤3：初始化JavaRestClient</li><li>引入es的RestHighLevelClient依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>因为SpringBoot默认的ES版本是7.6.2，所以我们需要覆盖默认的ES版本：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>初始化RestHighLevelClient：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(  </span><br><span class="line">        HttpHost.create(<span class="string">&quot;http://192.168.140.130:9200&quot;</span>)  </span><br><span class="line">));</span><br></pre></td></tr></table></figure>步骤4：创建索引库<br>创建索引库代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCreateHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="comment">//1.创建Request对象  </span></span><br><span class="line">    <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);  </span><br><span class="line">    <span class="comment">//2.请求参数，MAPPING_TEMPLATE是静态常量字符串，内容是创建索引库的DSL语句  </span></span><br><span class="line">    request.source(MAPPING_TEMPLATE, XContentType.JSON);  </span><br><span class="line">    <span class="comment">//3.发起请求  </span></span><br><span class="line">    client.indices().create(request, RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤5：删除索引库、判断索引库是否存在</li></ol><ul><li>删除索引库代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="comment">//1. 创建Request对象  </span></span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);  </span><br><span class="line">    <span class="comment">//2.发起请求  </span></span><br><span class="line">    client.indices().delete(request,RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>判断索引库是否存在<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testExistsHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="comment">//1.创建Request对象  </span></span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">hotel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);  </span><br><span class="line">    <span class="comment">//2.发起请求  </span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(hotel,RequestOptions.DEFAULT);  </span><br><span class="line">    <span class="comment">//3.输出  </span></span><br><span class="line">    System.out.println(exists);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="RestClient操作文档"><a href="#RestClient操作文档" class="headerlink" title="RestClient操作文档"></a>RestClient操作文档<br></h1><h2 id="利用JavaRestClient实现文档的CRUD"><a href="#利用JavaRestClient实现文档的CRUD" class="headerlink" title="利用JavaRestClient实现文档的CRUD"></a>利用JavaRestClient实现文档的CRUD<br></h2><p>去数据库查询酒店数据，导入到hotel索引库，实现酒店数据的CRUD。<br>基本步骤如下：</p><ol><li>初始化JavaRestClient</li><li>利用JavaRestClient新增酒店数据</li><li>利用JavaRestClient根据id查询酒店数据</li><li>利用JavaRestClient删除酒店数据</li><li>利用JavaRestClient修改酒店数据<br> 步骤1：初始化JavaRestClient<br> 新建一个测试类，实现文档相关操作，并且完成JavaRestClient的初始化<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticsearchDocumentTest</span>&#123;</span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"><span class="meta">@BeforeEach</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(  </span><br><span class="line">            HttpHost.create(<span class="string">&quot;http://192.168.140.130:9200&quot;</span>)  </span><br><span class="line">    ));  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@AfterEach</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="built_in">this</span>.client.close();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤2：添加酒店数据到索引库<br>  先查询酒店数据，然后给这条数据创建倒排索引，即可完成添加：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="comment">//根据id查看酒店数据  </span></span><br><span class="line">    <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(<span class="number">36934L</span>);  </span><br><span class="line">    <span class="comment">//转换为文档类型  </span></span><br><span class="line">    <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//1.准备Request对象  </span></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotelDoc.getId().toString());  </span><br><span class="line">    <span class="comment">//2.准备JSON文档  </span></span><br><span class="line">    indexRequest.source(JSON.toJSONString(hotelDoc),XContentType.JSON);  </span><br><span class="line">    client.index(indexRequest,RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤3：根据id查询酒店数据<br>  根据id查询到的文档数据是json，需要反序列化为json对象：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCreateHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="comment">//1.创建Request对象  </span></span><br><span class="line">    <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);  </span><br><span class="line">    <span class="comment">//2.请求参数，MAPPING_TEMPLATE是静态常量字符串，内容是创建索引库的DSL语句  </span></span><br><span class="line">    request.source(MAPPING_TEMPLATE, XContentType.JSON);  </span><br><span class="line">    <span class="comment">//3.发起请求  </span></span><br><span class="line">    client.indices().create(request, RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤4：根据id修改酒店数据<br>  修改文档数据有两种方式：<br>  方式一：全量更新。再次写入id一样的文档，就会删除旧文档，添加新文档<br>  方式二：局部更新。只更新部分字段，我们演示方式二<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="comment">//1.准备Request  </span></span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">hotel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;36934&quot;</span>);  </span><br><span class="line">    <span class="comment">//2.准备请求参数  </span></span><br><span class="line">    hotel.doc(  </span><br><span class="line">        <span class="string">&quot;price&quot;</span>,<span class="string">&quot;700&quot;</span>,  </span><br><span class="line">            <span class="string">&quot;starName&quot;</span>,<span class="string">&quot;四钻&quot;</span>  </span><br><span class="line">    );  </span><br><span class="line">    <span class="comment">//3.发送请求  </span></span><br><span class="line">    client.update(hotel,RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤5：根据id删除文档数据<br>  删除文档代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="comment">//1.准备Request  </span></span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;36934&quot;</span>);  </span><br><span class="line">    <span class="comment">//2.发送请求  </span></span><br><span class="line">    client.delete(request,RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="利用JavaRestClient批量导入酒店数据到ES"><a href="#利用JavaRestClient批量导入酒店数据到ES" class="headerlink" title="利用JavaRestClient批量导入酒店数据到ES"></a>利用JavaRestClient批量导入酒店数据到ES<br></h2><p>需求：批量查询酒店数据，然后批量导入索引库中<br>思路：</p><ol><li>利用mybatis-plus查询酒店数据</li><li>将查询到的酒店数据(Hotel)转换为文档类型数据(HotelDoc)</li><li>利用JavaRestClient中的Bulk批处理，实现批量新增文档，示例代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="comment">//批量查询酒店数据  </span></span><br><span class="line">    List&lt;Hotel&gt; list = hotelService.list();  </span><br><span class="line">    <span class="comment">//1.创建Request  </span></span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();  </span><br><span class="line">    <span class="comment">//2.准备参数  </span></span><br><span class="line">    list.stream().map(arg -&gt; <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(arg)).collect(Collectors.toList()).forEach((arg) -&gt; &#123;  </span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>)  </span><br><span class="line">                .id(arg.getId().toString())  </span><br><span class="line">                .source(JSON.toJSONString(arg),XContentType.JSON));  </span><br><span class="line">    &#125;);  </span><br><span class="line">    <span class="comment">//3.发送请求  </span></span><br><span class="line">    client.bulk(request,RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="DSL查询语法"><a href="#DSL查询语法" class="headerlink" title="DSL查询语法"></a>DSL查询语法<br></h1><h2 id="DSL-Query的分类"><a href="#DSL-Query的分类" class="headerlink" title="DSL Query的分类"></a>DSL Query的分类<br></h2><p>Elasticasearch提供了基于JSON的DSL（Domain Specific Language）来定义查询。常见的查询类型包括：</p><ul><li>查询所有：查询出所有数据，一般测试用。例如：match_all</li><li>全文检索（full text）查询：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如：<ul><li>match_query</li><li>multi_match_query</li></ul></li><li>精确查询：根据精确词条查找数据，一般是查找keyword、数值、日期、boolean等类型字段。例如：<ul><li>ids</li><li>range</li><li>term</li></ul></li><li>地理（geo）查询：根据经纬度查询。例如：<ul><li>geo_distance</li><li>geo_bounding_box</li></ul></li><li>复合（compound）查询：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：<ul><li>bool</li><li>function_score</li></ul></li></ul><h2 id="DSL-Query基本语法"><a href="#DSL-Query基本语法" class="headerlink" title="DSL Query基本语法"></a>DSL Query基本语法<br></h2><p>查询的基本语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;查询类型&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;查询条件&quot;</span><span class="punctuation">:</span> <span class="string">&quot;条件值&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="全文检索查询"><a href="#全文检索查询" class="headerlink" title="全文检索查询"></a>全文检索查询<br></h2><p>全文检索查询，会对用户输入内容分词，常用于搜索框搜索：</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051459387.png" alt="[Pasted image 20231021144312.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051459167.png" alt="[Pasted image 20231021144417.png]"></p><p>match查询：全文检索查询的一种，会对用户输入内容分词，然后去倒排索引库检索，语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>multi_match：与match查询类似，只不过允许同时查询多个字段，语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;FIELD1&quot;</span><span class="punctuation">,</span><span class="string">&quot;FIELD12&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询<br></h2><p>精确查询一般是查找keyword、数值、日期、boolean等类型字段。所以不会对搜索条件分词。常见的有：</p><ul><li>term：根据词条精确值查询</li><li>range：根据值的范围查询</li></ul><h2 id="精确查询-语法"><a href="#精确查询-语法" class="headerlink" title="精确查询-语法"></a>精确查询-语法<br></h2><p>精确查询一般是根据id、数值、keyword类型、或布尔字段来查询。语法如下：<br>term查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// term查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VALUE&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>range查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// range查询</span></span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">400</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="地理查询"><a href="#地理查询" class="headerlink" title="地理查询"></a>地理查询<br></h2><p>根据经纬度查询。常见的使用场景包括：</p><ul><li>携程：搜索我附近的酒店</li><li>滴滴：搜索我附近的出租车</li><li>微信：搜索我附近的人<br>根据经纬度查询，例如：</li><li>geo_bounding_box：查询geo_point值落在某个矩形范围的所有文档<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// geo_bounding_box查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;geo_bounding_box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;top_left&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">31.1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.5</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bottom_right&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">30.9</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.7</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>geo_distance：查询到指定中心点小于某个距离值的所有文档<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// geo_distance 查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;15km&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.21,121.5&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询<br></h2><p>复合（compound）查询：复合查询可以将其他简单查询组合起来，实现更复杂的搜索逻辑，例如：</p><ul><li>fuction score：算分函数查询，可以控制文档相关性算分，控制文档排名。例如百度竞价</li></ul><h2 id="相关性算分"><a href="#相关性算分" class="headerlink" title="相关性算分"></a>相关性算分<br></h2><p>当我们利用match查询时，文档结果会根据与搜索词条的关联度打分（_score），返回结果时按照分值降序排列。<br>例如，我们搜索”虹桥如家”，结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">17.850193</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;虹桥如家酒店真不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">12.259849</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外滩如家酒店真不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">11.91091</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;迪士尼如家酒店真不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>elsasticsearch中的相关性打分算法:</p><ul><li>TF-IDF：在elasticsearch5.0之前，会随着词频增加而越来越大<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051500922.png" alt="[Pasted image 20231022083816.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051500208.png" alt="[Pasted image 20231022083829.png]"></li><li>BM25：在elasticsearch5.0之后，会随着词频增加而增大，但增长曲线会趋于水平<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051500193.png" alt="[Pasted image 20231022083852.png]"></li></ul><h2 id="Function-Score-Query"><a href="#Function-Score-Query" class="headerlink" title="Function Score Query"></a>Function Score Query<br></h2><p>使用function score query，可以修改文档的相关性算分（query score），根据新得到的算分排序。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;function_score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外滩&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;boost_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;multiply&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>“query”: { “match”: {“all”: “外滩”}}：<br>原始查询条件，搜索文档并根据相关性打分（query_score）</li><li>“filter”: {“term”: {“id”: “1”}}：<br>过滤条件，符合条件的文档才会被重新算分</li><li>“weight”: 10<br>算分函数，算分函数的结果称为function_score，将来会与query score运算，得到新算法，常见的算分函数有：<ul><li>weight：给一个常量值，作为函数结果（function score）</li><li>field_value_factor：用文档中的某个字段值作为函数结果</li><li>random_score：随机生成一个值，作为函数结果</li><li>script_score：自定义计算公式，公式结果作为函数结果</li></ul></li><li>“boost_mode”: “multiply”<br>加权模式，定义function score与query_score的运算方式，包括：<ul><li>multiply：两者相乘。默认就是这个</li><li>replace：用function score替换query score</li><li>其他：sum、avg、max、min</li></ul></li></ul><h3 id="给“如家”这个品牌的酒店排名靠前一点"><a href="#给“如家”这个品牌的酒店排名靠前一点" class="headerlink" title="给“如家”这个品牌的酒店排名靠前一点"></a><strong>给“如家”这个品牌的酒店排名靠前一点</strong><br></h3><p>把这个问题翻译一下，function score需要的三要素：</p><ol><li>那些文档需要算分加权？<ul><li>品牌为如家的酒店</li></ul></li><li>算分函数是什么？<ul><li>weight就可以</li></ul></li><li>加权模式是什么？<ul><li>求和<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;function_score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//算分函数</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">// 满足的条件，品牌必须是如家</span></span><br><span class="line">            <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">2</span> <span class="comment">//算分权重为2</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;boost_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sum&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>function score query三要素:</p><ul><li>过滤条件：哪些文档要加分</li><li>算分函数：如何计算function score</li><li>加权方式：function score与 query score如何运算</li></ul><h2 id="复合查询-Boolean-Query"><a href="#复合查询-Boolean-Query" class="headerlink" title="复合查询 Boolean Query"></a>复合查询 Boolean Query<br></h2><p>布尔查询是一个或多个查询子句的组合。子查询的组合方式有：</p><ul><li>must：必须匹配每个子查询，类似“与”</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，不参与算分，类似“非”</li><li>filter：必须匹配，不参与算分<br>示例:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;上海&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span><span class="string">&quot;皇冠假日&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span><span class="string">&quot;华美达&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;range&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;range&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;get&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="利用bool查询实现功能"><a href="#利用bool查询实现功能" class="headerlink" title="利用bool查询实现功能"></a><strong>利用bool查询实现功能</strong><br></h3><p>需求：搜索名字包含“如家”，价格不高于400，在坐标31.21，121.5周围10km范围内的酒店</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;gt&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span><span class="string">&quot;10km&quot;</span><span class="punctuation">,</span><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span></span><br><span class="line">              <span class="punctuation">&#123;</span><span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span><span class="number">31.21</span><span class="punctuation">,</span><span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span><span class="number">121.5</span><span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="搜索结果处理"><a href="#搜索结果处理" class="headerlink" title="搜索结果处理"></a>搜索结果处理<br></h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序<br></h2><p>elasticsearch支持对搜索结果排序，默认是根据相关度算分（_score）来排序。可以排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型等</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span> <span class="comment">//排序字段和排序方式ASC、DESC</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;纬度,经度&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;unit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;km&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="实现对酒店数据按照到你的位置坐标的距离升序排序"><a href="#实现对酒店数据按照到你的位置坐标的距离升序排序" class="headerlink" title="实现对酒店数据按照到你的位置坐标的距离升序排序"></a><strong>实现对酒店数据按照到你的位置坐标的距离升序排序</strong><br></h3><p>获取经纬度的方式：(<a href="https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/">https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/</a>)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">31.034661</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.612282</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;unit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;km&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页<br></h2><p>elasticsearch默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。<br>elasticsearch中通过修改from、size参数来控制要返回的分页结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">990</span><span class="punctuation">,</span> <span class="comment">//分页开始的位置，默认为0</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="comment">//期望获取的文档总数</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="深度分页问题"><a href="#深度分页问题" class="headerlink" title="深度分页问题"></a>深度分页问题<br></h2><p>ES是分布式的，所以会面临深度分页问题。例如按price排序后，获取from&#x3D;990，size&#x3D;10的数据：</p><ol><li>首先在每个数据分片上都排序并查询前1000条文档。</li><li>然后将所有节点的结果聚合，在内存中重新排序选出前1000条文档</li><li>最后从这1000条中，选取从990开始的10条文档<br>如果搜索页数过深，或者结果集（from + size）越大，对内存和CPU的消耗也越高。因此ES设定结果集查询的上限是10000<br>![[Pasted image 20231024075341.png]]</li></ol><h2 id="深度分页解决方案"><a href="#深度分页解决方案" class="headerlink" title="深度分页解决方案"></a>深度分页解决方案<br></h2><p>针对深度分页，ES提供了两种解决方案，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/paqinate-search-results.html">官方文档</a>：</p><ul><li>search after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式</li><li>scroll：原理将排序数据形成快照，保存在内存。官方已经不推荐使用</li></ul><h2 id="分页总结"><a href="#分页总结" class="headerlink" title="分页总结"></a>分页总结<br></h2><p>from + size:</p><ul><li>优点：支持随机翻页</li><li>缺点：深度分页问题，默认查询上限（from + size）是10000</li><li>场景：百度、京东、谷歌、淘宝这样的随机翻页搜索<br>after search：</li><li>优点：没有查询上限（单次查询的size不超过10000）</li><li>缺点：只能向后逐页查询，不支持随机翻页</li><li>场景：没有随机翻页需求的搜索，例如手机向下滚动翻页<br>scroll：</li><li>优点：没有查询上限（单次查询的size不超过10000）</li><li>缺点：会有额外内存消耗，并且搜索结果是非实时的</li><li>场景：海量数据的获取和迁移。从ES7.1开始不推荐，建议用after search方案。</li></ul><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮<br></h2><p>高亮：就是在搜索结果中把搜索关键字突出显示。<br>原理是这样的：</p><ul><li>将搜索结果中的关键字用标签标记出来</li><li>在页面中给标签添加css样式<br>语法：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 指定要高亮的字段</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;em&gt;&quot;</span><span class="punctuation">,</span><span class="comment">// 用来标记高亮字段的前置标签</span></span><br><span class="line"><span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/em&gt;&quot;</span> <span class="comment">//用来标记高亮字段的后置标签</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="搜索结果处理整体语法"><a href="#搜索结果处理整体语法" class="headerlink" title="搜索结果处理整体语法"></a>搜索结果处理整体语法<br></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">//分页开始的位置</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> <span class="comment">//期望获取的文档总数</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">//普通排序</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//距离排序</span></span><br><span class="line">        <span class="attr">&quot;location&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;31.040699,121.618075&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;unit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;km&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//高亮字段</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;em&gt;&quot;</span><span class="punctuation">,</span> <span class="comment">//用来标记高亮字段的前置标签</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/em&gt;&quot;</span><span class="punctuation">,</span> <span class="comment">//用来标记高亮字段的后置标签</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="RestClient查询文档"><a href="#RestClient查询文档" class="headerlink" title="RestClient查询文档"></a>RestClient查询文档<br></h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门<br></h2><p>我们通过match_all来演示下基本的API，先看请求的DSL的组织：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">  <span class="comment">//1.准备Request</span></span><br><span class="line">  <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">  <span class="comment">//2.组织DSL参数</span></span><br><span class="line">  request.source()</span><br><span class="line">     .query(QueryBuilders.matchAllQuery());</span><br><span class="line">  <span class="comment">//3.发送请求，得到响应结果</span></span><br><span class="line">  <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request,RequestOptions.DEFAULT)；</span><br><span class="line">  <span class="comment">//...解析响应结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看结果的解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throw</span> IOException &#123;</span><br><span class="line"><span class="comment">// ...略</span></span><br><span class="line"><span class="comment">//4.解析结果  </span></span><br><span class="line"><span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> search.getHits();  </span><br><span class="line"><span class="comment">//4.1.查询的总条数  </span></span><br><span class="line"><span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> searchHits.getTotalHits().value;  </span><br><span class="line"><span class="comment">//4.2.查询的结果数组  </span></span><br><span class="line">SearchHit[] hits = searchHits.getHits();  </span><br><span class="line"><span class="keyword">for</span> (SearchHit hit : hits) &#123;  </span><br><span class="line">    <span class="comment">//4.3.得到source  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();  </span><br><span class="line">    System.out.println(searchHits);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RestAPI中其中构建DSL是通过HighLevelRestClient中的resource()来实现的，其中包含了查询、排序、分页、高亮等所有功能:<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051500527.png" alt="[Pasted image 20231024101117.png]"><br>RestAPI中其中构建查询条件的核心部分是由一个名为QueryBuilders的工具类提供的，其中包含了各种查询方法：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051501386.png" alt="[Pasted image 20231024101308.png]"></p><h2 id="全文检索查询-1"><a href="#全文检索查询-1" class="headerlink" title="全文检索查询"></a>全文检索查询<br></h2><p>全文检索的match和multi_match查询与match_all的API基本一致。差别是查询条件，也就是query的部分。<br>同样是利用QueryBuilders提供的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单字段查询</span></span><br><span class="line">QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>,<span class="string">&quot;如家&quot;</span>);</span><br><span class="line"><span class="comment">//多字段查询</span></span><br><span class="line">QueryBuilders.multiMatchQuery(<span class="string">&quot;如家&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;business&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="精确查询-1"><a href="#精确查询-1" class="headerlink" title="精确查询"></a>精确查询<br></h2><p>精确查询常见的有term查询和range查询，同样利用QueryBuilders实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 词条查询</span></span><br><span class="line">QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>,<span class="string">&quot;杭州&quot;</span>);</span><br><span class="line"><span class="comment">// 范围查询</span></span><br><span class="line">QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gte(<span class="number">100</span>).lte(<span class="number">150</span>);</span><br></pre></td></tr></table></figure><h2 id="复合查询-boolean-query"><a href="#复合查询-boolean-query" class="headerlink" title="复合查询-boolean query"></a>复合查询-boolean query<br></h2><p>精确查询常见的有term查询和range查询，同样利用QueryBuilders实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建布尔查询</span></span><br><span class="line"><span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line"><span class="comment">//添加must条件</span></span><br><span class="line">boolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>,<span class="string">&quot;杭州&quot;</span>));</span><br><span class="line"><span class="comment">//添加filter条件</span></span><br><span class="line">boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">250</span>));</span><br></pre></td></tr></table></figure><h2 id="排序和分页"><a href="#排序和分页" class="headerlink" title="排序和分页"></a>排序和分页<br></h2><p>搜索结果的排序和分页是与query同级的参数，对应的API如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询</span></span><br><span class="line">request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line"><span class="comment">//分页</span></span><br><span class="line">request.source().from(<span class="number">0</span>).size(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//价格排序</span></span><br><span class="line">request.source().sort(<span class="string">&quot;price&quot;</span>,SortOrder.ASC);</span><br></pre></td></tr></table></figure><h2 id="高亮-1"><a href="#高亮-1" class="headerlink" title="高亮"></a>高亮<br></h2><p>高亮API包括请求DSL构建和结果解析两部分。我们先看请求的DSL构建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request.source().highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>)</span><br><span class="line">   .field(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">   <span class="comment">//是否需要与查询字段匹配</span></span><br><span class="line">   .requireFieldMatch(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h2 id="高亮结果解析"><a href="#高亮结果解析" class="headerlink" title="高亮结果解析"></a>高亮结果解析<br></h2><p>高亮的结果处理相对比较麻烦：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.3.得到source  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();  </span><br><span class="line"><span class="comment">//反序列化  </span></span><br><span class="line"><span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(sourceAsString, HotelDoc.class);  </span><br><span class="line"><span class="comment">//获取高亮结果  </span></span><br><span class="line">Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();  </span><br><span class="line"><span class="keyword">if</span>(!CollectionUtils.isEmpty(highlightFields))&#123;  </span><br><span class="line">    <span class="comment">//根据字段名获取高亮结果  </span></span><br><span class="line">    <span class="type">HighlightField</span> <span class="variable">highlightField</span> <span class="operator">=</span> highlightFields.get(<span class="string">&quot;name&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span>(highlightField != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="comment">//获取高亮值  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> highlightField.getFragments()[<span class="number">0</span>].string();  </span><br><span class="line">        <span class="comment">//覆盖非高亮结果  </span></span><br><span class="line">        hotelDoc.setName(name);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="黑马旅游案例"><a href="#黑马旅游案例" class="headerlink" title="黑马旅游案例"></a>黑马旅游案例<br></h1><h2 id="案例1：实现黑马旅游的酒店搜索功能，完成关键字搜索和分页"><a href="#案例1：实现黑马旅游的酒店搜索功能，完成关键字搜索和分页" class="headerlink" title="案例1：实现黑马旅游的酒店搜索功能，完成关键字搜索和分页"></a>案例1：实现黑马旅游的酒店搜索功能，完成关键字搜索和分页<br></h2><p>课前提供的hotel-demo项目中，自带了前端页面，启动后可以看到：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051501005.png" alt="[Pasted image 20231024120216.png]"><br>先实现其中的关键字搜索功能，实现步骤如下：</p><ol><li>定义实体类，接收前端请求</li><li>定义controller接口，接收页面请求，调用IHotelService的search方法</li><li>定义IHotelService中的search方法，利用match查询实现根据关键字搜索酒店信息<br> <strong>步骤1：定义类，接收前端请求参数</strong><br> 格式如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParms</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String key;</span><br><span class="line"><span class="keyword">private</span> Integer page;</span><br><span class="line"><span class="keyword">private</span> Integer size;</span><br><span class="line"><span class="keyword">private</span> String sortBy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>步骤2：定义controller接口，接收前端请求</strong><br>定义一个HotelController，声明查询接口，满足下列要求：</li></ol><ul><li>请求方式：Post</li><li>请求路径：&#x2F;hotel&#x2F;list</li><li>请求参数：对象，类型为RequestParam</li><li>返回值：PageResult，包含两个属性<ul><li>Long total：总条数</li><li>List&lt;HotelDoc&gt; hotels: 酒店数据</li></ul></li></ul><h2 id="案例2：添加品牌、城市、星级、价格等过滤功能"><a href="#案例2：添加品牌、城市、星级、价格等过滤功能" class="headerlink" title="案例2：添加品牌、城市、星级、价格等过滤功能"></a>案例2：添加品牌、城市、星级、价格等过滤功能<br></h2><p>步骤：</p><ol><li>修改RquestParams类，添加brand、city、starName、minPrice、maxPrice等参数</li><li>修改search方法的实现，在关键字搜索时，如果brand等参数存在，对其做过滤<br><strong>步骤一：扩展IUserService的search方法的参数列表</strong><br>修改RequestParms类，接收所有参数：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String key;  </span><br><span class="line"><span class="keyword">private</span> Integer page;  </span><br><span class="line"><span class="keyword">private</span> Integer size;  </span><br><span class="line"><span class="keyword">private</span> String sortBy;  </span><br><span class="line"><span class="keyword">private</span> String brand;  </span><br><span class="line"><span class="keyword">private</span> String starName;  </span><br><span class="line"><span class="keyword">private</span> String city;  </span><br><span class="line"><span class="keyword">private</span> Integer minPrice;  </span><br><span class="line"><span class="keyword">private</span> Integer maxPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>步骤二：修改search方法，在match查询基础上添加过滤条件</strong><br>过滤条件包括：</li></ol><ul><li>city精确匹配</li><li>brand精确匹配</li><li>starName精确匹配</li><li>price范围过滤<br>注意事项：</li><li>多个条件之间是AND关系，组合多条件用BooleanQuery</li><li>参数存在才需要过滤，做好非空判断</li></ul><h2 id="案例3：我附近的酒店"><a href="#案例3：我附近的酒店" class="headerlink" title="案例3：我附近的酒店"></a>案例3：我附近的酒店<br></h2><p>前端页面点击后，会将你所在位置发送到后台：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051501431.png" alt="[Pasted image 20231024173047.png]"><br>我们要根据这个坐标，将酒店结果按照到这个点的距离升序排序<br>实现思路如下：</p><ul><li>修改RequestParams参数，接收location字段</li><li>修改search方法业务逻辑，如果location有值，添加根据geo_distance排序的功能</li></ul><h3 id="距离排序"><a href="#距离排序" class="headerlink" title="距离排序"></a><strong>距离排序</strong><br></h3><p>距离排序与普通排序有所差异，API如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//价格排序</span></span><br><span class="line">request.source().sort(<span class="string">&quot;price&quot;</span>,SortOrder.ASC);</span><br><span class="line"><span class="comment">//距离排序</span></span><br><span class="line">request.source().sort(SortBuilders</span><br><span class="line">.geoDistanceSort(<span class="string">&quot;location&quot;</span>,<span class="keyword">new</span> <span class="title class_">GeoPoint</span>(<span class="string">&quot;31.21,121.5&quot;</span>))</span><br><span class="line">.order(SortOrder.ASC)</span><br><span class="line">.unit(DistanceUnit.KILOMETERS)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="案例4：让指定的酒店在搜索结果中排名置顶"><a href="#案例4：让指定的酒店在搜索结果中排名置顶" class="headerlink" title="案例4：让指定的酒店在搜索结果中排名置顶"></a>案例4：让指定的酒店在搜索结果中排名置顶<br></h2><p>我们给需要置顶的酒店文档添加标记。然后利用function score给带有标记的文档增加权重<br>实现步骤分析：</p><ol><li>给HotelDoc类添加isAD字段，Boolean类型</li><li>挑选几个你喜欢的酒店，给它的文档数据添加isAD字段，值为true</li><li>修改search方法，添加function score功能，给isAD值为true的酒店增加权重</li></ol><h3 id="组合查询-function-score"><a href="#组合查询-function-score" class="headerlink" title="组合查询-function score"></a><strong>组合查询-function score</strong></h3><p>Function Score查询可以控制文档的相关性算分，使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQueryBuilder</span> <span class="operator">=</span> </span><br><span class="line">QueryBuilders.functionScoreQuery(</span><br><span class="line">QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;外滩&quot;</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>,<span class="string">&quot;如家&quot;</span>),</span><br><span class="line">ScoreFunctionBuilders.weightFactorFunction(<span class="number">5</span>)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">sourceBuilder.query(functionScoreQueryBuilder);</span><br></pre></td></tr></table></figure><h1 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合<br></h1><h2 id="聚合的分类"><a href="#聚合的分类" class="headerlink" title="聚合的分类"></a>聚合的分类<br></h2><p>聚合（aggregations）可以实现对文档数据的统计、分析、运算。聚合常见的有三类：</p><ul><li>桶（Bucket）聚合：用来对文档做分组<ul><li>TermAggregation：按照文档字段值分组</li><li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li></ul></li><li>度量（Metric）聚合：用以计算一些值，比如：最大值、最小值、平均值等<ul><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stans：同时求max、min、avg、sum等</li></ul></li><li>管道（pipeline）聚合：其它聚合的结果为基础做聚合</li></ul><h2 id="DSL实现Bucket聚合"><a href="#DSL实现Bucket聚合" class="headerlink" title="DSL实现Bucket聚合"></a>DSL实现Bucket聚合<br></h2><p>现在，我们要统计所有数据中的酒店品牌有几种，此时可以根据酒店品牌的名称做聚合。<br>类型为term类型，DSL示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>  <span class="comment">//设置size为0，结果中不包含文档,只包含聚合结果</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//定义聚合</span></span><br><span class="line">    <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//给聚合起个名字</span></span><br><span class="line">    <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//聚合的类型，按照品牌值聚合，所以选择term</span></span><br><span class="line">    <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span> <span class="comment">//参与聚合的字段</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span> <span class="comment">//希望获取的聚合结果数量</span></span><br><span class="line">      </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Bucket聚合-聚合结果排序"><a href="#Bucket聚合-聚合结果排序" class="headerlink" title="Bucket聚合-聚合结果排序"></a>Bucket聚合-聚合结果排序<br></h2><p>默认情况下，Bucket聚合会统计Bucket内的文档数量，记为_count，并且按照_count降序排序。<br>我们可以修改结果排序方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span> <span class="comment">//按照_count升序排序</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Bucket聚合-限定聚合范围"><a href="#Bucket聚合-限定聚合范围" class="headerlink" title="Bucket聚合-限定聚合范围"></a>Bucket聚合-限定聚合范围<br></h2><p>默认情况下，Bucket聚合是对索引库的所有文档做聚合，我们可以限定要聚合的文档范围，只要添加query条件即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">200</span> <span class="comment">//只对200元以下的文档聚合</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="DSL实现Metrics聚合"><a href="#DSL实现Metrics聚合" class="headerlink" title="DSL实现Metrics聚合"></a>DSL实现Metrics聚合<br></h2><p>例如，我们要求获取每个品牌的用户评分的min、max、avg等值<br>我们可以利用stats聚合：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//是brands聚合的子聚合，也就是分组后对每组分别计算</span></span><br><span class="line">        <span class="attr">&quot;score_stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//聚合名称</span></span><br><span class="line">          <span class="attr">&quot;stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//聚合类型，这里stats可以计算min、max、avg等</span></span><br><span class="line">         <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;score&quot;</span> <span class="comment">//聚合字段，这里是score   </span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span>   </span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RestAPi实现聚合"><a href="#RestAPi实现聚合" class="headerlink" title="RestAPi实现聚合"></a>RestAPi实现聚合<br></h2><p>我们以品牌聚合为例，演示下Java的RestClient使用，先看请求组装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.source().size(<span class="number">0</span>);</span><br><span class="line">request.source().aggregation(</span><br><span class="line">AggregationBuilders</span><br><span class="line">.terms(<span class="string">&quot;brand_agg&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">.size(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>再看下聚合结果解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析聚合结果  </span></span><br><span class="line"><span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> search.getAggregations();  </span><br><span class="line"><span class="comment">//根据名称获取聚合结果  </span></span><br><span class="line"><span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;brandAgg&quot;</span>);  </span><br><span class="line"><span class="comment">//获取桶  </span></span><br><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();  </span><br><span class="line"><span class="comment">//遍历  </span></span><br><span class="line"><span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;  </span><br><span class="line">    <span class="comment">//获取key，也就是品牌信息  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> bucket.getKeyAsString();  </span><br><span class="line">    System.out.println(brandName);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例：在IUservice中定义方法，实现对品牌、城市、星级的聚合"><a href="#案例：在IUservice中定义方法，实现对品牌、城市、星级的聚合" class="headerlink" title="案例：在IUservice中定义方法，实现对品牌、城市、星级的聚合"></a>案例：在IUservice中定义方法，实现对品牌、城市、星级的聚合<br></h2><p>需求：搜索页面的品牌、城市等信息不应该是在页面写死，而是通过聚合索引库中的酒店数据得来的：<br>在IUservice中定义一个方法，实现对品牌、城市、星级的聚合，方法声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">filter</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="对接前端接口"><a href="#对接前端接口" class="headerlink" title="对接前端接口"></a>对接前端接口<br></h2><p>前端页面会向服务端发起请求，查询品牌、城市、星级等字段的聚合结果：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051501803.png" alt="[Pasted image 20231025160138.png]"><br>可以看到请求参数与之前search时的RequestParam完全一致，这是在限定聚合时的文档范围。<br>例如：用户搜索”外滩“，价格在300~600，那聚合必须是在这个搜索条件基础上完成。<br>因此我们需要：</p><ol><li>编写controller接口，接收该请求</li><li>修改IUserService#getFilters()方法，添加RequestParam参数</li><li>修改getFilters方法的业务，聚合时添加query条件</li></ol><h1 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全<br></h1><h2 id="自动补全需求说明"><a href="#自动补全需求说明" class="headerlink" title="自动补全需求说明"></a>自动补全需求说明<br></h2><p>当用户在搜索框输入字符时，我们应该提示出与该字符有关的搜索项，如图：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051501057.png" alt="[Pasted image 20231025164202.png]"></p><h2 id="使用拼音分词"><a href="#使用拼音分词" class="headerlink" title="使用拼音分词"></a>使用拼音分词<br></h2><p>要实现根据字母做补全，就必须对文档按照拼音分词。在GitHub上恰好有elasticsearch的拼音分词插件。地址：(<a href="https://github.com/medcl/elasticsearch-analysis-pinyin">https://github.com/medcl/elasticsearch-analysis-pinyin</a>)<br>安装方式与IK分词器一样，分三步：</p><ol><li>解压</li><li>上传到虚拟机中，elasticsearch的plugin目录</li><li>重启elasticsearch</li><li>测试<br>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;如家酒店还不错&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span> <span class="comment">//拼音分词器</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器<br></h2><p>elasticsearch中分词器（analyzer）的组成包含三部分：</p><ul><li>character filters：在tokenizer之前对文本进行处理。例如删除字符、替换字符</li><li>tokenizer：将文本按照一定的规则切割成词条（term）。例如keyword，就是不分次；还有ik_smart</li><li>tokenizer filter：将tokenizer输出的词条做进一步处理。例如大小写转换、同义词处理、拼音处理等<br>我们可以在创建索引库时，通过settings来配置自定义的analyzer（分词器）：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//自定义分词器</span></span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//分词器名称</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//自定义分词器</span></span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//分词器名称</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//自定义tokenizer filter</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//过滤器名称</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span> <span class="comment">//过滤器类型，这里是pinyin</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chiness_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>拼音分词器适合在创建倒排索引的时候使用，但不能在搜索的时候使用。<br>创建倒排索引时：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051502882.png" alt="[Pasted image 20231026092538.png]"><br>搜索时，用户搜索“狮子”：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051502247.png" alt="[Pasted image 20231026092606.png]"><br>因此字段在创建倒排索引时应该用my_analyzer分词器；字段在搜索时应该使用ik_smart分词器；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//自定义分词器</span></span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//分词器名称</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//自定义tokenizer filter</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> ... <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_analyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="completion-suggester查询"><a href="#completion-suggester查询" class="headerlink" title="completion suggester查询"></a>completion suggester查询<br></h2><p>elasticsearch提供了Completion Suggester查询来实现自动补全功能。这个查询会匹配以用户输入内容开头的词条并返回。为了提高补全查询的效率，对于文档中字段的类型有一些约束：</p><ul><li>参与补全查询的字段必须是completion类型。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建索引库</span></span><br><span class="line">PUT test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>字段的内容一般是用来补全的多个词条组成的数组<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例数据</span></span><br><span class="line">POST test/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;Sony&quot;</span><span class="punctuation">,</span><span class="string">&quot;WH-1000XM3&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST test/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;SK-II&quot;</span><span class="punctuation">,</span><span class="string">&quot;PITERA&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST test/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;Nintendo&quot;</span><span class="punctuation">,</span><span class="string">&quot;switch&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>查询语法如下：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /test/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title_suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s&quot;</span><span class="punctuation">,</span> <span class="comment">// 关键字</span></span><br><span class="line">      <span class="attr">&quot;completion&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span> <span class="comment">//补全查询的字段</span></span><br><span class="line">        <span class="attr">&quot;skip_duplicates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 跳过重复的</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span> <span class="comment">//获取前10条结果</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="案例：实现hotel索引库的自动补全、拼音搜索功能"><a href="#案例：实现hotel索引库的自动补全、拼音搜索功能" class="headerlink" title="案例：实现hotel索引库的自动补全、拼音搜索功能"></a>案例：实现hotel索引库的自动补全、拼音搜索功能<br></h2><p>实现思路如下：</p><ol><li>修改hotel索引库结构，设置自定义拼音分词器</li><li>修改索引库的name、all字段，使用自定义分词器</li><li>索引库添加一个新字段suggestion，类型为completion类型，使用自定义的分词器</li><li>给HotelDoc类添加suggestion字段，内容包含brand、business</li><li>重新导入数据到hotel库</li></ol><h2 id="RestAPI实现自动补全"><a href="#RestAPI实现自动补全" class="headerlink" title="RestAPI实现自动补全"></a>RestAPI实现自动补全<br></h2><p>先看请求参数的构造API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.准备请求</span></span><br><span class="line"><span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"><span class="comment">//2.请求参数</span></span><br><span class="line">request.source()</span><br><span class="line">.suggest(<span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>().addSuggestion(</span><br><span class="line"><span class="string">&quot;mySuggestion&quot;</span>,</span><br><span class="line">SuggestBuilders</span><br><span class="line">.completionSuggestion(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">.prefix(<span class="string">&quot;h&quot;</span>)</span><br><span class="line">.skipDuplicates(<span class="literal">true</span>)</span><br><span class="line">.size(<span class="number">10</span>)</span><br><span class="line">));</span><br><span class="line"><span class="comment">//3.发送请求</span></span><br><span class="line">client.search(request,RequestOptions.DEFAULT);</span><br></pre></td></tr></table></figure><p>对应:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;suggestions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;h&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;completion&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;suggestion&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skip_duplicates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再来看结果解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.处理结果</span></span><br><span class="line"><span class="type">Suggest</span> <span class="variable">suggest</span> <span class="operator">=</span> response.getSuggest();</span><br><span class="line"><span class="comment">//4.1.根据名称获取补全结果</span></span><br><span class="line"><span class="type">CompletionSuggestion</span> <span class="variable">suggestion</span> <span class="operator">=</span> suggest.getSuggestion(<span class="string">&quot;hotelSuggestion&quot;</span>);</span><br><span class="line"><span class="comment">//4.2.获取options并遍历</span></span><br><span class="line"><span class="keyword">for</span>(CompletionSuggestion.Entry.Option option : suggestion.getOptions())&#123;</span><br><span class="line"><span class="comment">//4.3.获取一个option中的text，也就是补全的词条</span></span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> option.getText().string();</span><br><span class="line">System.out.println(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现酒店搜索页面输入框的自动补全"><a href="#实现酒店搜索页面输入框的自动补全" class="headerlink" title="实现酒店搜索页面输入框的自动补全"></a>实现酒店搜索页面输入框的自动补全<br></h2><p>查看前端页面，可以发现当我们在输入框键入时，前端会发起ajax请求：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051503713.png" alt="[Pasted image 20231030091238.png]"><br>在服务端编写接口，接收该请求，返回补全结果的集合，类型为LIst&lt;string&gt;</p><h1 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步<br></h1><h2 id="数据同步问题分析"><a href="#数据同步问题分析" class="headerlink" title="数据同步问题分析"></a>数据同步问题分析<br></h2><p>elasticsearch中的酒店数据来自于mysql数据库，因此mysql数据发生改变时，elasticearch也必须发生改变，这个就是elasticearch与mysql之间的数据同步</p><p>在微服务中，负责酒店管理（操作mysql）的业务与负责酒店搜索（操作elasticsearch）的业务可能在两个不同的微服务上，数据同步该如何实现呢？<br>方案一：同步调用</p><ul><li>优点：实现简单，粗暴</li><li>缺点：业务耦合度高<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051503801.png" alt="[Pasted image 20231030093438.png]"><br>方案二：异步通知</li><li>优点：低耦合，实现难度一般</li><li>缺点：依赖mq的可靠性<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051503502.png" alt="[Pasted image 20231030093851.png]"><br>方案三：监听binlog</li><li>优点：完全解除服务间耦合</li><li>缺点：开启binlog增加数据库负担、实现复杂度高<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051503771.png" alt="[Pasted image 20231030093940.png]"></li></ul><h2 id="利用MQ实现mysql与elasticearch数据同步"><a href="#利用MQ实现mysql与elasticearch数据同步" class="headerlink" title="利用MQ实现mysql与elasticearch数据同步"></a>利用MQ实现mysql与elasticearch数据同步<br></h2><p>利用课前资料提供的hotel-admin项目作为酒店管理的微服务。当酒店数据发生增、删、改时，要求对elasticsearch中数据也要完成相同操作。<br>步骤：</p><ul><li>导入课前资料提供的hotel-admin项目，启动并测试酒店数据的CRUD</li><li>声明exchange、queue、RoutingKey</li><li>在hotel-admin中的增、删、改业务中完成消息发送</li><li>在hotel-demo中完成消息监听，并更新elasticsearch中数据</li><li>启动并测试数据同步功能</li></ul><h1 id="elasticsearch集群"><a href="#elasticsearch集群" class="headerlink" title="elasticsearch集群"></a>elasticsearch集群<br></h1><h2 id="ES集群结构"><a href="#ES集群结构" class="headerlink" title="ES集群结构"></a>ES集群结构<br></h2><p>单击的elasticserch做数据存储，必然面临两个问题：海量数据存储问题、单点故障问题。</p><ul><li>海量数据存储问题：将索引库从逻辑上拆分为N个分片（shard），存储到多个节点<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051503832.png" alt="[Pasted image 20231030154015.png]"></li><li>单点故障问题：将分片数据在不同节点备份（replica）<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051503149.png" alt="[Pasted image 20231030154323.png]"></li></ul><h2 id="搭建ES集群"><a href="#搭建ES集群" class="headerlink" title="搭建ES集群"></a>搭建ES集群<br></h2><p>我们计划利用3个docker容器模拟3个es的节点。具体步骤参考elasticsearch第一天课程的课前资料：<br><a href="%E5%AE%89%E8%A3%85elasticsearch">[安装elasticsearch]</a></p><h2 id="ES集群的节点角色"><a href="#ES集群的节点角色" class="headerlink" title="ES集群的节点角色"></a>ES集群的节点角色<br></h2><p>elasticsearch中集群节点有不同的职责划分：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051504664.png" alt="[Pasted image 20231031084716.png]"><br>elasticsearch中的每个节点角色都有不同的职责，因此建议集群部署时，每个节点都有独立的角色。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051504692.png" alt="[Pasted image 20231031090955.png]"></p><h2 id="ES集群的脑裂"><a href="#ES集群的脑裂" class="headerlink" title="ES集群的脑裂"></a>ES集群的脑裂<br></h2><p>默认情况下，每个节点都是master eligible节点，因此一旦master节点宕机，其他候选节点会选举一个成为主节点。当主节点与其他节点网络故障时，可能发生脑裂问题。<br>为了避免脑裂，需要要求选票超过(eligible节点数量+1)&#x2F;2才能当选为主，因此eligible节点数量最好是奇数。对应配置项是discovery.zen.minimum_master_nodes，在es7.0以后，已经成为默认配置，因此一般不会发生脑裂问题<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051504742.png" alt="[Pasted image 20231031091948.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051505924.png" alt="[Pasted image 20231031091652.png]"></p><h2 id="ES集群的分布式存储"><a href="#ES集群的分布式存储" class="headerlink" title="ES集群的分布式存储"></a>ES集群的分布式存储<br></h2><p>当新增文档时，应该保存到不同分片，保证数据均衡，那么coordinating node如何确定数据该存储到哪个分片呢？<br>elasticsearch会通过hash算法来计算文档应该存储到哪个分片：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051505945.png" alt="[Pasted image 20231031104133.png]"><br>说明：</p><ul><li>_routing默认是文档的id</li><li>算法与分片数量有关，因此索引库一旦创建，分片数量不能修改！<br>新增文档流程：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051505846.png" alt="[Pasted image 20231031111704.png]"><br>elasticsearch的查询分成两个阶段：</li><li>scatter phase：分散阶段，coordinating node会把请求分发到每一个切片</li><li>gather phase：聚集阶段，coordinating node汇总data node的搜索结果，并处理为最终结果集返回给用户<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051505903.png" alt="[Pasted image 20231031112206.png]"></li></ul><h2 id="ES集群的故障转移"><a href="#ES集群的故障转移" class="headerlink" title="ES集群的故障转移"></a>ES集群的故障转移<br></h2><p>集群的master节点会监控集群中的节点状态，如果发现有节点宕机，会立即将宕机节点的分片数据迁移到其他节点，确保数据安全，这个叫做故障转移。</p><h1 id="初始Sentinel"><a href="#初始Sentinel" class="headerlink" title="初始Sentinel"></a>初始Sentinel<br></h1><h2 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题<br></h2><p>微服务调用链路中的某个服务故障，引起整个链路中的所有微服务都不可用，这就是雪崩<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051505419.png" alt="[Pasted image 20231031141724.png]"><br>解决雪崩问题的常见方式有四种：</p><ul><li>超时处理：设定超过时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051505766.png" alt="[Pasted image 20231031141923.png]"></li><li>舱壁模式：限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051505350.png" alt="[Pasted image 20231031142252.png]"></li><li>熔断降级模式：由断路器统计业务执行的异常比例，如果超过阈值则会熔断该业务，拦截访问该业务的一切请求<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051506316.png" alt="[Pasted image 20231031142614.png]"></li><li>流量控制：限制业务访问的QPS，避免服务因流量的突增而故障<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051506640.png" alt="[Pasted image 20231031142831.png]"></li></ul><h2 id="服务保护技术对比"><a href="#服务保护技术对比" class="headerlink" title="服务保护技术对比"></a>服务保护技术对比<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051506449.png" alt="[Pasted image 20231031143324.png]"></p><h2 id="认识Sentinel"><a href="#认识Sentinel" class="headerlink" title="认识Sentinel"></a>认识Sentinel<br></h2><p>Sentinel是阿里巴巴开源的一款微服务流量控制组件。官网地址：(<a href="http://sentinelguard.io/zh-cn/index.html">http://sentinelguard.io/zh-cn/index.html</a>)<br>Sentinel具有以下特征：</p><ul><li>丰富的应用场景：Sentinel承接了阿里巴巴近10年的双十一大促场景的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等</li><li>完备的实时监控：Sentinel同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至500台以下规模的集群的汇总运行情况。</li><li>广泛的开源生态：Sentinel提供开箱即用的与其它开源框架&#x2F;库的整合模块,例如与Spring Cloud、Dobbo、gRPC的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入Sentinel</li><li>完善的SPI扩展点：Sentinel提供简单易用、完善的SPI扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等</li></ul><h2 id="安装Sentinel控制台"><a href="#安装Sentinel控制台" class="headerlink" title="安装Sentinel控制台"></a>安装Sentinel控制台<br></h2><p>sentinel官方提供了UI控制台，方便我们对系统做限流设置。大家可以在GitHub下载。课前资料提供了下载好的jar包：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051506756.png" alt="[Pasted image 20231031150131.png]"></p><ol><li>将其拷贝到一个你能记住的非中文目录，然后运行命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure></li><li>然后访问：localhost:8080即可看到控制台页面，默认的账户和密码都是sentinel</li></ol><ul><li><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051506045.png" alt="[Pasted image 20231031151239.png]"><br>如果要修改Sentinel的默认端口、账户、密码，可以通过下列配置：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051506275.png" alt="[Pasted image 20231031151606.png]"><br>举例说明：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.1.jar -Dserver.port=8090</span><br></pre></td></tr></table></figure></li></ul><h2 id="引入cloud-demo"><a href="#引入cloud-demo" class="headerlink" title="引入cloud-demo"></a>引入cloud-demo<br></h2><p>要使用Sentinel肯定要结合微服务，这里我们使用SpringCloud实用篇中的cloud-demo工程。没有的小伙伴可以在课前资料中找到：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051506152.png" alt="[Pasted image 20231031152117.png]"><br>项目结构如下：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051506833.png" alt="[Pasted image 20231031152137.png]"></p><h2 id="微服务整合Sentinel"><a href="#微服务整合Sentinel" class="headerlink" title="微服务整合Sentinel"></a>微服务整合Sentinel<br></h2><p>我们在order-service中整合Sentinel，并且连接Sentinel的控制台，步骤如下：</p><ol><li>引入sentinel依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sentinel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置控制台地址：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure></li><li>访问微服务的任意端点，触发sentinel监控</li></ol><h1 id="限流规则"><a href="#限流规则" class="headerlink" title="限流规则"></a>限流规则<br></h1><h2 id="簇点链路"><a href="#簇点链路" class="headerlink" title="簇点链路"></a>簇点链路<br></h2><p>簇点链路：就是项目内的调用链路，链路中被监控的每个接口就是一个资源。默认情况下sentinel会监控SpringMVC的每一个端点(Endpoint)，<br>因此SpringMVC的每一个端点（Endpoint）就是调用链路中的一个资源<br>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051507527.png" alt="[Pasted image 20231031155557.png]"></p><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门<br></h2><p>点击资源&#x2F;order&#x2F;{orderId}后面的流控按钮，就可以弹出表单。表单中可以添加流控规则，如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051507247.png" alt="[Pasted image 20231031160002.png]"><br>其含义是限制&#x2F;order&#x2F;{orderId}这个资源的单击QPS为1，即每秒只允许1次请求，超出的请求会被拦截并报错。</p><h2 id="流控规则入门案例"><a href="#流控规则入门案例" class="headerlink" title="流控规则入门案例"></a>流控规则入门案例<br></h2><p>需求：给&#x2F;order&#x2F;{orderId}这个资源设置流控规则，QPS不能超过5。然后利用jemeter测试</p><ol><li>设置流控规则：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051507158.png" alt="[Pasted image 20231031161410.png]"></li><li>jemeter测试：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051507585.png" alt="[Pasted image 20231031161432.png]"></li></ol><h2 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式<br></h2><p>在添加限流规则时，点击高级选项，可以选择三种流控模式：</p><ul><li>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</li><li>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li><li>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051507564.png" alt="[Pasted image 20231031161902.png]"></li></ul><h2 id="流控模式-关联"><a href="#流控模式-关联" class="headerlink" title="流控模式-关联"></a>流控模式-关联<br></h2><ul><li>关联模式：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li><li>使用场景：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是有限支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051507744.png" alt="[Pasted image 20231031162600.png]"><br>当&#x2F;write资源访问量触发阈值时，就会对&#x2F;read资源限流，避免影响&#x2F;write资源</li></ul><h2 id="案例-流控模式-关联"><a href="#案例-流控模式-关联" class="headerlink" title="案例-流控模式-关联"></a>案例-流控模式-关联<br></h2><p>需求：</p><ul><li>在OrderController新建两个端点：&#x2F;order&#x2F;query和&#x2F;order.update，无序实现业务</li><li>配置流控规则，当&#x2F;order&#x2F;update资源被访问的QPS超过5时，对&#x2F;order&#x2F;query请求限流<br>小结：<br>满足下面条件可以使用关联模式：<ul><li>两个有竞争关系的资源</li><li>一个优先级较高，一个优先级较低</li></ul></li></ul><h2 id="流控模式-链路"><a href="#流控模式-链路" class="headerlink" title="流控模式-链路"></a>流控模式-链路<br></h2><p>链路模式：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值<br>例如有两条请求链路：</p><ul><li>&#x2F;test1 -&gt; &#x2F;common</li><li>&#x2F;test2 -&gt; &#x2F;common<br>如果只希望统计从&#x2F;test2进入到&#x2F;common的请求，则可以这样配置：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051508163.png" alt="[Pasted image 20231031163902.png]"></li></ul><h2 id="案例-流控模式-链路"><a href="#案例-流控模式-链路" class="headerlink" title="案例-流控模式-链路"></a>案例-流控模式-链路<br></h2><p>需求：有查询订单和创建订单业务，两者都需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流<br>步骤：</p><ol><li>在OrderService中添加一个queryGoods方法，不用实现业务</li><li>在OrderController中，改造&#x2F;order&#x2F;query端点，调用OrderService中的queryGoods方法</li><li>在OrderController中添加一个&#x2F;order&#x2F;save的端点，调用OrderService的queryGoods方法</li><li>给queryGoods设置限流规则，从&#x2F;order&#x2F;query进入queryGoods的方法限制QPS必须小于2</li></ol><ul><li>Sentinel默认只标记Controller中的方法为资源，如果要标记其他方法，需要利用@SentinelResource注解，示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryGoods</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Sentinel默认会将Controller方法做context整合，导致链路模式的流控失效，需要修改application.yml，添加配置:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭context整合</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果<br></h2><p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：</p><ul><li>快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式</li><li>warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值</li><li>排队等待：让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051508132.png" alt="[Pasted image 20231031170426.png]"></li></ul><h2 id="流控效果-warm-up"><a href="#流控效果-warm-up" class="headerlink" title="流控效果-warm up"></a>流控效果-warm up<br></h2><p>warm up也叫预热模式，是应对服务冷启动的一种方案。请求阈值初始值是threshold&#x2F; coldFactor，持续指定时长后，逐渐提高到threshold值。而coldFactor的默认值是3<br>例如，我设置QPS的threshold为10，预热时间为5秒，那么初始阈值就是10&#x2F;3，也就是3，然后在5秒后逐渐增长到10<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051508590.png" alt="[Pasted image 20231031171135.png]"></p><h2 id="流控效果-排队等待"><a href="#流控效果-排队等待" class="headerlink" title="流控效果-排队等待"></a>流控效果-排队等待<br></h2><p>当请求超过QPS阈值时，快速失败和warm up会拒绝新的请求并抛出异常。而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝<br>例如：QPS&#x3D;5，意味着每200ms处理一个队列中的请求；timeout&#x3D;2000，意味着预期等待超过2000ms的请求会被拒绝并抛出异常<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051508115.png" alt="[Pasted image 20231031172315.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051509647.png" alt="[Pasted image 20231031172336.png]"></p><h2 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流<br></h2><p>之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。而热点参数限流是分别统计参数值相同的请求，判断是否超过QPS阈值<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051509076.png" alt="[Pasted image 20231031173040.png]"><br>配置示例：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051509371.png" alt="[Pasted image 20231031173105.png]"><br>代表的含义是：对hot这个资源的0号参数（第一个参数)做统计，每1秒相同参数值的请求数不能超过5<br>在热点参数限流的高级选项中，可以对部分参数设置例外配置：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051509625.png" alt="[Pasted image 20231031173349.png]"><br>结合上一个配置，这里的含义是对0号的long类型参数限流，每1秒相同参数额的QPS不能超过5，有两个例外：</p><ul><li>如果参数值是100，则每1秒允许的QPS为10</li><li>如果参数值是101，则每1秒允许的QPS为15</li></ul><h1 id="隔离和降级"><a href="#隔离和降级" class="headerlink" title="隔离和降级"></a>隔离和降级<br></h1><p>虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其他原因而故障。而要将这些故障控制在一定范围，避免雪崩，就要靠线程隔离（舱壁模式）和熔断降级手段了<br>不管是线程隔离还是熔断降级，都是对<strong>客户端（调用方）</strong> 的保护<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051509295.png" alt="[Pasted image 20231101083846.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051509593.png" alt="[Pasted image 20231101083941.png]"></p><h2 id="Feign整合Sentinel"><a href="#Feign整合Sentinel" class="headerlink" title="Feign整合Sentinel"></a>Feign整合Sentinel<br></h2><p>SpringCloud中，微服务调用都是通过Feign来实现的，因此做客户端保护必须整合Feign和Sentinel</p><ol><li>修改OrderService的application.yml文件，开启Feign的Sentinel功能<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的Sentinel功能</span></span><br></pre></td></tr></table></figure></li><li>给FeignClient编写失败后的降级逻辑<ol><li>方式一：FallbackClass，无法对远程调用的异常做处理</li><li>方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种<br> 步骤一：在feign-api项目中定义类，实现FallbackFactory：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;UserClient&gt;&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserClient <span class="title function_">create</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">  <span class="comment">//创建UserClient接口实现类，实现其中的方法，编写失败降级的处理逻辑</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClient</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">      <span class="comment">//记录异常信息</span></span><br><span class="line">      <span class="type">long</span>.error(<span class="string">&quot;查询用户失败&quot;</span>,throwable);</span><br><span class="line">      <span class="comment">//根据业务需求返回默认的数据，这里是空用户</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤二：在feign-api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserClientFallbackFactory <span class="title function_">userClientFallback</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClientFallbackFactory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>步骤三：在feign-api项目中的UserClient接口中使用UserClientFallbackFactory：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;,fallbackFactory = UserClientFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span>&#123;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="线程隔离"><a href="#线程隔离" class="headerlink" title="线程隔离"></a>线程隔离<br></h2><p>线程隔离有两种方式实现：</p><ul><li>线程池隔离</li><li>信号量隔离（Sentinel默认采用）<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051509768.png" alt="[Pasted image 20231101092513.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051509143.png" alt="[Pasted image 20231101092916.png]"></li></ul><h2 id="线程隔离-舱壁模式"><a href="#线程隔离-舱壁模式" class="headerlink" title="线程隔离(舱壁模式)"></a>线程隔离(舱壁模式)<br></h2><p>在添加限流规则时，可以选择两种阈值类型：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051509995.png" alt="[Pasted image 20231101093034.png]"></p><ul><li>QPS：就是每秒的请求数，在快速入门已经演示过</li><li>线程数：是该资源能使用用的tomcat线程数的最大数。也就是通过限制线程数量，实现舱壁模式</li></ul><h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级<br></h2><p>熔断降级是解决雪崩问题的重要手段。其思路是由断路器统计服务调用的异常比例、慢请求比例，如果超出阈值则会熔断该服务。即拦截访问呢该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求</p><h2 id="熔断降级-慢调用"><a href="#熔断降级-慢调用" class="headerlink" title="熔断降级-慢调用"></a>熔断降级-慢调用<br></h2><p>断路器熔断策略有三种：慢调用、异常比例、异常数</p><ul><li>慢调用：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。例如：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051510716.png" alt="[Pasted image 20231101094238.png]"><br>解读：RT超过500ms的调用是慢调用，统计最近10000ms内的请求，如果请求量超过10次，并且慢调用比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，方形一次请求做测试</li></ul><h2 id="熔断策略-异常比例、异常数"><a href="#熔断策略-异常比例、异常数" class="headerlink" title="熔断策略-异常比例、异常数"></a>熔断策略-异常比例、异常数<br></h2><p>断路器熔断策略有三种：慢调用、异常比例或异常数</p><ul><li>异常比例或异常数：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。例如：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051510386.png" alt="[Pasted image 20231101095223.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051510481.png" alt="[Pasted image 20231101095436.png]"><br>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。</li></ul><h1 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则<br></h1><h2 id="授权规则-1"><a href="#授权规则-1" class="headerlink" title="授权规则"></a>授权规则<br></h2><p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式</p><ul><li>白名单：来源（origin）在白名单内的调用者允许访问</li><li>黑名单：来源（origin）在黑名单内的调用者不允许访问<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051510143.png" alt="[Pasted image 20231101100507.png]"><br>例如，我们限定只允许从网关来的请求访问order-service，那么流控应用中就填写网关的名称<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051510969.png" alt="[Pasted image 20231101100605.png]"><br>Sentinel是通过RequestOriginParser这个接口的parseOrigin来获取请求的来源的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RequestOriginParser</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从请求request对象中获取origin，获取方式自定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>例如，我们尝试从request中获取一个名为origin的请求头，作为origin的值：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderOriginParser</span> <span class="keyword">implements</span> <span class="title class_">RequestOriginParser</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;origin&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(origin))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;blank&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> origin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们还需要在gateway服务中，利用网关的过滤器添加名为gateway的origin头：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=origin,gateway</span> <span class="comment"># 添加名为origin的请求头，值为gateway </span></span><br></pre></td></tr></table></figure>给&#x2F;order&#x2F;{orderId}配置授权规则：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051510719.png" alt="[Pasted image 20231101102129.png]"></li></ul><h2 id="自定义异常结果"><a href="#自定义异常结果" class="headerlink" title="自定义异常结果"></a>自定义异常结果<br></h2><p>默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。如果要自定义异常时的返回结果，需要实现BlockExceptionHandler接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlockExceptionHandler</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理请求被限流、降级，授权拦截时抛出的异常：BlockException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request,HttpServletResponse response,BlockException e)</span><span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而BlockException包含很多个子类，分别对应不同的场景：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051510226.png" alt="[Pasted image 20231101105753.png]"><br>我们在order-service中定义类，实现BlockExceptionHandler接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">BlockExceptionHandler</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;未知异常&quot;</span>;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">429</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException) &#123;  </span><br><span class="line">            msg = <span class="string">&quot;请求被限流了&quot;</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamFlowException) &#123;  </span><br><span class="line">            msg = <span class="string">&quot;请求被热点参数限流&quot;</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException) &#123;  </span><br><span class="line">            msg = <span class="string">&quot;请求被降级了&quot;</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorityException) &#123;  </span><br><span class="line">            msg = <span class="string">&quot;没有权限访问&quot;</span>;  </span><br><span class="line">            status = <span class="number">401</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);  </span><br><span class="line">        response.setStatus(status);  </span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&#123;\&quot;msg\&quot;: &quot;</span> + msg + <span class="string">&quot;, \&quot;status\&quot;: &quot;</span> + status + <span class="string">&quot;&#125;&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化<br></h1><h2 id="规则管理模式"><a href="#规则管理模式" class="headerlink" title="规则管理模式"></a>规则管理模式<br></h2><p>Sentinel的控制台规则管理有三种模式：</p><ul><li>原始模式：Sentinel的默认模式，将规则保存在内存，重启服务会丢失</li><li>pull模式</li><li>push模式</li></ul><h2 id="规则管理模式-pull模式"><a href="#规则管理模式-pull模式" class="headerlink" title="规则管理模式-pull模式"></a>规则管理模式-pull模式<br></h2><p>pull模式：控制台将配置的规则推送到Sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051511289.png" alt="[Pasted image 20231101140540.png]"></p><h2 id="规则管理模式-push模式"><a href="#规则管理模式-push模式" class="headerlink" title="规则管理模式-push模式"></a>规则管理模式-push模式<br></h2><p>push模式：控制台将配置规则推送到远程配置中心，例如Nacos。Sentinel客户端监听Nacos，获取配置变更的推送消息，完成本地配置更新<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051511894.png" alt="[Pasted image 20231101140918.png]"></p><h2 id="实现push模式"><a href="#实现push模式" class="headerlink" title="实现push模式"></a>实现push模式<br></h2><p>push模式实现最为复杂，依赖于nacos，并且需要修改Sentinel控制台源码<br>详细步骤可以参考课前资料的[[sentinel规则持久化]]</p><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务<br></h1><h2 id="事务的ACID原则"><a href="#事务的ACID原则" class="headerlink" title="事务的ACID原则"></a>事务的ACID原则<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051511200.png" alt="[Pasted image 20231101142537.png]"></p><h2 id="分布式服务案例"><a href="#分布式服务案例" class="headerlink" title="分布式服务案例"></a>分布式服务案例<br></h2><p>微服务下单业务，在下单时会调用订单服务，创建订单并写入数据库。然后订单服务调用账户服务和库存服务：</p><ul><li>账户服务负责扣减用户余额</li><li>库存服务负责扣减商品库存<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051511573.png" alt="[Pasted image 20231101142834.png]"></li></ul><h2 id="分布式服务的事务问题"><a href="#分布式服务的事务问题" class="headerlink" title="分布式服务的事务问题"></a>分布式服务的事务问题<br></h2><p>在分布式系统下，一个业务跨越多个服务或数据源，每个服务都是一个分支事务，要保证所有分支事务最终状态一直，这样的事务就是分布式事务<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051511714.png" alt="[Pasted image 20231101145459.png]"></p><h1 id="分布式服务理论基础"><a href="#分布式服务理论基础" class="headerlink" title="分布式服务理论基础"></a>分布式服务理论基础<br></h1><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理<br></h2><p>1998年，加州大学的计算机科学家Eric Brewer提出，分布式系统有三个指标：</p><ul><li>Consistency（一致性）</li><li>Availability（可用性）</li><li>Partition tolerance（分区容错性）<br>Eric Brewer说，分布式系统无法同时满足这三个指标。<br>这个结论叫做CAP定理<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051511629.png" alt="[Pasted image 20231101151431.png]"></li></ul><h2 id="CAP定理-Consistency"><a href="#CAP定理-Consistency" class="headerlink" title="CAP定理-Consistency"></a>CAP定理-Consistency<br></h2><p>Consistency（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051511215.png" alt="[Pasted image 20231101151640.png]"></p><h2 id="CAP定理-Availability"><a href="#CAP定理-Availability" class="headerlink" title="CAP定理-Availability"></a>CAP定理-Availability<br></h2><p>Availability（可用性）：用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051512757.png" alt="[Pasted image 20231101151949.png]"></p><h2 id="CAP定理-Partition-tolerance"><a href="#CAP定理-Partition-tolerance" class="headerlink" title="CAP定理-Partition tolerance"></a>CAP定理-Partition tolerance<br></h2><p>Partition（分区）：因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区<br>Tolerance（容错）：在集群出现分区时，整个系统也要持续对外提供服务<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051512845.png" alt="[Pasted image 20231101152256.png]"></p><h2 id="CAP总结"><a href="#CAP总结" class="headerlink" title="CAP总结"></a>CAP总结<br></h2><p>简述CAP定理内容？</p><ul><li>分布式系统节点通过网络连接，一定会出现分区问题（P）</li><li>当分区出现时，系统的一致性（C）和可用性（A）就无法同时满足<br>思考：elasticsearch集群是CP还是AP？</li><li>ES集群出现分区时，故障节点会被剔除集群，数据分片会重新分配到其他节点，保证数据一致。因此是低可用性，高一致性，属于CP</li></ul><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论<br></h2><p>BASE理论是对CAP的一种解决思路，包含三个思想：</p><ul><li>Basically Avaliable（基本可用）：分布式系统在出现故障时，允许损失部分可用性，既保证核心可用</li><li>Soft State（软状态）：在一定时间内，允许出现中间状态，比如临时的不一致状态</li><li>Eventually Consistent（最终一致性）：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致<br>而分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论：</li><li>AP模式：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致</li><li>CP模式：各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务等待过程中，处于弱可用状态</li></ul><h2 id="分布式事务模型"><a href="#分布式事务模型" class="headerlink" title="分布式事务模型"></a>分布式事务模型<br></h2><p>解决分布式事务，各个子系统之间必须能感知到彼此的事务状态，才能保证状态一致，因此需要一个事务协调者来协调每一个事务的参与者（子系统事务）<br>这里的子系统事务，称为分支事务；有关联的各个分支事务在一起称为全局事务<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051512454.png" alt="[Pasted image 20231101161538.png]"></p><h1 id="初识Seata"><a href="#初识Seata" class="headerlink" title="初识Seata"></a>初识Seata<br></h1><p>Seata是2019年1月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。致力于提供高性能和简单易用的分布式事务服务，为用户打造一站式的分布式解决方案<br>官网地址：(<a href="http://seata.io/)%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84%E6%96%87%E6%A1%A3%E3%80%81%E6%92%AD%E5%AE%A2%E4%B8%AD%E6%8F%90%E4%BE%9B%E4%BA%86%E5%A4%A7%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E3%80%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">http://seata.io/)，其中的文档、播客中提供了大量的使用说明、源码分析</a></p><h2 id="Seata架构"><a href="#Seata架构" class="headerlink" title="Seata架构"></a>Seata架构<br></h2><p>Seata事务管理中有三个重要的角色：</p><ul><li>TC（Transaction Coordinator）- 事务协调者：维护全局和分支事务的状态，协调全局事务提交或回滚</li><li>TM（Transaction Manager）- 事务管理者：定义全局事务的范围、开始全局事务、提交或回滚全局事务</li><li>RM（Resource Manager）- 资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚<br>![[Pasted image 20231102083542.png]]</li></ul><h2 id="初识Seata-1"><a href="#初识Seata-1" class="headerlink" title="初识Seata"></a>初识Seata<br></h2><p>Seata提供了四种不同的分布式事务解决方案：</p><ul><li>XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li><li>TCC模式：最终一直的分阶段事务模式，有业务侵入</li><li>AT模式：最终一直的分阶段事务模式，无业务侵入，也是Seata的默认模式</li><li>SAGA模式：长事务模式，有业务侵入</li></ul><h2 id="部署TC服务"><a href="#部署TC服务" class="headerlink" title="部署TC服务"></a>部署TC服务<br></h2><p>参考课前资料提供的文档[[seata的部署和集成]]</p><h2 id="微服务集成Seata"><a href="#微服务集成Seata" class="headerlink" title="微服务集成Seata"></a>微服务集成Seata<br></h2><ol><li>首先，引入seata相关依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--seata--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>        <span class="comment">&lt;!--版本较低,1.3.0，因此排除--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>然后，配置application.yml，让微服务通过注册中心找到seata-tc-server：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span>  </span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址  </span></span><br><span class="line">    <span class="comment"># 参考tc服务自己的registry.conf中的配置  </span></span><br><span class="line">    <span class="comment"># 包括：地址、namespace、group、application-name、cluster  </span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span>  </span><br><span class="line">    <span class="attr">nacos:</span> <span class="comment"># tc  </span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>  </span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span>  </span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span>  </span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span> <span class="comment"># tc服务在nacos中的服务名称  </span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span>  </span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span>  </span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组，根据这个获取tc服务的cluster名称  </span></span><br><span class="line">  <span class="attr">service:</span>  </span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与TC服务cluster的映射关系  </span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="动手实践"><a href="#动手实践" class="headerlink" title="动手实践"></a>动手实践<br></h1><h2 id="XA模式原理"><a href="#XA模式原理" class="headerlink" title="XA模式原理"></a>XA模式原理<br></h2><p>XA规范是 x&#x2F;Open组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA规范描述了全局的TM与局部的RM之前的接口，几乎所有主流的数据库都对XA规范提供了支持<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051512864.png" alt="[Pasted image 20231102100552.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051512958.png" alt="[Pasted image 20231102100635.png]"></p><h2 id="seata的XA模式"><a href="#seata的XA模式" class="headerlink" title="seata的XA模式"></a>seata的XA模式<br></h2><p>seata的XA模式做了一些调整，但大体相似：<br>RM一阶段的工作：</p><ol><li>注册分支事务到TC</li><li>执行分支事务sql但不提交</li><li>报告执行状态到TC<br>TC二阶段的工作：</li></ol><ul><li>TC检测各分支事务执行状态<ul><li>如果都失败，通知所有RM提交事务</li><li>如果有失败，通知所有RM回滚事务<br>  RM二阶段的工作：</li></ul></li><li>接收TC指令，提交或回滚事务<br>![[Pasted image 20231102101010.png]]</li></ul><h2 id="实现XA模式"><a href="#实现XA模式" class="headerlink" title="实现XA模式"></a>实现XA模式<br></h2><p>Seata的starter已经完成了XA模式的自动装配，实现非常简单，步骤如下：</p><ol><li>修改application.yml文件（每个参与事务的微服务），开启XA模式：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span> <span class="comment"># 开启数据源代理的XA模式</span></span><br></pre></td></tr></table></figure></li><li>给发起全局事务的入口方法添加@GlobalTransactional注解，本例中是OrderServiceImpl中的create方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@GlobalTransactional</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">create</span><span class="params">(Order order)</span>&#123;</span><br><span class="line"><span class="comment">//创建订单</span></span><br><span class="line">orderMapper.insert(order);</span><br><span class="line"><span class="comment">//扣余额 ...略</span></span><br><span class="line"><span class="comment">//扣减库存 ...略</span></span><br><span class="line"><span class="keyword">return</span> order.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重启服务并测试</li></ol><h2 id="AT模式原理"><a href="#AT模式原理" class="headerlink" title="AT模式原理"></a>AT模式原理<br></h2><p>AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷<br>阶段一RM的工作：</p><ul><li>记录分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态<br>阶段二提交时RM的工作：</li><li>删除undo-log即可<br>阶段二回滚时RM的工作：</li><li>根据undo-log恢复数据到更新前<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051512950.png" alt="[Pasted image 20231102103856.png]"><br>例如，一个分支业务的SQL是这样的：update tb_account set money &#x3D; money - 10 where id &#x3D; 1<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051512177.png" alt="[Pasted image 20231102104301.png]"><br>总结：<br>简述AT模式与XA模式最大的区别是什么？</li><li>XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源</li><li>XA模式以来数据库机制实现回滚；AT模式利用数据快照实现数据回滚</li><li>XA模式情义值；AT模式最终一致</li></ul><h2 id="AT模式的脏写问题"><a href="#AT模式的脏写问题" class="headerlink" title="AT模式的脏写问题"></a>AT模式的脏写问题<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051513602.png" alt="[Pasted image 20231102105008.png]"></p><h2 id="AT模式的写隔离"><a href="#AT模式的写隔离" class="headerlink" title="AT模式的写隔离"></a>AT模式的写隔离<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051513638.png" alt="[Pasted image 20231102105313.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051513552.png" alt="[Pasted image 20231102105655.png]"></p><h2 id="AT模式的优缺点"><a href="#AT模式的优缺点" class="headerlink" title="AT模式的优缺点"></a>AT模式的优缺点<br></h2><p>AT模式的优点:</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能比较好</li><li>利用全局锁实现读写隔离</li><li>没有代码侵入，框架自动完成回滚和提交<br>AT模式的缺点：</li><li>两阶段之间属于软状态，属于最终一致</li><li>框架的快照功能回影响性能，但比XA模式要好很多</li></ul><h2 id="实现AT模式"><a href="#实现AT模式" class="headerlink" title="实现AT模式"></a>实现AT模式<br></h2><p>AT模式中的快照生成、回滚等动作都是由框架自动完成，没有任何代码侵入，因此实现非常简单</p><ol><li>导入课前资料提供的Sql文件：seata-at.sql，其中lock_table导入到TC服务关联的数据库，undo_log表导入到微服务关联的数据库:</li><li>修改application.yml文件，将事务模式修改为AT模式即可:<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">AT</span> <span class="comment"># 开启数据源代理的AT模式</span></span><br></pre></td></tr></table></figure></li><li>重启服务并测试</li></ol><h2 id="TCC模式原理"><a href="#TCC模式原理" class="headerlink" title="TCC模式原理"></a>TCC模式原理<br></h2><p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p><ul><li>Try：资源的检测和预留；</li><li>Confirm：完成资源操作业务；要求Try成功Confirm一定要能成功</li><li>Cancel：预留资源释放，可以理解为try的反向操作<br>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需求余额扣减30元</li><li>阶段一（Try）：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051513507.png" alt="[Pasted image 20231102112601.png]"></li><li>阶段二：加入要提交（Confirm），则冻结金额扣减30<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051513152.png" alt="[Pasted image 20231102112612.png]"></li><li>阶段二：如果要回滚（Cancel），则冻结金额扣减30，可用余额增加30<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051513764.png" alt="[Pasted image 20231102112619.png]"><br>TCC的工作模型图：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051513913.png" alt="[Pasted image 20231102112850.png]"><br>总结：<br>TCC模式的每个阶段是做什么的？</li><li>Try：资源检查和预留</li><li>Confirm：业务执行和提交</li><li>Cancel：预留资源的释放<br>TCC的优点是什么？</li><li>一阶段完成直接提交事务，释放数据库资源，性能好</li><li>相比AT模型，无需生成快照，无需使用全局锁，性能最强</li><li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库<br>TCC的缺点是什么？</li><li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li><li>软状态，事务是最终一致</li><li>需要考虑Confirm和Cancel的失败情况，做好幂等处理</li></ul><h2 id="TCC的空回滚和业务悬挂"><a href="#TCC的空回滚和业务悬挂" class="headerlink" title="TCC的空回滚和业务悬挂"></a>TCC的空回滚和业务悬挂<br></h2><p>当某分支事务的try阶段阻塞时，可能导致全局事务而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是空回滚。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051513310.png" alt="[Pasted image 20231102114713.png]"><br>对于已经空回滚的业务，如果以后继续执行try，就永远不可能confirm或cancel，这就是业务悬挂。应当阻止执行空回滚后的try操作，避免悬挂</p><h2 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a>业务分析<br></h2><p>为了实现空回滚、防止业务悬挂，以及幂等性要求。我们必须在数据库记录冻结金额的同时，记录当前事务id和执行状态，为此我们设计了一张表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#x27;account_freeze_tbl&#x27;(</span><br><span class="line">  &#x27;xid&#x27; varchar(128) NOT NULL,</span><br><span class="line">  &#x27;user_id&#x27;varchar(255) DEFAULT NULL COMMENT &#x27;用户id&#x27;,</span><br><span class="line">  &#x27;freeze_money&#x27; int(11) unsigned DEFAULT &#x27;0&#x27; COMMENT &#x27;冻结金额&#x27;,</span><br><span class="line">  &#x27;state&#x27; int(1) DEFAULT NULL COMMENT &#x27;事务状态,0:try,1:confirm,2:cancel&#x27;,</span><br><span class="line">  PRIMARY KEY(&#x27;xid&#x27;) USING BTREE </span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;</span><br></pre></td></tr></table></figure><p>Try业务:</p><ul><li>记录冻结金额和事务状态到account_freeze表</li><li>扣减account表可用金融<br>Confirm业务：</li><li>根据xid删除account_freeze表的冻结记录<br>Cancel业务：</li><li>修改account_freeze表，冻结金额为0，state为2</li><li>修改account表，恢复可用金额<br>如何判断是否空回滚：</li><li>cancel业务中，根据xid查询account_freeze，如果为null则说明try还没做，需要空回滚<br>如何避免业务悬挂：</li><li>try业务中，根据xid查询account_freeze，如果已经存在则证明Cancel已经执行，拒绝执行try业务</li></ul><h2 id="声明TCC接口"><a href="#声明TCC接口" class="headerlink" title="声明TCC接口"></a>声明TCC接口<br></h2><p>TCC的Try、Confirm、Cancel方法都需要在接口中基于注解来声明，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TCCService</span>&#123;</span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> *  Try逻辑，<span class="doctag">@TwoPhaseBusinessAction</span>中的name属性要与当前方法名一致，用于指定Try逻辑对应的方法  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId 用户id  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> money 金额  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@TwoPhaseBusinessAction(name = &quot;deduct&quot;,commitMethod = &quot;confirm&quot;,rollbackMethod = &quot;cancel&quot;)</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(<span class="meta">@BusinessActionContextParameter(paramName = &quot;userId&quot;)</span> String userId,  </span></span><br><span class="line"><span class="params">            <span class="meta">@BusinessActionContextParameter(paramName = &quot;money&quot;)</span> <span class="type">int</span> money)</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 二阶段confirm确认方法，可以另命名，但要保证与commitMethod一致  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context 上下文，可以传递try方法的参数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean 执行是否成功  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="type">boolean</span> <span class="title function_">confirm</span><span class="params">(BusinessActionContext context)</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 二阶段回滚方法，要保证与rollbackMethod一致  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context 上下文，可以传递try方法的参数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean 执行是否成功  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(BusinessActionContext context)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Saga模式"><a href="#Saga模式" class="headerlink" title="Saga模式"></a>Saga模式<br></h2><p>Saga模式是SEATA提供的长事务解决方案。也分为两个阶段：</p><ul><li>一阶段：直接提交本地事务</li><li>二阶段：成功则什么都不做；失败则通过编写补偿业务来回滚<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051514124.png" alt="[Pasted image 20231102151514.png]"><br>Saga模式优点：</li><li>事务参与者可以基于事件驱动实现异步调用，吞吐高</li><li>一阶段直接提交事务，无锁，性能好</li><li>不用编写TCC中的三个阶段，实现简单<br>缺点：</li><li>软状态持续时间不确定，时效性差</li><li>没有锁，没有事务隔离，会有脏写</li></ul><h2 id="四种模式对比"><a href="#四种模式对比" class="headerlink" title="四种模式对比"></a>四种模式对比<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051514199.png" alt="[Pasted image 20231102152039.png]"></p><h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用<br></h1><h2 id="TC的异地多机房容灾架构"><a href="#TC的异地多机房容灾架构" class="headerlink" title="TC的异地多机房容灾架构"></a>TC的异地多机房容灾架构<br></h2><p>TC服务作为Seata的核心服务，一定要保证高可用和异地容灾。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051515286.png" alt="[Pasted image 20231102152905.png]"><br>具体实现请参考<a href="seata%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E9%9B%86%E6%88%90">[seata的部署和集成]</a></p><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化<br></h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB<br></h2><p>RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。<br>快照文件被称为RDB文件，默认是保存在当前运行目录。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051515271.png" alt="[Pasted image 20231103090039.png]"><br>Redis停机时会执行一次RDB。<br>首先需要在Linux系统中安装一个Redis，如果尚未安装的同学，可以参考[[Redis集群]]<br>Redis内部有触发RDB的机制，可以在redis.conf文件中找到，格式如下：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051515845.png" alt="[Pasted image 20231103093930.png]"><br>RDB的其他配置也可以在redis.conf文件中设置:<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051515696.png" alt="[Pasted image 20231103094032.png]"><br>bgsave开始时会fork主进程得到子进程,子进程共享主进程的内存数据.完成fork后读取内存数据并写入RDB文件。<br>fork采用的是copy-on-write技术：</p><ul><li>当主进程执行读操作时，访问共享内存；</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作<br>![[Pasted image 20231103102410.png]]<br>总结：<br>RDB方式bgsave的基本流程？</li><li>fork主进程得到一个子进程，共享内存空间</li><li>子进程读取内存数据并写入新的RDB文件</li><li>用新RDB文件替换旧的RDB文件<br>RDB会在什么时候执行？save 60 1000代表什么含义？</li><li>默认是服务停止时。</li><li>代表60秒内至少执行1000次修改则触发RDB<br>RDB的缺点？</li><li>RDB执行间隔时间长，两次RDB之间写入数据有丢失的风险</li><li>fork子进程、压缩、写出RED文件都比较耗时</li></ul><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF<br></h2><p>AOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051515346.png" alt="[Pasted image 20231103104057.png]"><br>AOF默认是关闭的，需要修改redis.conf配置文件来开启AOF：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051515091.png" alt="[Pasted image 20231103104422.png]"><br>AOP的命令记录的频率也可以通过redis.conf文件来配:<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051516635.png" alt="[Pasted image 20231103104526.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051516198.png" alt="[Pasted image 20231103105212.png]"><br>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录会对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行<strong>bgrewriteaof</strong>命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051516008.png" alt="[Pasted image 20231103113103.png]"><br>Redis也会在触发阈值时自动去重写AOF文件。阈值也可以在redis.conf中配置：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051516592.png" alt="[Pasted image 20231103113204.png]"><br>RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会结合两者来使用<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051516651.png" alt="[Pasted image 20231103113936.png]"></p><h1 id="Redis主从"><a href="#Redis主从" class="headerlink" title="Redis主从"></a>Redis主从<br></h1><h2 id="搭建主从架构"><a href="#搭建主从架构" class="headerlink" title="搭建主从架构"></a>搭建主从架构<br></h2><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051516039.png" alt="[Pasted image 20231103115733.png]"><br>具体搭建流程参考[[Redis集群]]</p><h2 id="数据同步原理"><a href="#数据同步原理" class="headerlink" title="数据同步原理"></a>数据同步原理<br></h2><p>主从第一次同步是全量同步：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051516704.png" alt="[Pasted image 20231103154205.png]"><br>master如何判断slave是不是第一次来同步数据？这里会用到两个很重要的概念：</p><ul><li>Replication id：简称replid，是数据集的标记，id一直则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</li><li>offset：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051516447.png" alt="[Pasted image 20231103162029.png]"><br>主从第一次同步是全量同步，但如果slave重启后同步，则执行增量同步<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051517354.png" alt="[Pasted image 20231103164254.png]"><br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051517275.png" alt="[Pasted image 20231103164317.png]"><br>可以从以下几个方面来优化Redis主从就集群：</li><li>在master中配置repl-diskless-sync yes启用无磁盘复制，避免全量同步时的磁盘IO</li><li>Redis单节点上的内存占用不要太大，减少RDB导致的过都磁盘IO</li><li>适当提高repl_backlog的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个master上的slave节点数量，如果实在是太多slave，则可以采用主-从-从链式结构，减少master压力<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051517291.png" alt="[Pasted image 20231103170314.png]"></li></ul><h1 id="Redis哨兵"><a href="#Redis哨兵" class="headerlink" title="Redis哨兵"></a>Redis哨兵<br></h1><h2 id="哨兵的作用"><a href="#哨兵的作用" class="headerlink" title="哨兵的作用"></a>哨兵的作用<br></h2><p>Redis提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。哨兵的结构和作用如下：</p><ul><li>监控：Sentinel会不断检查你的master和slave是否按预期工作</li><li>自动故障恢复：如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主</li><li>通知：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051517609.png" alt="[Pasted image 20231104083630.png]"></li></ul><h2 id="服务状态监控"><a href="#服务状态监控" class="headerlink" title="服务状态监控"></a>服务状态监控<br></h2><p>Sentinel基于心跳机制检测服务状态，每隔1秒向集群的每个实例发送ping命令：</p><ul><li>主观下线：如果某sentinel节点发现某实例未在规定时间响应，则认为该实例主观下线</li><li>客观下线：若超过指定数量（quorum）的sentinel都认为该实例主观下线，则该实例客观下线。quorum值最好超过Sentinel实例数量的一半<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051517466.png" alt="[Pasted image 20231104084244.png]"></li></ul><h2 id="选举新的master"><a href="#选举新的master" class="headerlink" title="选举新的master"></a>选举新的master<br></h2><p>一旦发现master故障，sentinel需要在salve中选择一个作为新的master，选择依据是这样的：</p><ul><li>首先会判断salve节点与master节点断开时间长短，如果超过指定值（down-after-milliseconds*10）则会排除该slave节点</li><li>然后判断slave节点的slave-priority，越小优先级越高，如果是0则永不参与选举</li><li>如果slave-prority一样，则判断slave节点的offset值，越大说明数据越新，优先级越高</li><li>最后是判断slave节点的运行id大小，越小优先级越高</li></ul><h2 id="如何实现故障转移"><a href="#如何实现故障转移" class="headerlink" title="如何实现故障转移"></a>如何实现故障转移<br></h2><p>当选中了其中一个slave为新的master后（例如slave1），故障的转移的步骤如下：</p><ul><li>sentinel给备选的slave1节点发送slaveof no one命令，让该节点成为master</li><li>sentinel给所有其它slave发送slaveof 192.168.140.131 7002命令，让这些slave成为新master的从节点，开始从新的master上同步数据</li><li>最后，sentinel将故障节点标记为slave，当故障节点恢复后会自动成为新的master的slave节点<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051517688.png" alt="[Pasted image 20231104085831.png]"></li></ul><h2 id="搭建哨兵架构"><a href="#搭建哨兵架构" class="headerlink" title="搭建哨兵架构"></a>搭建哨兵架构<br></h2><p>具体搭建流程参考<a href="Redis%E9%9B%86%E7%BE%A4">[Redis集群]</a></p><h2 id="RedisTemplate的哨兵模式"><a href="#RedisTemplate的哨兵模式" class="headerlink" title="RedisTemplate的哨兵模式"></a>RedisTemplate的哨兵模式<br></h2><p>在Sentinel集群监管下的Redis主从集群，其节点会因为自动故障转移而发生变化，Redis的客户端必须感知这种变化，及时更新连接信息。Spring的RedisTemplate底层利用lettuce实现了节点的感知和自动切换<br>首先，引入课前资料提供的Demo工程：redis-demo</p><ol><li>在pom文件中引入redis的starter依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>然后在配置文件application.yml中指定sentinel相关信息：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">redis:</span>  </span><br><span class="line">    <span class="attr">sentinel:</span>  </span><br><span class="line">      <span class="attr">master:</span> <span class="string">mymaster</span> <span class="comment"># 指定master名称  </span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="comment"># 指定redis-sentinel集群信息  </span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:27001</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:27002</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:27003</span></span><br></pre></td></tr></table></figure></li><li>配置主从读写分离<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="keyword">public</span> LettuceClientConfigurationBuilderCustomizer <span class="title function_">clientConfigurationBuilderCustomizer</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> clientConfigurationBuilder -&gt; clientConfigurationBuilder.readFrom(ReadFrom.REPLICA_PREFERRED);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里的ReadFrom是配置Redis的读取策略，是一个枚举，包括下面选择：</li></ol><ul><li>MASTER：从主节点读取</li><li>MASTER_PREFERRED：优先从master节点读取，master不可用才读取replica</li><li>REPLICA：从slave（replica）节点读取</li><li>REPLICA_PREFERRED：优先从slave(replica)节点读取，所有的slave都不可用才读取master</li></ul><h1 id="Redis分片集群"><a href="#Redis分片集群" class="headerlink" title="Redis分片集群"></a>Redis分片集群<br></h1><h2 id="分片集群结构"><a href="#分片集群结构" class="headerlink" title="分片集群结构"></a>分片集群结构<br></h2><p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p><ul><li>海量数据存储问题</li><li>高并发写的问题<br>使用分片集群可以解决上述问题，分片集群特征：</li><li>集群中有多个master，每个master保存不同数据</li><li>每个master都可以有多个slave节点</li><li>master之间通过ping监测彼此健康状态</li><li>客户端请求可以访问集群任意节点，最终都会被转发到正确节点<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051518930.png" alt="[Pasted image 20231104101128.png]"></li></ul><h2 id="搭建分片集群"><a href="#搭建分片集群" class="headerlink" title="搭建分片集群"></a>搭建分片集群<br></h2><p>具体搭建流程参考<a href="Redis%E9%9B%86%E7%BE%A4">[Redis集群]</a></p><h2 id="散列插槽"><a href="#散列插槽" class="headerlink" title="散列插槽"></a>散列插槽<br></h2><p>Redis会把每一个master节点映射到0~16383共16384个插槽（hash slot）上，查看集群信息时就能看到：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051521885.png" alt="[Pasted image 20231104102453.png]"></p><p>数据key不是与节点绑定，而是与插槽绑定。redis会根据key的有效部分计算插槽值，分两种情况：</p><ul><li>key中包含”{}”，且”{}”中至少包含1个字符，”{}”中的部分是有效部分</li><li>key中不包含”{}”，整个key都是有效部分<br>例如：key是num，那么就根据num计算，如果是{itcast}num，则根据itcast计算。计算方式是利用CRC16算法得到一个hash值，然后对16384取余，得到的结果就是slot值。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051521490.png" alt="[Pasted image 20231104103640.png]"></li></ul><h2 id="添加一个节点到集群"><a href="#添加一个节点到集群" class="headerlink" title="添加一个节点到集群"></a>添加一个节点到集群<br></h2><p>redis-cli –cluster提供了很多操作集群的命令，可以通过下面方式查看：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051521253.png" alt="[Pasted image 20231104104219.png]"><br>比如，添加节点的命令：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051521390.png" alt="[Pasted image 20231104104245.png]"></p><h2 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移<br></h2><p>当集群中有一个master宕机会发生什么呢？</p><ol><li>首先是该实例与其它实例失去连接</li><li>然后是疑似宕机<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051521997.png" alt="[Pasted image 20231104141707.png]"></li><li>最后是确定下线，自动提升一个slave为新的master：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051522888.png" alt="[Pasted image 20231104141756.png]"></li></ol><h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移<br></h2><p>利用cluster failover命令可以手动让集群中的某个master宕机，切换到执行cluster failover命令的这个slave节点，实现无感知的数据迁移。其流程如下：<br>手动的Failover支持三种不同模式：</p><ul><li>缺省：默认的流程，如图1~6步</li><li>force：省略了对offset的一致性校验</li><li>takeover：直接执行第5步，忽略数据一致性、忽略master状态和其它master的意见</li></ul><h2 id="RedisTemplate访问分片集群"><a href="#RedisTemplate访问分片集群" class="headerlink" title="RedisTemplate访问分片集群"></a>RedisTemplate访问分片集群<br></h2><p>RedisTemplate底层同样基于lettuce实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：</p><ol><li>引入redis的starter依赖</li><li>配置分片集群地址</li><li>配置读写分离<br>与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">redis:</span>  </span><br><span class="line">    <span class="attr">cluster:</span>    </span><br><span class="line">      <span class="attr">nodes:</span> <span class="comment"># 指定分片集群的每一个节点信息  </span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:7001</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:7002</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:7003</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:8001</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:8002</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:8003</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存<br></h1><h2 id="传统缓存的问题"><a href="#传统缓存的问题" class="headerlink" title="传统缓存的问题"></a>传统缓存的问题<br></h2><p>传统的缓存策略一般是请求到达Tomcat后，先查询Redis，如果未命中则查询数据库，存在下面的问题：</p><ul><li>请求要经过Tomcat处理，Tomcat的性能成为整个系统的瓶颈</li><li>Redis缓存失效时，会对数据库产生冲击<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051522945.png" alt="[Pasted image 20231104145400.png]"></li></ul><h2 id="多级缓存方案"><a href="#多级缓存方案" class="headerlink" title="多级缓存方案"></a>多级缓存方案<br></h2><p>多级缓存就是充分利用请求处理的每个环节，分贝添加缓存，减轻Tomcat压力，提升服务性能：<br>![[Pasted image 20231104145648.png]](Pasted image 20231104145648.png)<br>用作缓存的Nginx是业务Nginx，需要部署为集群，再有专门的Nginx用来做反向代理：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051522796.png" alt="[Pasted image 20231104150742.png]"></p><h1 id="JVM进程缓存"><a href="#JVM进程缓存" class="headerlink" title="JVM进程缓存"></a>JVM进程缓存<br></h1><h2 id="导入商品案例"><a href="#导入商品案例" class="headerlink" title="导入商品案例"></a>导入商品案例<br></h2><p>参考课前资料提供的文档来导入案例:[[案例导入说明]]</p><h2 id="本地进程缓存"><a href="#本地进程缓存" class="headerlink" title="本地进程缓存"></a>本地进程缓存<br></h2><p>缓存在日常开发中启动至关重要的作用，由于是存储在内存中，数据的读取速度是非常快的，能大量减少对数据库的访问，减少数据库的压力。我们把缓存分为两类：</p><ul><li>分布式缓存，例如Redis：<ul><li>优点：存储容量更大、可靠性更好、可以在集群间共享</li><li>缺点：访问缓存有网络开销</li><li>场景：缓存数据量较大、可靠性要求较高、需要在集群间共享</li></ul></li><li>进程本地缓存，例如HashMap、GuavaCache：<ul><li>优点：读取本地内存，没有网络开销，速度更快</li><li>缺点：存储容量有限、可靠性较低、无法共享</li><li>场景：性能要求较高，缓存数据量较小<br>  Caffeine是一个基于Java8开发的，提供了近乎最佳命中率的高性能的本地缓存库。目前Spring内部的缓存使用的就是Caffrine。GitHub地址：(<a href="https://github.com/ben-manes/caffrine">https://github.com/ben-manes/caffrine</a>)<br>  <img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051522951.png" alt="[Pasted image 20231104163349.png]"></li></ul></li></ul><h2 id="Caffeine示例"><a href="#Caffeine示例" class="headerlink" title="Caffeine示例"></a>Caffeine示例<br></h2><p>可以通过item-service项目中的单元测试来学习Caffeine的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBasicOps</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//创建缓存对象</span></span><br><span class="line">Cache&lt;String, String&gt; cache = Caffeine.newBuilder().build();</span><br><span class="line"><span class="comment">//存数据</span></span><br><span class="line">cache.put(<span class="string">&quot;gf&quot;</span>，<span class="string">&quot;迪丽热巴&quot;</span>);</span><br><span class="line"><span class="comment">//取数据，不存在则返回null</span></span><br><span class="line"><span class="type">String</span> <span class="variable">gf</span> <span class="operator">=</span> cache.getIfPresent(<span class="string">&quot;gf&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;gf=&quot;</span> + gf);</span><br><span class="line"><span class="comment">//取数据，不存在则去数据库查询</span></span><br><span class="line"><span class="type">String</span> <span class="variable">defaultGF</span> <span class="operator">=</span> cache.get(<span class="string">&quot;defaultGF&quot;</span>,key -&gt; &#123;</span><br><span class="line"><span class="comment">//这里可以去数据库根据 key查询value</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;柳岩&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;defaultGF =&quot;</span> + defaultGF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Caffeine提供了三种缓存驱逐策略：</p><ul><li>基于容量：设置缓存的数量上限<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建混存对象</span></span><br><span class="line">Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">.maximumSize(<span class="number">1</span>) <span class="comment">// 设置缓存大小上限为1</span></span><br><span class="line">.build();</span><br></pre></td></tr></table></figure></li><li>基于时间：设置缓存的有效时间<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建缓存对象</span></span><br><span class="line">Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line"><span class="comment">//设置缓存有效期为 10 秒，从最后一次写入开始计时</span></span><br><span class="line">.expireAfterWrite(Duration.ofSeconds(<span class="number">10</span>))</span><br><span class="line">.builder();</span><br></pre></td></tr></table></figure></li><li>基于引用：设置缓存为软引用或弱引用，利用GC来回收缓存数据。性能较差，不建议使用。<br>在默认情况下，当一个缓存元素过期的时候。Caffeine不会自动立即将其清理和驱逐。而是在一次读或写操作后，或者在空闲时间完成对失效数据的驱逐</li></ul><h1 id="Lua语法入门"><a href="#Lua语法入门" class="headerlink" title="Lua语法入门"></a>Lua语法入门<br></h1><h2 id="初始Lua"><a href="#初始Lua" class="headerlink" title="初始Lua"></a>初始Lua<br></h2><p>Lua是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放，其设计目的就是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。官网：(<a href="https://www.lua.org/">https://www.lua.org/</a>)<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051523609.png" alt="[Pasted image 20231105084319.png]"></p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld<br></h2><ol><li>在linux虚拟机的任意目录下，新建一个hello.lua文件<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> hello.lua</span><br></pre></td></tr></table></figure></li><li>添加下面的内容<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>运行<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua hello.lua</span><br></pre></td></tr></table></figure></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051523141.png" alt="[Pasted image 20231105085132.png]"><br>可以利用type函数测试给定变量或者值的类型：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;Hello World&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量<br></h2><p>Lua声明变量的时候，并不需要指定数据类型：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 声明字符串</span></span><br><span class="line"><span class="keyword">local</span> str = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">-- 声明数字</span></span><br><span class="line"><span class="keyword">local</span> num = <span class="number">21</span></span><br><span class="line"><span class="comment">-- 声明布尔类型</span></span><br><span class="line"><span class="keyword">local</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="comment">-- 声明数组 key为索引的 table</span></span><br><span class="line"><span class="keyword">local</span> arr = &#123;<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;lua&#x27;</span>&#125;</span><br><span class="line"><span class="comment">-- 声明table，类似java的map</span></span><br><span class="line"><span class="keyword">local</span> map = &#123;name=<span class="string">&#x27;Jack&#x27;</span>,age=<span class="number">21</span>&#125;</span><br></pre></td></tr></table></figure><p>访问table：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 访问数组，lua数组的角标从1开始</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>])</span><br><span class="line"><span class="comment">-- 访问table</span></span><br><span class="line"><span class="built_in">print</span>(map[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(map.name)</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环<br></h2><p>数组、table都可以利用for循环来遍历：</p><ul><li>遍历数组：<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 声明数组 key为索引的 table</span></span><br><span class="line"><span class="keyword">local</span> arr = &#123;<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;lua&#x27;</span>&#125;</span><br><span class="line"><span class="comment">-- 遍历数据</span></span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">ipairs</span>(arr) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(index,value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li>遍历table：<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 声明map，也就是table</span></span><br><span class="line"><span class="keyword">local</span> map = &#123;name=<span class="string">&#x27;Jack&#x27;</span>,age=<span class="number">21</span>&#125;</span><br><span class="line"><span class="comment">-- 遍历table</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> <span class="built_in">pairs</span>(map) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(key,value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数<br></h2><p>定义函数的语法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名<span class="params">(argument1, argument2..., argumentn)</span></span></span><br><span class="line"><span class="comment">-- 函数体</span></span><br><span class="line"><span class="keyword">return</span> 返回值</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>例如，定义一个函数，用来打印数组：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printArr</span><span class="params">(arr)</span></span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(arr) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制<br></h2><p>类似Java的条件控制，例如if、else语法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="comment">-- [布尔表达式为 true 时执行该语句块]</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">-- [布尔表达式为 false 时执行该语句块]</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>与java不同，布尔表达式中的逻辑运算是基于英文单词：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051523417.png" alt="[Pasted image 20231105092924.png]"></p><h1 id="多级缓存-1"><a href="#多级缓存-1" class="headerlink" title="多级缓存"></a>多级缓存<br></h1><h2 id="初识OpenResty"><a href="#初识OpenResty" class="headerlink" title="初识OpenResty"></a>初识OpenResty<br></h2><p>OpenResty是一个基于Nginx的高性能Web平台，用来方便地搭建能够处理超高并发、扩展性极高的动态Web应用、Web服务和动态网关。具备下列特点：</p><ul><li>具备Nginx的完整功能</li><li>基于Lua语言进行扩展，集成了大量精良的Lua库、第三方模块</li><li>允许Lua自定义业务逻辑、自定义库<br>官方网站：(<a href="https://openresty.org/cn/">https://openresty.org/cn/</a>)<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051523441.png" alt="[Pasted image 20231105093633.png]"><br>安装OpenResty可以参考[[安装OpenResty]]</li></ul><h2 id="案例：OpenResty快速入门，实现商品详情页数据查询"><a href="#案例：OpenResty快速入门，实现商品详情页数据查询" class="headerlink" title="案例：OpenResty快速入门，实现商品详情页数据查询"></a>案例：OpenResty快速入门，实现商品详情页数据查询<br></h2><p>商品详情页面目前展示的是假数据，在浏览器的控制台可以看到查询商品信息的请求：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051523544.png" alt="[Pasted image 20231105095257.png]"><br>而这个请求最终被反向代理到虚拟机的OpenResty集群：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051524815.png" alt="[Pasted image 20231105095334.png]"><br>需求：在OpenResty中接收这个请求，并返回一段商品的假数据。</p><h2 id="步骤一：修改nginx-conf文件"><a href="#步骤一：修改nginx-conf文件" class="headerlink" title="步骤一：修改nginx.conf文件"></a>步骤一：修改nginx.conf文件<br></h2><ol><li>在nginx.conf的http下面，添加对OpenResty的Lua模块的加载：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载lua 模块</span></span><br><span class="line"><span class="attribute">lua_package_path</span> <span class="string">&quot;/usr/local/openresty/lualib/?.lua;;&quot;</span>;</span><br><span class="line"><span class="comment"># 加载c模块</span></span><br><span class="line"><span class="attribute">lua_package_cpath</span> <span class="string">&quot;/usr/local/openresty/lualib/?.so;;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>在nginx.conf的server下面，添加对&#x2F;api&#x2F;item这个路径的监听：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /api/item</span><br><span class="line"><span class="comment"># 响应类型，这里返回json</span></span><br><span class="line">default_type application/json;</span><br><span class="line"><span class="comment"># 响应数据由 lua/item.lua这个文件来决定</span></span><br><span class="line"><span class="attribute">content_by_lua_file</span> lua/item.lua;</span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤二：编写item-lua文件"><a href="#步骤二：编写item-lua文件" class="headerlink" title="步骤二：编写item.lua文件"></a>步骤二：编写item.lua文件<br></h2><ol><li>在nginx目录创建文件夹：lua<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051524832.png" alt="[Pasted image 20231105100905.png]"></li><li>在lua文件夹下，新建文件：item.lua<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051524749.png" alt="[Pasted image 20231105100934.png]"></li><li>内容如下：<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 返回假数据，这里的ngx.say()函数，就是写数据到Response中</span></span><br><span class="line">ngx.say(<span class="string">&#x27;&#123;&quot;id&quot;:10001,&quot;name&quot;:&quot;SALSA AIR&quot;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>重新加载配置<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><h2 id="OpenResty获取请求参数"><a href="#OpenResty获取请求参数" class="headerlink" title="OpenResty获取请求参数"></a>OpenResty获取请求参数<br></h2><p>OpenResty提供了各种API用来获取不同类型的请求参数：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051524594.png" alt="[Pasted image 20231105102151.png]"></p><h2 id="多级缓存需求"><a href="#多级缓存需求" class="headerlink" title="多级缓存需求"></a>多级缓存需求<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051524349.png" alt="[Pasted image 20231105103009.png]"></p><h2 id="nginx内部发送Http请求"><a href="#nginx内部发送Http请求" class="headerlink" title="nginx内部发送Http请求"></a>nginx内部发送Http请求<br></h2><p>nginx提供了内部API用以发送http请求：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> resp = ngx.localtion.capture(<span class="string">&quot;/path&quot;</span>,&#123;</span><br><span class="line">method = ngx.HTTP_GET, <span class="comment">-- 请求方式</span></span><br><span class="line">args = &#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;, <span class="comment">-- get方式传参数</span></span><br><span class="line">body = <span class="string">&quot;c=3&amp;d=4&quot;</span> <span class="comment">-- post方式传参数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>返回的响应内容包括：</p><ul><li>resp.status：响应状态码</li><li>resp.header：响应头，是一个table</li><li>resp.body：响应体，就是响应数据<br>注意：这里的path是路径，并不包含IP和端口。这个请求会被nginx内部的server监听并处理。<br>但是我们希望这个请求发送到Tomcat服务器，所以还需要编写一个server来对这个路径做反向代理：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /path&#123;</span><br><span class="line"><span class="comment"># 这里是windows电脑的ip和Java服务端口，需要确保windows防火墙处于关闭状态</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.111.17:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="封装http查询的函数"><a href="#封装http查询的函数" class="headerlink" title="封装http查询的函数"></a>封装http查询的函数<br></h2><p>我们可以把http查询的请求封装为一个函数，放到OpenResty函数库中，方便后期使用</p><ol><li>在&#x2F;usr&#x2F;local&#x2F;openresty&#x2F;lualib目录下创建common.lua文件：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/openresty/lualib/common.lua</span><br></pre></td></tr></table></figure></li><li>在common.lua中封装http查询的函数<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 封装函数，发送http请求，并解析响应</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_http</span><span class="params">(path, params)</span></span></span><br><span class="line"><span class="keyword">local</span> resp = ngx.location.capture(<span class="built_in">path</span>,&#123;</span><br><span class="line">method = ngx.HTTP_GET,</span><br><span class="line">args = params,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span></span><br><span class="line"><span class="comment">-- 记录错误信息，返回404</span></span><br><span class="line">ngx.<span class="built_in">log</span>(ngx.ERR,<span class="string">&quot;http not found,path:&quot;</span>, <span class="built_in">path</span> , <span class="string">&quot;,args:&quot;</span>, args)</span><br><span class="line">ngx.<span class="built_in">exit</span>(<span class="number">404</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> resp.body</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 将方法导出</span></span><br><span class="line"><span class="keyword">local</span> _M = &#123;</span><br><span class="line">read_http = read_http</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _M</span><br></pre></td></tr></table></figure></li></ol><h2 id="JSON结果处理"><a href="#JSON结果处理" class="headerlink" title="JSON结果处理"></a>JSON结果处理<br></h2><p>OpenResty提供了一个cjson的模块用来处理JSON的序列化和反序列化<br>官方地址：(<a href="https://github.com/openresty/lua-cjson">https://github.com/openresty/lua-cjson</a>)</p><ul><li>引入cjson模块：<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">&quot;cjson&quot;</span></span><br></pre></td></tr></table></figure></li><li>序列化<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> obj = &#123;</span><br><span class="line">name = <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">age = <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">local</span> json = cjson.encode(obj)</span><br></pre></td></tr></table></figure></li><li>反序列化<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> json = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;jack&quot;,&quot;age&quot;:21&#125;&#x27;</span></span><br><span class="line"><span class="comment">-- 反序列化</span></span><br><span class="line"><span class="keyword">local</span> obj = cjson.decode(json);</span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Tomcat集群的负载均衡"><a href="#Tomcat集群的负载均衡" class="headerlink" title="Tomcat集群的负载均衡"></a>Tomcat集群的负载均衡<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051524759.png" alt="[Pasted image 20231105140924.png]"></p><h2 id="添加redis缓存的需求"><a href="#添加redis缓存的需求" class="headerlink" title="添加redis缓存的需求"></a>添加redis缓存的需求<br></h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051525528.png" alt="[Pasted image 20231105141318.png]"></p><h2 id="冷启动与缓存预热"><a href="#冷启动与缓存预热" class="headerlink" title="冷启动与缓存预热"></a>冷启动与缓存预热<br></h2><p>冷启动：服务刚刚启动时，Redis中并没有缓存，如果所有商品数据都在第一次查询时添加缓存，可能会给数据库带来较大压力<br>缓存预热：在实际开发中，我们可以利用大数据统计用户访问的热点数据，在项目启动时将这些热点数据提前查询并保存到Redis中</p><p>我们数据量较少，可以在启动时将所有数据都放入缓存中</p><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热<br></h2><ol><li>利用Docker安装Redis<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name redis -p 6379:6379 -d redis redis-server --appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure></li><li>在item-service服务中引入Redis依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置Redis地址<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span></span><br></pre></td></tr></table></figure></li><li>编写初始化类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisHandler</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 初始化缓存 ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="OpenResty的Redis模块"><a href="#OpenResty的Redis模块" class="headerlink" title="OpenResty的Redis模块"></a>OpenResty的Redis模块<br></h2><p>OpenResty提供了操作Redis的模块，我们只要引入该模块就能直接使用：</p><ul><li>引入Redis模块，并初始化Redis对象<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 引入redis模块</span></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>)</span><br><span class="line"><span class="comment">-- 初始化Redis对象</span></span><br><span class="line"><span class="keyword">local</span> red = redis::new()</span><br><span class="line"><span class="comment">-- 设置Redis超时时间</span></span><br><span class="line">red:set_timeouts(<span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li><li>封装函数，用来释放Redis连接，其实是放入连接池<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关闭redis连接的工具方法，其实是放入连接池</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">close_redis</span><span class="params">(red)</span></span></span><br><span class="line"> <span class="keyword">local</span> pool_max_idle_time = <span class="number">10000</span> <span class="comment">-- 连接的空闲时间，单位是毫秒</span></span><br><span class="line"> <span class="keyword">local</span> pool_size = <span class="number">100</span> <span class="comment">--连接池大小</span></span><br><span class="line"> <span class="keyword">local</span> ok, err = red:set_keepalive(pool_max_idle_time,pool_size)</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line"> ngx.<span class="built_in">log</span>(ngx.ERR,<span class="string">&quot;放入Redis连接池失败:&quot;</span>, err)</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li>封装函数，从Redis读数据并返回<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询redis的方法 ip和port是redis地址，key是查询的key</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_redis</span><span class="params">(ip, port, key)</span></span></span><br><span class="line"><span class="comment">-- 获取一个连接</span></span><br><span class="line"><span class="keyword">local</span> ok, err = red:connect(ip, port)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">ngx.<span class="built_in">log</span>(ngx.ERR,<span class="string">&quot;连接redis失败：&quot;</span>,err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 查询redis</span></span><br><span class="line"><span class="keyword">local</span> resp,err = red:get(key)</span><br><span class="line"><span class="comment">-- 查询失败处理</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span></span><br><span class="line">ngx.<span class="built_in">log</span>(ngx.ERR,<span class="string">&quot;查询Redis失败：&quot;</span>,err,<span class="string">&quot;, key = &quot;</span>, key)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 得到的数据为空处理</span></span><br><span class="line"><span class="keyword">if</span> resp == ngx.null <span class="keyword">then</span></span><br><span class="line">resp = <span class="literal">nil</span></span><br><span class="line">ngx.<span class="built_in">log</span>(ngx.ERR,<span class="string">&quot;查询Redis数据为空，key = &quot;</span>, key)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">close_redis(red)</span><br><span class="line"><span class="keyword">return</span> resp</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ngxin本地缓存"><a href="#ngxin本地缓存" class="headerlink" title="ngxin本地缓存"></a>ngxin本地缓存<br></h2><p>OpenResty为Nginx提供了shard dict的功能，可以在nginx的多个worker之间共享数据，实现缓存功能。</p><ul><li>开启共享字典，在nginx.conf的http下添加配置：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 共享字典，也就是本地缓存，名称叫做：item_cache，大小150m</span></span><br><span class="line"><span class="attribute">lua_shared_dict</span> item_cache <span class="number">150m</span>;</span><br></pre></td></tr></table></figure></li><li>操作共享字典：<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取本地缓存对象</span></span><br><span class="line"><span class="keyword">local</span> item_cache = ngx.shared.item_cache</span><br><span class="line"><span class="comment">-- 存储，指定key、value、过期时间，单位s，默认为0代表永不过期</span></span><br><span class="line">item_cache:set(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;value&#x27;</span>,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">-- 读取</span></span><br><span class="line"><span class="keyword">local</span> val = item_cache:get(<span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure>修改后的查询逻辑：<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 封装函数，先查询本地缓存，在查询redis，在查询http</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_data</span><span class="params">(key, expire,path,params)</span></span></span><br><span class="line"><span class="comment">-- 读取本地缓存</span></span><br><span class="line"><span class="keyword">local</span> val = item_cache:get(key)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> val <span class="keyword">then</span></span><br><span class="line"><span class="comment">-- 缓存未命中，记录日志</span></span><br><span class="line">ngx.<span class="built_in">log</span>(ngx.ERR,<span class="string">&quot;本地缓存查询失败，key: &quot;</span>,key,<span class="string">&quot;，尝试redis查询&quot;</span>)</span><br><span class="line"><span class="comment">-- 查询redis</span></span><br><span class="line">val = read_redis(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>,key)</span><br><span class="line"><span class="comment">-- 判断redis是否命中</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> val <span class="keyword">then</span></span><br><span class="line">ngx.<span class="built_in">log</span>(ngx.ERR,<span class="string">&quot;Redis缓存查询失败,key&quot;</span>,key,<span class="string">&quot;，尝试http查询&quot;</span>)</span><br><span class="line"><span class="comment">-- Redis查询失败，查询http</span></span><br><span class="line">val = read_http(<span class="built_in">path</span>, params)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 写入本地缓存</span></span><br><span class="line">item_cache:set(key,val,expire)</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 根据id查询商品</span></span><br><span class="line"><span class="keyword">local</span> itemJSON = read_data(<span class="string">&#x27;item:id&#x27;</span> .. id,<span class="number">1800</span>,<span class="string">&quot;/item/&quot;</span>.. id,<span class="literal">nil</span>)</span><br><span class="line"><span class="comment">-- 根据id查询商品库存</span></span><br><span class="line"><span class="keyword">local</span> itemStockJSON = read_data(<span class="string">&#x27;item:stock:id&#x27;</span> .. id,<span class="number">60</span>,<span class="string">&quot;/item/stock/&quot;</span>.. id,<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="缓存同步"><a href="#缓存同步" class="headerlink" title="缓存同步"></a>缓存同步<br></h1><h2 id="缓存同步策略"><a href="#缓存同步策略" class="headerlink" title="缓存同步策略"></a>缓存同步策略<br></h2><p>缓存数据同步的常见方式有三种：</p><ul><li>设置有效期：给缓存设置有效期，到期后自动删除。再次查询时更新<ul><li>优势：简单、方便</li><li>缺点：时效性差，缓存过期之前可能不一致</li><li>场景：更新频率较低，时效性要求低的业务</li></ul></li><li>同步双写：在修改数据库的同时，直接修改缓存<ul><li>优势：时效性强，缓存与数据库强一致</li><li>缺点：有代码侵入，耦合度高；</li><li>场景：对一致性、时效性要求较高的缓存数据</li></ul></li><li>异步通知：修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据<ul><li>优势：低耦合，可以同时通知多个缓存服务</li><li>缺点：时效性一般，可能存在中间不一致状态</li><li>场景：时效性要求一般，有多个服务需要同步<br>  基于MQ的异步通知：<br>  <img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051525772.png" alt="[Pasted image 20231106093510.png]"><br>  基于Canal的异步通知：<br>  <img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051525540.png" alt="[Pasted image 20231106093544.png]"></li></ul></li></ul><h2 id="初识Canal"><a href="#初识Canal" class="headerlink" title="初识Canal"></a>初识Canal<br></h2><p><strong>Canal</strong>，译意为水管&#x2F;管道&#x2F;沟渠，canal是阿里巴巴旗下的一款开源项目，基于Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费。GitHub的地址：(<a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a>)<br>Canal是基于mysql的主从同步来实现的，MySQL主从同步的原理如下：</p><ul><li>MySQL master将数据变更写入二进制日志（binary log）,其中记录的数据叫做binary log events</li><li>MySQL slave将master的binary log events拷贝到它的中继日志（relay log）</li><li>MySQL slave重放relay log中事件，将数据变更反映它自己的数据<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051525224.png" alt="[Pasted image 20231106095841.png]"><br>Canal就是把自己伪装成MySQL的一个slave节点，从而监听master的binary log变化。再把得到的变化信息通知给Canal的客户端，进而完成对其它数据库的同步。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051525966.png" alt="[Pasted image 20231106100021.png]"></li></ul><h2 id="安装和配置Canal"><a href="#安装和配置Canal" class="headerlink" title="安装和配置Canal"></a>安装和配置Canal<br></h2><p>安装和配置Canal参考<a href="%E5%AE%89%E8%A3%85Canal">[安装Canal]</a></p><h2 id="Canal客户端"><a href="#Canal客户端" class="headerlink" title="Canal客户端"></a>Canal客户端<br></h2><p>Canal提供了各种语言的客户端，当Canal监听到binlog变化时，会通知Canal的客户端。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051526761.png" alt="[Pasted image 20231106142924.png]"><br>Canal提供了各种语言的客户端，当Canal监听到binlog变化时，会通知Canal的客户端。不过这里我们会使用GitHub上的第三方开源的canal-starter。地址：(<a href="https://github.com/NormanGyllenhaal/canal-client">https://github.com/NormanGyllenhaal/canal-client</a>)<br>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- canal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.javatool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canal:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">heima</span> <span class="comment">#canal实例名称，要跟canal-server运行时设置的destionation一致</span></span><br><span class="line">  <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:11111</span> <span class="comment"># canal地址</span></span><br></pre></td></tr></table></figure><p>编写监听器，监听Canal消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.item.canal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CanalTable(&quot;tb_item&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemHandler</span> <span class="keyword">implements</span> <span class="title class_">EntryHandler</span>&lt;Item&gt; &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Item item)</span> &#123;</span><br><span class="line"><span class="comment">//新增数据到redis</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Item before,Item after)</span>&#123;</span><br><span class="line"><span class="comment">// 更新redis数据</span></span><br><span class="line"><span class="comment">//更新本地缓存</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Item item)</span>&#123;</span><br><span class="line"><span class="comment">//删除redis数据</span></span><br><span class="line"><span class="comment">//清理本地缓存</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Canal推送给canal-client的是被修改的这一行数据（row），而我们引入的canal-client则会帮我们把行数据封装到Item实体类中。这个过程中需要知道数据库与实体的映射关系，要用到JPA的几个注解：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051526107.png" alt="[Pasted image 20231106144512.png]"></p><h1 id="消息可靠性"><a href="#消息可靠性" class="headerlink" title="消息可靠性"></a>消息可靠性<br></h1><h2 id="消息可靠性问题"><a href="#消息可靠性问题" class="headerlink" title="消息可靠性问题"></a>消息可靠性问题<br></h2><p>消息从生产者发送到exchange，再到queue，再到消费者，有哪些导致消息丢失的可能性？</p><ul><li>发送时丢失：<ul><li>生产者发送的消息未送达exchange</li><li>消息到达exchange后未到达queue</li></ul></li><li>MQ宕机，queue将消息丢失</li><li>consumer接收到消息后未消费就宕机<br>![[Pasted image 20231106145924.png]]</li></ul><h2 id="生产者确认机制"><a href="#生产者确认机制" class="headerlink" title="生产者确认机制"></a>生产者确认机制<br></h2><p>RabbitMQ提供了publisher confirm机制来避免消息发送到MQ过程中丢失。消息发送到MQ以后，会返回一个结果给发送者，表示消息是否处理成功。结果有两种请求：</p><ul><li>publisher-confirm，发送者确认<ul><li>消息成功投递到交换机，返回ack</li><li>消息未投递到交换机，返回nack</li></ul></li><li>publisher-return，发送者回执<ul><li>消息投递到交换机了，但是没有路由到队列。返回ACK，及路由失败原因</li></ul></li></ul><h2 id="SpringAMQP实现生产者确认"><a href="#SpringAMQP实现生产者确认" class="headerlink" title="SpringAMQP实现生产者确认"></a>SpringAMQP实现生产者确认<br></h2><ol><li>在publisher这个微服务的application.yml中添加配置:<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>配置说明：</li></ol><ul><li>publish-confirm-type：开启publisher-confirm，这里支持两种类型：<ul><li>simple：同步等待confirm结果，直到超时</li><li>correlated：异步回调，定义ConfirmCallback，MQ返回结果时会回调这个ConfirmCallback</li></ul></li><li>publish-returns：开启publish-return功能，同样是基于callback机制，不过是定义ReturnCallback</li><li>template.mandatory：定义消息路由失败时的策略。true，则调用ReturnCallback；false：则直接丢弃消息</li></ul><ol start="2"><li>每个RabbitTemplate只能配置一个ReturnCallback，因此需要在项目启动过程中配置：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="comment">// 获取RabbitTemplate</span></span><br><span class="line"><span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class);</span><br><span class="line"><span class="comment">//设置ReturnCallback</span></span><br><span class="line">rabbitTemplate.setReturnCallback((message, replyCode, replyText,exchange,routingKey) -&gt; &#123;</span><br><span class="line">log.info(<span class="string">&quot;消息发送失败，应答码&#123;&#125;,原因&#123;&#125;,交换机&#123;&#125;,路由键&#123;&#125;,消息&#123;&#125;&quot;</span>,</span><br><span class="line">replyCode, replyText, exchange, routingKey,message.toString());</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>发送消息，指定消息ID、消息ConfirmCallback<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage2SimpleQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="comment">//消息体</span></span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line"><span class="comment">//消息ID，需要封装到CorrelationData中</span></span><br><span class="line"><span class="type">CorrelationData</span> <span class="variable">corrlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line"><span class="comment">//添加callback</span></span><br><span class="line">correlationData.getFuture().addCallback(</span><br><span class="line">result -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(result.isAck())&#123;</span><br><span class="line"><span class="comment">// ack，消息成功</span></span><br><span class="line">log.debug(<span class="string">&quot;消息发送成功，ID:&#123;&#125;&quot;</span>,correlationData.getId());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// nack，消息失败</span></span><br><span class="line">log.error(<span class="string">&quot;消息发送失败，ID:&#123;&#125;，原因&#123;&#125;&quot;</span>,correlationData.getId(),result.getReason());</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">ex -&gt; log.error(<span class="string">&quot;消息发送异常，ID:&#123;&#125;，原因&#123;&#125;&quot;</span>,correlationData.getId(),ex.getMessage())</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;amq.direct&quot;</span>,<span class="string">&quot;simple&quot;</span>,nessage,correlationData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化<br></h1><p>MQ默认是内存存储消息，开启持久化功能可以确保缓存在MQ中的消息不丢失。</p><ol><li>交换机持久化：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">simpleExchange</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;simple.direct&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>队列持久化<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">simpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//使用QueueBuilder构建队列，durable就是持久化的</span></span><br><span class="line"><span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;simple.queue&quot;</span>).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>消息持久化，SpringAMQP中的消息默认是持久的，可以通过MessageProperties中的DeliveryMode来指定的：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> MessageBuilder</span><br><span class="line">.withBody(message.getBytes(StandardCharsets.UTF_8)) <span class="comment">// 消息体</span></span><br><span class="line">.setDeliveryMode(MessageDeliveryMode.PERSISTENT) <span class="comment">//持久化</span></span><br><span class="line">.build();</span><br></pre></td></tr></table></figure></li></ol><h2 id="消费者确认"><a href="#消费者确认" class="headerlink" title="消费者确认"></a>消费者确认<br></h2><p>RabbitMQ支持消费者确认机制，即：消费者处理消息后可以向MQ发送ack回执，MQ收到ack回执后才会删除该消息<br>而SpringAMQP则允许配置三种确认模式：</p><ul><li>manual：手动ack，需要在业务代码结束后，调用api发送ack。</li><li>auto：自动ack，由spring监测listener代码是否出现异常，没有异常则返回ack；抛出异常则返回nack<br>配置方式是修改application.yml文件，添加下面配置：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">none</span> <span class="comment"># none，关闭ack;manual，手动ack;auto;自动ack</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="失败重试机制"><a href="#失败重试机制" class="headerlink" title="失败重试机制"></a>失败重试机制<br></h2><p>当消费者出现异常后，消息会不断requeue(重新入队)到队列，再重新发送给消费者，然后再次异常，再次requeue，无限循环，导致mq的消息处理飙升，带来不必要的压力：<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051526210.png" alt="[Pasted image 20231106164342.png]"><br>我们可以利用Spirng的retry机制，在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="number">1000</span> <span class="comment"># 初识的失败等待时长为1秒</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 下次失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span><br><span class="line">          <span class="string">max-attempts：3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment"># true无状态;false有状态。如果业务中包含事务，这里改为false</span></span><br></pre></td></tr></table></figure><h2 id="消费者失败消息处理策略"><a href="#消费者失败消息处理策略" class="headerlink" title="消费者失败消息处理策略"></a>消费者失败消息处理策略<br></h2><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有MessageRecoverer接口来处理，它包含三种不同的实现：</p><ul><li>RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。默认就是这种方式</li><li>ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队</li><li>RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051526028.png" alt="[Pasted image 20231106170243.png]"><br>测试下RepublishMessageRecoverer处理模式：</li><li>首先，定义接收失败消息的交换机、队列及其绑定关系：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(errorQueue()).to(errorMessageExchange()).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>然后，定义RepublishMessageRecoverer：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate,<span class="string">&quot;error.direct&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结<br></h2><p>如何确保RabbitMQ消息的可靠性？</p><ul><li>开启生产者确认机制，确保生产者的消息能到达队列</li><li>开启持久化功能，确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为auto，由spring确认消息处理成功后完成ack</li><li>开启消费者失败重试机制，并设置MessageRecoverer，多次重试失败后将消息投递到异常交换机，交由人工处理</li></ul><h1 id="死信交换机"><a href="#死信交换机" class="headerlink" title="死信交换机"></a>死信交换机<br></h1><h2 id="初识死信交换机"><a href="#初识死信交换机" class="headerlink" title="初识死信交换机"></a>初识死信交换机<br></h2><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li>消费者使用basic.reject或basic.nack声明消费失败，并且消息的Requeue参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息推挤满了，最早的消息可能成为死信<br>如果该队列配置了dead-letter-exchange属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为死信交换机（Dead Letter Exchange，简称DLX）。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051526931.png" alt="[Pasted image 20231107084027.png]"></li></ul><h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL<br></h2><p>TTL，也就是Time-To-Live。如果一个队列中的消息TTL仍未消费，则会变为死信，ttl超时分为两种情况：</p><ul><li>消息所在的队列设置了存活时间</li><li>消息本身设置了存活时间<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051526890.png" alt="[Pasted image 20231107084546.png]"><br>我们声明一组死信交换机和队列，基于注解方式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">value = @Queue(name = &quot;dl.queue&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">exchange = @Exchange(name = &quot;dl.direct&quot;),</span></span><br><span class="line"><span class="meta">key = &quot;dl&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDlQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">log.info(<span class="string">&quot;接收到 dl.queue的延迟消息：&#123;&#125;&quot;</span>,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>要给队列设置超时时间，需要在声明队列时配置x-message-ttl属性：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">ttlExchange</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;ttl.direct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">ttlQueue</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;ttl.queue&quot;</span>) <span class="comment">//指定队列名称，并持久化</span></span><br><span class="line">.ttl(<span class="number">10000</span>) <span class="comment">//设置队列的超时时间，10秒</span></span><br><span class="line">.deadLetterExchange(<span class="string">&quot;dl.direct&quot;</span>) <span class="comment">//指定死信交换机</span></span><br><span class="line">.deadLetterRoutingKey(<span class="string">&quot;dl&quot;</span>) <span class="comment">// 指定死信RoutingKey</span></span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">simpleBinding</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(ttlQueue()).to(ttlExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>发送消息时，给消息本身设置超时时间<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTTLMsg</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//创建消息</span></span><br><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder</span><br><span class="line">.withBody(<span class="string">&quot;hello,ttl message&quot;</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">.setExpiration(<span class="string">&quot;5000&quot;</span>)</span><br><span class="line">.build();</span><br><span class="line"><span class="comment">//消息ID，需要封装到CorrelationData中</span></span><br><span class="line"><span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;ttl.direct&quot;</span>,<span class="string">&quot;ttl&quot;</span>,message,correlationData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列<br></h2><p>利用TTL结合死信交换机，我们实现了消息发出后，消息者延迟收到消息的效果。这种消息模式被称为延迟队列（Delay Queue）模式。<br>延迟队列的使用场景包括：</p><ul><li>延迟发送短信</li><li>用户下单，如果用户在15分钟内未支付，则自动取消</li><li>预约工作会议，20分钟后自动通知所有参会人员</li></ul><h2 id="延迟队列插件"><a href="#延迟队列插件" class="headerlink" title="延迟队列插件"></a>延迟队列插件<br></h2><p>因为延迟队列的需求非常多，所以RabbitMQ的官方也推出了一个插件，原生支持延迟队列效果。<br>详细安装过程参考<a href="RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97">[RabbitMQ部署指南]</a></p><h2 id="SpringAMQP使用延迟队列插件"><a href="#SpringAMQP使用延迟队列插件" class="headerlink" title="SpringAMQP使用延迟队列插件"></a>SpringAMQP使用延迟队列插件<br></h2><p>DelayExchange的本质还是官方的三种交换机，只是添加了延迟功能。因此使用时只需要声明一个交换机，交换机的类型可以是任意类型，然后设定delayed属性为true即可。<br>基于注解方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">value = @Queue(name = &quot;delay.queue&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">exchange = @Exchange(name = &quot;delay.direct&quot;,delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">key = &quot;delay&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDelayedQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">log.info(<span class="string">&quot;接收到 delay.queue的延迟消息：&#123;&#125;&quot;</span>,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于java代码的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">delayedExchange</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ExhcangeBuilder</span><br><span class="line">.directExchange(<span class="string">&quot;delay.direct&quot;</span>) <span class="comment">// 指定交换机类型和名称</span></span><br><span class="line">.delayed() <span class="comment">//设置delay属性为true</span></span><br><span class="line">.durable(<span class="literal">true</span>) <span class="comment">//持久化</span></span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;delay.queue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">delayedBinding</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(delayedQueue().to(delayedExchange()).with(<span class="string">&quot;delay&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们向这个delay为true的交换机中发送消息，一定要给消息添加一个header: x-delay，值为延迟的时间，单位为毫秒：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelayedMsg</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 创建消息</span></span><br><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder</span><br><span class="line">.withBody(<span class="string">&quot;hello,delayde message&quot;</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">.setHeader(<span class="string">&quot;x-delay&quot;</span>,<span class="number">10000</span>)</span><br><span class="line">.builder();</span><br><span class="line"><span class="comment">// 消息ID，需要封装到CorrelationData中</span></span><br><span class="line"><span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;delay.direct&quot;</span>,<span class="string">&quot;delay&quot;</span>,message,correlationData);</span><br><span class="line">log.debug(<span class="string">&quot;发送消息成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列<br></h1><h2 id="消息堆积问题"><a href="#消息堆积问题" class="headerlink" title="消息堆积问题"></a>消息堆积问题<br></h2><p>当生产者发送消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息达到上限。最早接收的消息，可能就会成为死信，会被丢弃，这就是消息堆积问题。<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051527107.png" alt="[Pasted image 20231107113320.png]"><br>解决消息堆积有三种思路：</p><ul><li>增加更多消费者，提高消费速度</li><li>在消费者内开启线程加快消息处理速度</li><li>扩大队列容积，提高堆积上限</li></ul><h2 id="惰性队列-1"><a href="#惰性队列-1" class="headerlink" title="惰性队列"></a>惰性队列<br></h2><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的概念，也就是惰性队列。<br>惰性队列的特征如下：</p><ul><li>接收到消息后直接存到磁盘而非内存</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存</li><li>支持数百万条的消息存储<br>而要设置一个惰性队列，只需要在声明队列时，指定x-queue-mode属性为lazy即可。可以通过命令行将一个运行中的队列修改为惰性队列：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_policy Lazy <span class="string">&quot;^lazy-queue$&quot;</span> <span class="string">&#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27;</span> --apply-to queues</span><br></pre></td></tr></table></figure>用SpringAMQP声明惰性队列分两种方式：</li><li>@Bean的方式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">lazyQueue</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> QueueBuilder</span><br><span class="line">.durable(<span class="string">&quot;lazy.queue&quot;</span>)</span><br><span class="line">.lazy() <span class="comment">// 开启x-queue-mode为lazy</span></span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注解方式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">name = &quot;lazy.queue&quot;,</span></span><br><span class="line"><span class="meta">durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">arguments = @Argument(name = &quot;x-queue-mode&quot;,value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenLazyQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">log.info(<span class="string">&quot;接收到 lazy.queue的消息：&#123;&#125;&quot;</span>,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="MQ集群"><a href="#MQ集群" class="headerlink" title="MQ集群"></a>MQ集群</h1><h2 id="集群分类"><a href="#集群分类" class="headerlink" title="集群分类"></a>集群分类<br></h2><p>RabbitMQ的是基于Erlang语言编写，而Erlang又是一个面向并发的语言，天然支持集群模式。RabbitMQ的集群有两种模式：</p><ul><li>普通集群：是一种分布式集群，将队列分散到集群的各个节点，从而提高整个集群的并发能力</li><li>镜像集群：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性<br>镜像集群虽然支持主从，但主从同步并不不是强一致的，某些情况下可能有数据丢失的风险。因此在RabbitMQ的3.8版本以后，推出了新的功能：仲裁队列来代替镜像集群，底层采用Raft协议确保主从的数据一致性。</li></ul><h2 id="普通集群"><a href="#普通集群" class="headerlink" title="普通集群"></a>普通集群<br></h2><p>普通集群，或者叫标准集群（classic cluster），具备下列特征：</p><ul><li>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包含队列中的消息。</li><li>当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</li><li>队列所在节点宕机，队列中的消息就会丢失<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051527331.png" alt="[Pasted image 20231107151616.png]"><br>详细的搭建步骤参考<a href="RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97">[RabbitMQ部署指南]</a></li></ul><h2 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群<br></h2><p>镜像集群：本质是主从模式，具备下面的特征：</p><ul><li>交换机、队列、队列中的消息会在各个mq的镜像节点之间同步备份。</li><li>创建队列的节点被称为该队列的主节点，备份到的其他节点叫做该队列的镜像节点。</li><li>一个队列的主节点可能是另一个队列的镜像节点</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主<br><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403051527127.png" alt="[Pasted image 20231107154652.png]"><br>详细的搭建步骤可以参考<a href="RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97">[RabbitMQ部署指南]</a></li></ul><h2 id="仲裁队列"><a href="#仲裁队列" class="headerlink" title="仲裁队列"></a>仲裁队列<br></h2><p>仲裁队列：仲裁队列是3.8版本以后才有的新功能，用来替代镜像队列，具备下列特征：</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于Raft协议，强一致<br>详细的搭建步骤可以参考：[[RabbitMQ部署指南]]<br>SpringAMQP创建仲裁队列：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">quorumQueue</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> QueueBuilder</span><br><span class="line">.durable(<span class="string">&quot;quorum.queue&quot;</span>) <span class="comment">// 持久化</span></span><br><span class="line">.quorum() <span class="comment">// 仲裁队列</span></span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>SpringAMQP连接集群，只需要在yaml中配置即可：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.131</span><span class="string">:8071,192.168.140.131:8072,192.168.140.131:8073</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">huanji</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 基础</title>
      <link href="/2024/03/03/Java%20%E8%A1%A5%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/03/03/Java%20%E8%A1%A5%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a>IO 流</h1><h2 id="一、什么是-IO-流"><a href="#一、什么是-IO-流" class="headerlink" title="一、什么是 IO 流"></a>一、什么是 IO 流</h2><ul><li>I : Input</li><li>O: Output</li></ul><h2 id="二、流的分类"><a href="#二、流的分类" class="headerlink" title="二、流的分类"></a>二、流的分类</h2><ul><li>按照流的方向<ul><li>输入 (Input) 也就是 读 (Read)</li><li>输出 (Output) 也就是 写 (Write)</li></ul></li><li>按照读取数据方式<ul><li>字节：一次读取 1 个字节 byte，等同于一次读取 8 个二进制位，这种流什么类型的文件都可以读取。包括：文本文件，图片，声音文件，视频文件等…</li><li>字符：一次读取 1 个字符，这种流方便读取 <code>普通文本文件</code> 而存在的，这种流不能读取：图片、声音、视频等文件。只能读取 <code>纯文本文件</code>，连 word 文件都无法读取。</li></ul></li></ul><h2 id="三、IO-流抽象类"><a href="#三、IO-流抽象类" class="headerlink" title="三、IO 流抽象类"></a>三、IO 流抽象类</h2><ul><li><p>字节流</p><ol><li>java.io.<strong>InputStream</strong> 字节输入流</li><li>java.io.<strong>OutputStream</strong> 字节输出流</li></ol></li><li><p>字符流</p><ol start="3"><li><p>java.io.<strong>Reader</strong> 字符输入流</p></li><li><p>java.io.<strong>Writer</strong> 字符输出流</p></li></ol></li></ul><p>注意：</p><ol><li>所有的流都实现了：<strong>java.io.Closeable</strong>接口，都是<strong>可关闭</strong>的，都有 <strong><code>close()</code></strong> 方法。用完一定要关闭</li><li>所有的<code>输出流</code>都实现了<strong>java.io.Flushable</strong>接口，都是<strong>可刷新</strong>的，都有 <strong><code>flush()</code></strong> 方法。输出流在最终输出之后，一定要记得 flush() 刷新一下。这个刷新表示将通道&#x2F;管道当中剩余未输出的<strong>数据强行输出完</strong>（清空管道！）刷新的作用就是<strong>清空管道</strong>。</li><li>在 java 中只要“<strong>类名</strong>”以 <strong><code>Stream</code></strong> 结尾的都是<strong>字节流</strong>。以“ <strong><code>Reader/Writer</code></strong> ”结尾的都是<strong>字符流</strong>。</li></ol><h2 id="四、Java-要掌握的流-16-个"><a href="#四、Java-要掌握的流-16-个" class="headerlink" title="四、Java 要掌握的流 (16 个)"></a>四、Java 要掌握的流 (16 个)</h2><ol><li><p><strong>文件</strong>专属：</p><ul><li><p>java.io.FileInputStream（掌握）</p></li><li><p>java.io.FileOutputStream（掌握）</p></li><li><p>java.io.FileReader</p></li><li><p>java.io.FileWriter</p></li></ul></li><li><p><strong>转换流</strong>：（将字节流转换成字符流）</p><ul><li><p>java.io.InputStreamReader</p></li><li><p>java.io.OutputStreamWriter</p></li></ul></li><li><p><strong>缓冲流</strong>专属：</p><ul><li><p>java.io.BufferedReader</p></li><li><p>java.io.BufferedWriter</p></li><li><p>java.io.BufferedInputStream</p></li><li><p>java.io.BufferedOutputStream</p></li></ul></li><li><p><strong>数据流</strong>专属：</p><ul><li><p>java.io.DataInputStream</p></li><li><p>java.io.DataOutputStream</p></li></ul></li><li><p><strong>标准输出</strong>流：</p><ul><li><p>java.io.PrintWriter</p></li><li><p>java.io.PrintStream（掌握）</p></li></ul></li><li><p><strong>对象专属</strong>流：</p><ul><li><p>java.io.ObjectInputStream（掌握）</p></li><li><p>java.io.ObjectOutputStream（掌握）</p></li></ul></li><li><p><strong>File 文件类</strong></p><ul><li>java.io.File</li></ul></li></ol><p>补充：<br>Windows 各个文件的分隔符为：”\“,Linux 各个文件的分隔符为：”&#x2F;“</p><h2 id="五、类的方法"><a href="#五、类的方法" class="headerlink" title="五、类的方法"></a>五、类的方法</h2><h3 id="1-FileInputStream"><a href="#1-FileInputStream" class="headerlink" title="1. FileInputStream"></a>1. FileInputStream</h3><p>文件字节输入流，万能的，任何类型的文件都可以采用这个流来读</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th align="center">构造方法名</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">FileInputStream(String name)</td><td align="center">name 为文件路径</td></tr><tr><td align="center">FileInputStream(File file)</td><td align="center"></td></tr></tbody></table><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">int read()</td><td align="center">读取一个字节，返回值为该字节 ASCII 码；读到文件末尾返回-1</td></tr><tr><td align="center">int read(byte[] b)</td><td align="center">读 b 数组长度的字节到 b 数组中，返回值为读到的字节个数；读到文件末尾返回-1</td></tr><tr><td align="center">int read(byte[] b, int off, int len)</td><td align="center">从 b 数组 off 位置读 len 长度的字节到 b 数组中，返回值为读到的字节个数；读到文件末尾返回-1</td></tr><tr><td align="center">int available()</td><td align="center">返回文件有效的字节数</td></tr><tr><td align="center">long skip(long n)</td><td align="center">跳过 n 个字节</td></tr><tr><td align="center">void close()</td><td align="center">关闭文件输入流</td></tr></tbody></table><h3 id="2-FileOutputStream"><a href="#2-FileOutputStream" class="headerlink" title="2. FileOutputStream"></a>2. FileOutputStream</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th align="center">构造方法名</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">FileOutputStream(String name)</td><td align="center">name 为文件路径</td></tr><tr><td align="center">FileOutputStream(String name, boolean append)</td><td align="center">name 为文件路径，append 为 true 表示在文件末尾追加；为 false 表示清空文件内容，重新写入</td></tr><tr><td align="center">FileOutputStream(File file)</td><td align="center"></td></tr><tr><td align="center">FileOutputStream(File file, boolean append)</td><td align="center">append 为 true 表示在文件末尾追加；为 false 表示清空文件内容，重新写入</td></tr></tbody></table><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">void write(int b)</td><td align="center">将指定字节写入文件中</td></tr><tr><td align="center">void write(byte[] b)</td><td align="center">将 b.length 个字节写入文件中</td></tr><tr><td align="center">void write(byte[] b, int off, int len)</td><td align="center">将 b 数组 off 位置开始，len 长度的字节写入文件中</td></tr><tr><td align="center">void flush()</td><td align="center">刷新此输出流并强制写出所有缓冲的输出字节</td></tr><tr><td align="center">void close()</td><td align="center">关闭文件输出流</td></tr></tbody></table><h3 id="3-FileReader"><a href="#3-FileReader" class="headerlink" title="3. FileReader"></a>3. FileReader</h3><p>FileReader 文件字符输入流，只能读取普通文本。读取文本内容时，比较方便，快捷。</p><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th align="center">构造方法名</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">FileReader(String fileName)</td><td align="center">name 为文件路径</td></tr><tr><td align="center">FileReader(File file)</td><td align="center"></td></tr></tbody></table><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">int read()</td><td align="center">读取一个字符，返回值为该字符 ASCII 码；读到文件末尾返回-1</td></tr><tr><td align="center">int read(char[] c)</td><td align="center">读 c 数组长度的字节到 c 数组中，返回值为读到的字符个数；读到文件末尾返回-1</td></tr><tr><td align="center">int read(char[] c, int off, int len)</td><td align="center">从 c 素组 off 位置读 len 长度的字符到 c 数组中，返回值为读到的字符个数；读到文件末尾返回-1</td></tr><tr><td align="center">long skip(long n)</td><td align="center">跳过 n 个字符</td></tr><tr><td align="center">void close()</td><td align="center">关闭文件输入流</td></tr></tbody></table><h3 id="4-FileWriter"><a href="#4-FileWriter" class="headerlink" title="4. FileWriter"></a>4. FileWriter</h3><p>FileWriter 文件字符输出流。写。只能输出普通文本</p><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th align="center">构造方法名</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">FileWriter(String fileName)</td><td align="center">name 为文件路径</td></tr><tr><td align="center">FileWriter(String fileName, boolean append)</td><td align="center">name 为文件路径，append 为 true 表示在文件末尾追加；为 false 表示清空文件内容，重新写入</td></tr><tr><td align="center">FileWriter(File file)</td><td align="center"></td></tr><tr><td align="center">FileWriter(File file, boolean append)</td><td align="center">append 为 true 表示在文件末尾追加；为 false 表示清空文件内容，重新写入</td></tr></tbody></table><h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">void write(int c)</td><td align="center">将指定字符写入文件中</td></tr><tr><td align="center">void write(char[] c)</td><td align="center">将 c.length 个字符写入文件中</td></tr><tr><td align="center">void write(char[] c, int off, int len)</td><td align="center">将 c 数组 off 位置开始，len 长度的字符写入文件中</td></tr><tr><td align="center">void write(String str)</td><td align="center">将字符串写入文件中</td></tr><tr><td align="center">void write(String str, int off, int len)</td><td align="center">从字符串 off 位置开始截取 len 长度的字符串写入文件</td></tr><tr><td align="center">void flush()</td><td align="center">刷新此输出流并强制写出所有缓冲的输出字符</td></tr><tr><td align="center">void close()</td><td align="center">关闭文件输出流</td></tr></tbody></table><h3 id="5-PrintStream"><a href="#5-PrintStream" class="headerlink" title="5. PrintStream"></a>5. PrintStream</h3><p>标准的字节输出流。默认输出到控制台</p><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th align="center">构造方法名</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">PrintStream(File file)</td><td align="center"></td></tr><tr><td align="center">PrintStream(OutputStream out)</td><td align="center"></td></tr><tr><td align="center">PrintStream(String fileName)</td><td align="center">fileName 文件地址</td></tr></tbody></table><h4 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">println(参数类型不定 x)</td><td align="center">输出 x 带换行</td></tr><tr><td align="center">print(参数类型不定 x)</td><td align="center">输出 x 不带换行</td></tr><tr><td align="center">void flush()</td><td align="center">刷新此输出流并强制写出所有缓冲的输出字符</td></tr><tr><td align="center">void close()</td><td align="center">关闭流</td></tr></tbody></table><p><strong>改变流的输出方法</strong></p><p>System.setOut(PrintStream 对象)</p><p><strong>注意：</strong></p><ol><li>标准输出流不需要手动 close() 关闭</li><li>可以改变标准输出流的输出方向</li></ol><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>参与序列化和反序列化的对象，必须实现**<code>Serializable</code>** 接口。</p><h3 id="Serializable-接口起什么作用呢？"><a href="#Serializable-接口起什么作用呢？" class="headerlink" title="Serializable 接口起什么作用呢？"></a>Serializable 接口起什么作用呢？</h3><ul><li>起到 <strong><code>标识</code></strong> 的作用，标志的作用，java 虚拟机看到这个类实现了这个接口，可能会对这个类进行特殊待遇。</li><li>Serializable 这个标志接口是给 java 虚拟机参考的，java 虚拟机看到这个接口之后，会为该类自动生成一个序列化版本号。</li></ul><h3 id="序列化版本号有什么用"><a href="#序列化版本号有什么用" class="headerlink" title="序列化版本号有什么用"></a>序列化版本号有什么用</h3><p>区分两个类是否相同</p><h3 id="java-语言中是采用什么机制来区分类的"><a href="#java-语言中是采用什么机制来区分类的" class="headerlink" title="java 语言中是采用什么机制来区分类的"></a>java 语言中是采用什么机制来区分类的</h3><ol><li>首先通过 <strong><code>类名</code></strong> 进行比对，如果类名不一样，肯定不是同一个类。</li><li>如果类名一样，再怎么进行类的区别？靠 <strong><code>序列化版本号</code></strong> 进行区分。</li></ol><h3 id="这种自动生成序列化版本号有什么缺陷"><a href="#这种自动生成序列化版本号有什么缺陷" class="headerlink" title="这种自动生成序列化版本号有什么缺陷"></a>这种自动生成序列化版本号有什么缺陷</h3><p>Java 虚拟机看到 Serializable 接口之后，会<strong>自动生成</strong>一个序列化版本号。</p><p>这种自动生成的序列化版本号缺点是：一旦代码确定之后，<strong>不能进行后续的修改</strong>，因为只要修改，必然会重新编译，此时会生成全新的序列化版本号，这个时候 java 虚拟机会认为这是一个全新的类。（这样就不好了！）</p><h3 id="怎么使某个属性不序列化"><a href="#怎么使某个属性不序列化" class="headerlink" title="怎么使某个属性不序列化"></a>怎么使某个属性不序列化</h3><p>使用 <strong><code>transient</code></strong> 关键字</p><p>transient 关键字表示游离的，<strong>不参与序列化</strong>。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>凡是一个类实现了 Serializable 接口，建议给该类<strong>提供一个固定不变的序列化版本号</strong>。<br>这样，以后这个类即使代码修改了，但是版本号不变，java 虚拟机会认为是同一个类。</p><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><h2 id="一、NIO-简介"><a href="#一、NIO-简介" class="headerlink" title="一、NIO 简介"></a>一、NIO 简介</h2><p>NIO 中的 N 可以理解为 Non-blocking，不单纯是 New，是解决高并发、I&#x2F;O 高性能的有效方式。</p><p>Java NIO 是 Java1.4 之后推出来的一套 IO 接口，NIO 提供了一种完全不同的操作方式， NIO 支持面向缓冲区的、基于通道的 IO 操作。</p><p>新增了许多用于处理输入输出的类，这些类都被放在 java.nio 包及子包下，并且对原 java.io 包中的很多类进行改写，新增了满足 NIO 的功能。</p><h2 id="二、NIO-和-BIO"><a href="#二、NIO-和-BIO" class="headerlink" title="二、NIO 和 BIO"></a>二、NIO 和 BIO</h2><h3 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h3><p>BIO 全称是 Blocking IO，同步阻塞式 IO，是 JDK1.4 之前的传统 IO 模型。</p><p>Java BIO：服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021523910.webp" alt="img"></p><p>虽然此时服务器具备了高并发能力，即能够同时处理多个客户端请求了，但是却带来了一个问题，随着开启的线程数目增多，将会消耗过多的内存资源，导致服务器变慢甚至崩溃，NIO 可以一定程度解决这个问题。</p><h3 id="NIO-1"><a href="#NIO-1" class="headerlink" title="NIO"></a>NIO</h3><p>Java NIO： 同步非阻塞，服务器实现模式为一个线程处理多个请求 (连接)，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 I&#x2F;O 请求就进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021523548.webp" alt="img"></p><p>一个线程中就可以调用多路复用接口（java 中是 select）阻塞同时监听来自多个客户端的 IO 请求，一旦有收到 IO 请求就调用对应函数处理，NIO 擅长 1 个线程管理多条连接，节约系统资源。</p><h2 id="三、NIO-的核心实现"><a href="#三、NIO-的核心实现" class="headerlink" title="三、NIO 的核心实现"></a>三、NIO 的核心实现</h2><p><strong>NIO 包含 3 个核心的组件：</strong></p><ul><li>Channel(通道)</li><li>Buffer(缓冲区)</li><li>Selector(选择器)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021523581.webp" alt="img"></p><h3 id="Channel-通道"><a href="#Channel-通道" class="headerlink" title="Channel(通道)"></a>Channel(通道)</h3><p>Channel 是 NIO 的核心概念，它表示一个打开的连接，这个连接可以连接到 I&#x2F;O 设备（例如：磁盘文件，Socket）或者一个支持 I&#x2F;O 访问的应用程序，Java NIO 使用缓冲区和通道来进行数据传输。</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021524396.webp" alt="img"></p><p>通道的主要实现类：</p><h4 id="FileChannel-类"><a href="#FileChannel-类" class="headerlink" title="FileChannel 类"></a>FileChannel 类</h4><p>本地文件 IO 通道，用于读取、写入、映射和操作文件的通道，使用文件通道操作文件的一半流程为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;D:\\a.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//获取文件通道 获取时需要指定文件路径和文件打开方式</span></span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> FileChannel.open(Paths.get(file), StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建字节缓冲区 分配字节缓存为 10 个字节</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fileChannel.read(buf) != -<span class="number">1</span>)&#123; <span class="comment">//读取通道中的数据，并写入到 buf 中</span></span><br><span class="line">        buf.flip(); <span class="comment">//缓存区切换到读模式</span></span><br><span class="line">        <span class="keyword">while</span> (buf.position() &lt; buf.limit())&#123; <span class="comment">//读取 buf 中的数据</span></span><br><span class="line">            text.append((<span class="type">char</span>)buf.get());</span><br><span class="line">        &#125;</span><br><span class="line">        buf.clear(); <span class="comment">// 清空 buffer，缓存区切换到写模式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    text.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> FileChannel.open(Paths.get(file), StandardOpenOption.APPEND);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; text.length(); i++)&#123;</span><br><span class="line">        buf.put((<span class="type">byte</span>) text.charAt(i));</span><br><span class="line">        <span class="keyword">if</span>(buf.position() == buf.limit() || i == text.length() - <span class="number">1</span>)&#123;</span><br><span class="line">            buf.flip(); <span class="comment">// 将缓存区由写模式置为读模式</span></span><br><span class="line">            channel.write(buf); <span class="comment">//将缓存区的数据写到通道</span></span><br><span class="line">            buf.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据刷出到物理磁盘，FileChannel 的 force(boolean metaData) 方法可以确保对文件的操作能够更新到磁盘</span></span><br><span class="line">    channel.force(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭通道</span></span><br><span class="line">    fileChannel.close();</span><br><span class="line">    channel.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SocketChannel-类"><a href="#SocketChannel-类" class="headerlink" title="SocketChannel 类"></a>SocketChannel 类</h4><p>网络套接字 IO 通道，TCP 协议，针对面向流的连接套接字的可选择通道（一般用在客户端）。</p><p>TCP 客户端使用 SocketChannel 与服务端进行交互的流程为：</p><ol><li>打开通道，连接到服务端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> SocketChannel.open(); <span class="comment">// 打开通道，此时还没有打开 TCP 连接</span></span><br><span class="line">channel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9090</span>)); <span class="comment">// 连接到服务端</span></span><br></pre></td></tr></table></figure><ol start="2"><li>分配缓冲区</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>); <span class="comment">// 分配一个 10 字节的缓冲区，不实用，容量太小</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置是否为阻塞方式。（默认为阻塞方式）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(<span class="literal">false</span>); <span class="comment">// 配置通道为非阻塞模式</span></span><br></pre></td></tr></table></figure><ol start="4"><li>与服务端进行数据交互</li><li>关闭连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.close();<span class="comment">//关闭通道</span></span><br></pre></td></tr></table></figure><h4 id="ServerSocketChannel-类"><a href="#ServerSocketChannel-类" class="headerlink" title="ServerSocketChannel 类"></a>ServerSocketChannel 类</h4><p>网络通信 IO 操作，TCP 协议，针对面向流的监听套接字的可选择通道（一般用于服务端），流程如下：</p><ol><li>打开一个 ServerSocketChannel 通道, 绑定端口。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> ServerSocketChannel.open(); <span class="comment">// 打开通道</span></span><br></pre></td></tr></table></figure><ol start="2"><li>绑定端口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9090</span>)); <span class="comment">// 绑定端口</span></span><br></pre></td></tr></table></figure><ol start="3"><li>阻塞等待连接到来，有新连接时会创建一个 SocketChannel 通道，服务端可以通过这个通道与连接过来的客户端进行通信。等待连接到来的代码一般放在一个循环结构中。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> server.accept(); <span class="comment">// 阻塞，直到有连接过来</span></span><br></pre></td></tr></table></figure><ol start="4"><li>通过 SocketChannel 与客户端进行数据交互</li><li>关闭 SocketChannel</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.close();</span><br></pre></td></tr></table></figure><h3 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h3><p>缓冲区 Buffer 是 Java NIO 中一个核心概念，在 NIO 库中，所有数据都是用缓冲区处理的。</p><p>在读取数据时，它是直接读到缓冲区中的,在写入数据时，它也是写入到缓冲区中的,任何时候访问 NIO 中的数据，都是将它放到缓冲区中。</p><p>而在面向流 I&#x2F;O 系统中，所有数据都是直接写入或者直接将数据读取到 Stream 对象中。</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021524215.webp" alt="img"></p><h4 id="Buffer-数据类型"><a href="#Buffer-数据类型" class="headerlink" title="Buffer 数据类型"></a>Buffer 数据类型</h4><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021524947.webp" alt="img"></p><p>从类图中可以看到，7 种数据类型对应着 7 种子类，这些名字是 Heap 开头子类，数据是存放在 JVM 堆中的。</p><h4 id="MappedByteBuffer"><a href="#MappedByteBuffer" class="headerlink" title="MappedByteBuffer"></a>MappedByteBuffer</h4><p>而 MappedByteBuffer 则是存放在堆外的直接内存中，可以映射到文件。</p><p>通过 java.nio 包和 MappedByteBuffer 允许 Java 程序直接从内存中读取文件内容，通过将整个或部分文件映射到内存，由操作系统来处理加载请求和写入文件，应用只需要和内存打交道，这使得 IO 操作非常快。</p><p>Mmap 内存映射和普通标准 IO 操作的本质区别在于它并不需要将文件中的数据先拷贝至 OS 的内核 IO 缓冲区，而是可以直接将用户进程私有地址空间中的一块区域与文件对象建立映射关系，这样程序就好像可以直接从内存中完成对文件读&#x2F;写操作一样。</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021524595.webp" alt="img"></p><p>只有当缺页中断发生时，直接将文件从磁盘拷贝至用户态的进程空间内，只进行了一次数据拷贝，对于容量较大的文件来说（文件大小一般需要限制在 1.5~2G 以下），采用 Mmap 的方式其读&#x2F;写的效率和性能都非常高，大家熟知的<a href="https://link.juejin.cn/?target=https://mikechen.cc/3476.html">RocketMQ</a> 就使用了该技术。</p><h4 id="Buffer-数据流程"><a href="#Buffer-数据流程" class="headerlink" title="Buffer 数据流程"></a>Buffer 数据流程</h4><p>应用程序可以通过与 I&#x2F;O 设备建立通道来实现对 I&#x2F;O 设备的读写操作，操作的数据通过缓冲区 Buffer 来进行交互。</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021524132.webp" alt="img"></p><p>从 I&#x2F;O 设备读取数据时：</p><ol><li>应用程序调用通道 Channel 的 read() 方法</li><li>通道往缓冲区 Buffer 中填入 I&#x2F;O 设备中的数据，填充完成之后返回</li><li>应用程序从缓冲区 Buffer 中获取数据</li></ol><p>往 I&#x2F;O 设置写数据时：</p><ol><li><p>应用程序往缓冲区 Buffer 中填入要写到 I&#x2F;O 设备中的数据</p></li><li><p>调用通道 Cannel 的 write() 方法，通道将数据传输至 I&#x2F;O 设备</p></li></ol><h4 id="缓冲区核心方法"><a href="#缓冲区核心方法" class="headerlink" title="缓冲区核心方法"></a>缓冲区核心方法</h4><p>缓冲区存取数据的两个核心方法：</p><ol><li>put()：存入数据到缓冲区<ul><li>put(byte b)：将给定单个字节写入缓冲区的当前位置</li><li>put(byte[] src)：将 src 中的字节写入缓冲区的当前位置</li><li>put(int index,byte b)：将指定字节写入缓冲区的索引位置 (不会移动 position)</li></ul></li><li>get()：获取缓冲区的数据<ul><li>get()：读取单个字节</li><li>get(byte[] dst)：批量读取多个字节到 dst 中</li><li>get(int index)：读取指定索引位置的字节 (不会移动 position)</li></ul></li></ol><h3 id="Selector-选择器"><a href="#Selector-选择器" class="headerlink" title="Selector(选择器)"></a>Selector(选择器)</h3><p>Selector 类是 NIO 的核心类，Selector（选择器）选择器提供了选择已经就绪的任务的能力。</p><p>Selector 会不断的轮询注册在上面的所有 channel，如果某个 channel 为读写等事件做好准备，那么就处于就绪状态，通过 Selector 可以不断轮询发现出就绪的 channel，进行后续的 IO 操作。</p><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021524858.webp" alt="img"></p><p>一个 Selector 能够同时轮询多个 channel，这样，一个单独的线程就可以管理多个 channel，从而管理多个网络连接，这样就不用为每一个连接都创建一个线程，同时也避免了多线程之间上下文切换导致的开销。</p><h4 id="选择器使用步骤"><a href="#选择器使用步骤" class="headerlink" title="选择器使用步骤"></a>选择器使用步骤</h4><ol><li><p>获取选择器</p><p>   与通道和缓冲区的获取类似，选择器的获取也是通过静态工厂方法 open() 来得到的。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open(); <span class="comment">// 获取一个选择器实例</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>获取可选择通道</p><p>   能够被选择器监控的通道必须实现了 SelectableChannel 接口，并且需要将通道配置成非阻塞模式，否则后续的注册步骤会抛出 IllegalBlockingModeException。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9090</span>)); <span class="comment">// 打开 SocketChannel 并连接到本机 9090 端口</span></span><br><span class="line">socketChannel.configureBlocking(<span class="literal">false</span>); <span class="comment">// 配置通道为非阻塞模式</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>将通道注册到选择器</p><p>   通道在被指定的选择器监控之前，应该先告诉选择器，并且告知监控的事件，即：将通道注册到选择器。</p><p>   通道的注册通过 SelectableChannel.register(Selector selector, int ops) 来完成，ops 表示关注的事件，如果需要关注该通道的多个 I&#x2F;O 事件，可以传入这些事件类型或运算之后的结果。这些事件必须是通道所支持的，否则抛出 IllegalArgumentException。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socketChannel.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE); <span class="comment">// 将套接字通过到注册到选择器，关注 read 和 write 事件</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>轮询 select 就绪事件</p><p>   通过调用选择器的 Selector.select() 方法可以获取就绪事件，该方法会将就绪事件放到一个 SelectionKey 集合中，然后返回就绪的事件的个数。这个方法映射多路复用 I&#x2F;O 模型中的 select 系统调用，它是一个阻塞方法。正常情况下，直到至少有一个就绪事件，或者其它线程调用了当前 Selector 对象的 wakeup() 方法，或者当前线程被中断时返回。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>)&#123; <span class="comment">// 轮询，且返回时有就绪事件</span></span><br><span class="line">Set&lt;SelectionKey&gt; keys = selector.selectedKeys(); <span class="comment">// 获取就绪事件集合</span></span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>   有 3 种方式可以 select 就绪事件：1. select() 阻塞方法，有一个就绪事件，或者其它线程调用了 wakeup() 或者当前线程被中断时返回。2. select(long timeout) 阻塞方法，有一个就绪事件，或者其它线程调用了 wakeup()，或者当前线程被中断，或者阻塞时长达到了 timeout 时返回。不抛出超时异常。3. selectNode() 不阻塞，如果无就绪事件，则返回 0；如果有就绪事件，则将就绪事件放到一个集合，返回就绪事件的数量。</code></pre><ol start="5"><li><p>处理就绪事件</p><p>   每次可以 select 出一批就绪的事件，所以需要对这些事件进行迭代</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(SelectionKey key : keys)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key.isWritable())&#123; <span class="comment">// 可写事件</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Bye&quot;</span>.equals( (line = scanner.nextLine()) ))&#123;</span><br><span class="line">            socketChannel.shutdownOutput();</span><br><span class="line">            socketChannel.close();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buf.put(line.getBytes());</span><br><span class="line">        buf.flip();</span><br><span class="line">        socketChannel.write(buf);</span><br><span class="line">        buf.compact();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从一个 SelectionKey 对象可以得到：</p><ol><li>就绪事件的对应的通道；</li><li>就绪的事件。通过这些信息，就可以很方便地进行 I&#x2F;O 操作。</li></ol><h1 id="Java-实现文件上传，下载-理论，实践"><a href="#Java-实现文件上传，下载-理论，实践" class="headerlink" title="Java 实现文件上传，下载 (理论，实践)"></a>Java 实现文件上传，下载 (理论，实践)</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream = socket.getInputStream();</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((i = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        name = <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, i);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(name)) &#123;</span><br><span class="line">                        filePath = <span class="string">&quot;D:/暂存文件/信封.txt&quot;</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;2&quot;</span>.equals(name)) &#123;</span><br><span class="line">                        filePath = <span class="string">&quot;D:/暂存文件/信封 1.txt&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    bufferedInputStream = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line">                    <span class="type">byte</span>[] run = Fuzhu.run(bufferedInputStream);</span><br><span class="line">                    outputStream = socket.getOutputStream();</span><br><span class="line">                    bufferedOutputStream = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(outputStream);</span><br><span class="line">                    bufferedOutputStream.write(run);</span><br><span class="line">                    bufferedOutputStream.flush();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (bufferedOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                            bufferedOutputStream.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                            outputStream.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (bufferedInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                            bufferedInputStream.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                            inputStream.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请选择 上传 或 下载操作&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;退出程序 x&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;下载&quot;</span>:</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Client</span>().downFile();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;上传&quot;</span>:</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Client</span>().upLoad();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;x&quot;</span>:</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请选择可用项&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序已退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请选择你要下载的文件&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1 -&gt; 信封.txt&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2 -&gt; 信封 1.txt&quot;</span>);</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            localHost = InetAddress.getLocalHost();</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(localHost.getHostAddress(), <span class="number">8080</span>);</span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            outputStream.write(next.getBytes());</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">            bufferedInputStream = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">            <span class="type">byte</span>[] run = Fuzhu.run(bufferedInputStream);</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:/下载/&quot;</span> + next + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            bufferedOutputStream = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line">            bufferedOutputStream.write(run);</span><br><span class="line">            bufferedOutputStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bufferedOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bufferedOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (bufferedInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bufferedInputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upLoad</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入文件名称&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入信封内容&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/暂存文件&quot;</span> + name + <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            fileOutputStream.write(content.getBytes());</span><br><span class="line">            fileOutputStream.flush();</span><br><span class="line">            System.out.println(<span class="string">&quot;上传完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="传输工具类"><a href="#传输工具类" class="headerlink" title="传输工具类"></a>传输工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fuzhu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] run(InputStream a) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((i = a.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            x.write(bytes, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] byteArray = x.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> byteArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="一、多线程三种调用方式"><a href="#一、多线程三种调用方式" class="headerlink" title="一、多线程三种调用方式"></a>一、多线程三种调用方式</h2><p>第一种方式：</p><p>编写一个类，直接继承**<code>java.long.Thread</code><strong>，重写</strong><code>run</code>方法**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义线程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        <span class="comment">//t.run(); // 不会启动线程，不会分配新的分支栈。（这种方式就是单线程。）</span></span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式：</p><p>编写一个类，实现 <strong><code>java.lang.Runnable</code></strong> 接口，实现**<code>run 方法</code>**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnble</span> <span class="keyword">implements</span> <span class="title class_">Runnble</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnble</span>);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用匿名内部类创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建线程对象，采用匿名内部类方式。</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;t 线程---&gt; &quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main 线程---&gt; &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种方式：</p><p>编写一个类，实现 <strong><code>java.util.concurrent.Callable</code></strong> 接口，实现**<code>call 方法</code>**。</p><p>call 方法具有返回值，Java5 使用 Future 接口来代表 call 方法的返回值，并且为 Future 接口提供了一个实现类 FutureTask<br>。FutureTask 既实现了 Future 接口又实现了 Runnable 接口。所以 FutureTask 可以作为 Thread 构造方法的参数传入来创建线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        Callable&lt;Integer&gt; callable = <span class="keyword">new</span> <span class="title class_">Mycallable</span>();</span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">        Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">        <span class="comment">//线程开始执行</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这三种创建线程的区别：</p><ol><li><p>第二种创建线程的方式相比于第一种创建线程的优点</p><ul><li>更适合多线程实行相同任务，可以减少代码量</li><li>避免了单继承的局限性</li><li>线程和任务分离，提高了程序健壮性</li><li>线程池接受 Runnable 类型任务，不接受 Thread 类型线程</li></ul></li><li><p>第三种相比于前两种创建线程的区别：</p><p>使用 Callable 方式创建线程时，call 方法具有返回值。Future 封装了 call 方法的返回值，可以通过 FutureTask 的对象调用 Future 接口的一些方法来控制任务。如：V get（）：调用这个方法可以阻塞主线程直到子线程返回结果。等等。</p></li></ol><h2 id="二、多线程基本方法"><a href="#二、多线程基本方法" class="headerlink" title="二、多线程基本方法"></a>二、多线程基本方法</h2><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">static Thread currentThread()</td><td align="center">获取当前线程对象</td></tr><tr><td align="center">String getName()</td><td align="center">获取线程对象名字</td></tr><tr><td align="center">void setName(String name)</td><td align="center">修改线程对象名字</td></tr><tr><td align="center">static void sleep(long millis)</td><td align="center">让当前线程休眠 millis 秒</td></tr><tr><td align="center">void interrupt()</td><td align="center">终止线程的睡眠</td></tr><tr><td align="center">void stop()</td><td align="center">强行终止一个线程的执行 (不推荐使用)<br /> 建议使用布尔标记来结束进程的执行</td></tr><tr><td align="center">int getPriority()</td><td align="center">获得线程优先级</td></tr><tr><td align="center">void setPriority(int newPriority)</td><td align="center">设置线程优先级</td></tr><tr><td align="center">static void yield()</td><td align="center">让位方法，当前线程暂停，回到就绪状态，让给其它线程。<br /> 注意：在回到就绪之后，有可能还会再次抢到。</td></tr><tr><td align="center">void join()</td><td align="center">将一个线程合并到当前线程中，当前线程受阻塞，加入的线程执行直到结束</td></tr><tr><td align="center">void setDaemon(boolean on)</td><td align="center">on 为 true 表示把线程设置为守护线程</td></tr></tbody></table><p>setPriority(int newPriority) 参数使用的常量:</p><table><thead><tr><th align="center">常量名</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">static int MAX_PRIORITY</td><td align="center">最高优先级（10）</td></tr><tr><td align="center">static int MIN_PRIORITY</td><td align="center">最低优先级（1）</td></tr><tr><td align="center">static int NORM_PRIORITY</td><td align="center">默认优先级（5）</td></tr></tbody></table><p>关于 Object 类的 wait()、notify()、notifyAll() 方法</p><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">void wait()</td><td align="center">让活动在当前对象的线程无限等待（释放之前占有的锁）</td></tr><tr><td align="center">void notify()</td><td align="center">唤醒当前对象正在等待的线程（只提示唤醒，不会释放锁）</td></tr><tr><td align="center">void notifyAll()</td><td align="center">唤醒当前对象全部正在等待的线程（只提示唤醒，不会释放锁）</td></tr></tbody></table><p>wait 和 notify 方法<strong>不是线程对象的方法</strong>，是 java 中任何一个 java 对象都有的方法，因为这两个方法是 <strong><code>Object 类中自带</code></strong> 的。</p><p><strong>wait 方法和 notify 方法不是通过线程对象调用</strong></p><p>作用：</p><p>对应<strong>生产消费者模式</strong></p><p><strong>什么是生产消费者模式</strong></p><ul><li>生产线程负责生产，消费线程负责消费。</li><li>生产线程和消费线程要达到均衡。</li><li>这是一种特殊的业务需求，在这种特殊的情况下需要使用<strong>wait 方法和 notify 方法</strong>。</li></ul><h2 id="三、死锁"><a href="#三、死锁" class="headerlink" title="三、死锁"></a>三、死锁</h2><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p><strong>死锁 是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。</strong>也就是两个线程拥有锁的情况下，又在尝试获取对方的锁，从而造成程序一直阻塞的情况。</p><p>死锁代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lockA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lockB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 1.占有一把锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1 获得锁 A&quot;</span>);</span><br><span class="line">                <span class="comment">// 休眠 1s（让线程 2 有时间先占有锁 B）</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取线程 2 的锁 B</span></span><br><span class="line">                <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 1 获得锁 B&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 占 B 锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2 获得锁 B&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取线程 1 的锁 A</span></span><br><span class="line">                <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 2 获得了锁 A&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="死锁产生的原因"><a href="#死锁产生的原因" class="headerlink" title="死锁产生的原因"></a>死锁产生的原因</h3><p>形成死锁主要由以下 4 个因素造成的：</p><ol><li>互斥条件：一个资源只能只能被⼀个线程占有，当这个资源被占用之后其他线程就只能等待。</li><li>不可被剥夺条件：当⼀个线程不主动释放资源时，此资源一直被拥有线程占有。</li><li>请求并持有条件：线程已经拥有了⼀个资源之后，还不满足，又尝试请求新的资源。</li><li>环路等待条件：多个线程在请求资源的情况下，形成了环路链。</li></ol><h3 id="如何解决死锁问题"><a href="#如何解决死锁问题" class="headerlink" title="如何解决死锁问题"></a>如何解决死锁问题</h3><p>改变产生死锁原因中的任意⼀个或多个条件就可以解决死锁的问题，其中可以被修改的条件只有两个：<strong>请求并持有条件</strong> 和 <strong>环路等待条件</strong>。 </p><h4 id="改变环路等待条件"><a href="#改变环路等待条件" class="headerlink" title="改变环路等待条件"></a>改变环路等待条件</h4><p>通过修改获取锁的有序性来改变环路等待条件，修改代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnDeadLock2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lockA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lockB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1 得到锁 A&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 1 得到锁 B&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 1 释放锁 B&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1 释放锁 A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2 得到锁 A&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 2 得到锁 B&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程 2 释放锁 B&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2 释放锁 A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="破坏请求并持有条件"><a href="#破坏请求并持有条件" class="headerlink" title="破坏请求并持有条件"></a>破坏请求并持有条件</h4><p>可以通过破坏请求并持有条件解决死锁，修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnDeadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lockA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lockB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1 得到锁 A&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                synchronized (lockB) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;线程 1 得到锁 B&quot;);</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;线程 1 释放锁 B&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1 释放锁 A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2 得到锁 B&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                synchronized (lockA) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;线程 2 得到锁 A&quot;);</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;线程 2 释放锁 A&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2 释放锁 B&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><h2 id="一、何为-Base64-算法"><a href="#一、何为-Base64-算法" class="headerlink" title="一、何为 Base64 算法"></a>一、何为 Base64 算法</h2><p><strong>Base64</strong>是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 2 的 6 次方等于 64，所以每 6 个比特为一个单元，对应某个可打印字符。3 个字节有 24 个比特，对应于 4 个 Base64 单元，即 3 个字节可由 4 个可打印字符来表示。它可用来作为电子邮件的传输编码。在 Base64 中的可打印字符包括字母<code>A-Z</code>、<code>a-z</code>、数字<code>0-9</code>，这样共有 62 个字符，此外两个可打印符号在不同的系统中而不同。</p><p>Base64 常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括 MIME 的电子邮件及 XML 的一些复杂数据。</p><h2 id="二、Base64-算法是如何设计的"><a href="#二、Base64-算法是如何设计的" class="headerlink" title="二、Base64 算法是如何设计的"></a>二、Base64 算法是如何设计的</h2><p>在不同的实现中，Base64 算法中由 64 个字符组成的字符集是不一样的。但是通常的实现方法是选择 64 个通用且能打印的字符来组成这样一个集合。且要保证这个集合中的每个字符组成的数据在数据传输系统中不会被修改。</p><p>早期的 Base64 算法是用来实现运行相同操作系统之间进行拨号操作而创建的。</p><p>让我们先来看一下最通常的 Base64 索引表：</p><table><thead><tr><th align="center">索引</th><th align="center">对应字符</th><th align="center">索引</th><th align="center">对应字符</th><th align="center">索引</th><th align="center">对应字符</th><th align="center">索引</th><th align="center">对应字符</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">A</td><td align="center">16</td><td align="center">Q</td><td align="center">32</td><td align="center">g</td><td align="center">48</td><td align="center">w</td></tr><tr><td align="center">1</td><td align="center">B</td><td align="center">17</td><td align="center">R</td><td align="center">33</td><td align="center">h</td><td align="center">49</td><td align="center">x</td></tr><tr><td align="center">2</td><td align="center">C</td><td align="center">18</td><td align="center">S</td><td align="center">34</td><td align="center">i</td><td align="center">50</td><td align="center">y</td></tr><tr><td align="center">3</td><td align="center">D</td><td align="center">19</td><td align="center">T</td><td align="center">35</td><td align="center">j</td><td align="center">51</td><td align="center">z</td></tr><tr><td align="center">4</td><td align="center">E</td><td align="center">20</td><td align="center">U</td><td align="center">36</td><td align="center">k</td><td align="center">52</td><td align="center">0</td></tr><tr><td align="center">5</td><td align="center">F</td><td align="center">21</td><td align="center">V</td><td align="center">37</td><td align="center">l</td><td align="center">53</td><td align="center">1</td></tr><tr><td align="center">6</td><td align="center">G</td><td align="center">22</td><td align="center">W</td><td align="center">38</td><td align="center">m</td><td align="center">54</td><td align="center">2</td></tr><tr><td align="center">7</td><td align="center">H</td><td align="center">23</td><td align="center">X</td><td align="center">39</td><td align="center">n</td><td align="center">55</td><td align="center">3</td></tr><tr><td align="center">8</td><td align="center">I</td><td align="center">24</td><td align="center">Y</td><td align="center">40</td><td align="center">o</td><td align="center">56</td><td align="center">4</td></tr><tr><td align="center">9</td><td align="center">J</td><td align="center">25</td><td align="center">Z</td><td align="center">41</td><td align="center">p</td><td align="center">57</td><td align="center">5</td></tr><tr><td align="center">10</td><td align="center">K</td><td align="center">26</td><td align="center">a</td><td align="center">42</td><td align="center">q</td><td align="center">58</td><td align="center">6</td></tr><tr><td align="center">11</td><td align="center">L</td><td align="center">27</td><td align="center">b</td><td align="center">43</td><td align="center">r</td><td align="center">59</td><td align="center">7</td></tr><tr><td align="center">12</td><td align="center">M</td><td align="center">28</td><td align="center">c</td><td align="center">44</td><td align="center">s</td><td align="center">60</td><td align="center">8</td></tr><tr><td align="center">13</td><td align="center">N</td><td align="center">29</td><td align="center">d</td><td align="center">45</td><td align="center">t</td><td align="center">61</td><td align="center">9</td></tr><tr><td align="center">14</td><td align="center">O</td><td align="center">30</td><td align="center">e</td><td align="center">46</td><td align="center">u</td><td align="center">62</td><td align="center">+</td></tr><tr><td align="center">15</td><td align="center">P</td><td align="center">31</td><td align="center">f</td><td align="center">47</td><td align="center">v</td><td align="center">63</td><td align="center">&#x2F;</td></tr></tbody></table><h2 id="三、Base64-如何转换"><a href="#三、Base64-如何转换" class="headerlink" title="三、Base64 如何转换"></a>三、Base64 如何转换</h2><ol><li>把 3 个字节变成 4 个字节</li><li>每 76 哥字符加一个换行符</li><li>最后的结束符也要处理</li></ol><p>例如：<br>   转换前 11111111, 11111111, 11111111 （二进制）</p><p>   转换后 00111111, 00111111, 00111111, 00111111 （二进制）</p><p>   上面的三个字节是原文，下面的四个字节是转换后的 Base64 编码，其前两位均为 0。</p><p>   转换后，通过上面的码表来得到想要的字符串</p><h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><h2 id="一、为什么要使用-Lambda-表达式"><a href="#一、为什么要使用-Lambda-表达式" class="headerlink" title="一、为什么要使用 Lambda 表达式"></a>一、为什么要使用 Lambda 表达式</h2><p>Lambda 表达式就是为了使得我们的代码更加的简洁。如何简洁呢？我们直接举个例子来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//第一种</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不使用 Lambda 表达式&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="comment">//第二种</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable1</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;使用 Lambda 表达式&quot;</span>);</span><br><span class="line">        runnable1.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前我们新建一个线程使用 5 行代码，但是如果我们使用 lambda 表达式只需要 1 行代码即可。</p><h2 id="二、Lambda-表达式的使用"><a href="#二、Lambda-表达式的使用" class="headerlink" title="二、Lambda 表达式的使用"></a>二、Lambda 表达式的使用</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><p>在上面的例子中我们使用了这样一行 () -&gt; System.out.println(“使用 Lambda 表达式”);下面我们对 lambda 的格式进行一个介绍：</p><ul><li>左边括号：lambda 的形参列表，就好比是我们定义一个接口，里面有一个抽象方法，这个抽象方法的形参列表。</li><li>箭头：lambda 的操作符，所以你看见这个箭头心中知道这是一个 lambda 表达式就可以了。</li><li>右边 lambda 体：就好比是我们实现了接口中的抽象方法。</li></ul><p>lambda 表达式的使用可以分为以下 5 种基本的情况。我们一个一个来介绍。</p><h3 id="2-无参无返回值"><a href="#2-无参无返回值" class="headerlink" title="2. 无参无返回值"></a>2. 无参无返回值</h3><p>这个是最简单的一种情况，就是刚刚我们所举的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此时如果方法体比较复杂是多行代码，那么这个 &#123;&#125; 是不能省略的</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">runnable1</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用 Lambda 表达式&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;使用 Lambda 表达式&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以看到没有任何参数也没有任何返回值，因此可以直接写，不过 lambda 体如果不是一行代码，那么就需要使用 {} 将其括起来。</p><h3 id="3-有参数无返回值"><a href="#3-有参数无返回值" class="headerlink" title="3.有参数无返回值"></a>3.有参数无返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//第一种：没有使用 lambda 表达式</span></span><br><span class="line">    Consumer&lt;String&gt; consumer = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="string">&quot;没有使用 lambda:有参数，但是没有返回值&quot;</span>);</span><br><span class="line">    <span class="comment">//第二种：使用 lambda 表达式</span></span><br><span class="line">    Consumer&lt;String&gt; consumer1 = (String s)-&gt;&#123;</span><br><span class="line">        <span class="comment">//此时只有一行输出代码，因此可以省去外部的 &#123;&#125;</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="string">&quot;使用 lambda:有参数，但是没有返回值&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-有参数无返回值，数据类型可省略，称为类型推断"><a href="#4-有参数无返回值，数据类型可省略，称为类型推断" class="headerlink" title="4.有参数无返回值，数据类型可省略，称为类型推断"></a>4.有参数无返回值，数据类型可省略，称为类型推断</h3><p>这种情况只能称之为上面的一种特例，只不过我们可以不传入类型，由编译器帮我们推断出来即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; consumer1 = (s)-&gt;&#123;</span><br><span class="line">      <span class="comment">//此时只有一行输出代码，因此可以省去外部的 &#123;&#125;</span></span><br><span class="line">      System.out.println(s);</span><br><span class="line">&#125;;</span><br><span class="line">consumer.accept(<span class="string">&quot;使用 lambda:有参数，但是没有返回值&quot;</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中我们可以看到，直接把 s 中的 String 类型给去掉了，此时运行依然是正确的。这就是编译器自动为我们推断出了 s 的类型就是 String 的。只有一个参数是可以将小括号去除</p><h3 id="5-有多个参数，有返回值"><a href="#5-有多个参数，有返回值" class="headerlink" title="5.有多个参数，有返回值"></a>5.有多个参数，有返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//第一种：没有使用 lambda 表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;o1:&quot;</span>+o1);</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator.compare(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">    <span class="comment">//第二种：使用 lambda 表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator2 = (o1,o2)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;o1:&quot;</span>+o1);</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator2.compare(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用了一个比较器，当然了如果只有一条 return 语句的话，那样式就更简单了。箭头直接指向我们要返回的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; comparator2 = (o1,o2)-&gt; o1.compareTo(o2);</span><br><span class="line">System.out.println(comparator2.compare(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="三、Lambda-表达式深入解析"><a href="#三、Lambda-表达式深入解析" class="headerlink" title="三、Lambda 表达式深入解析"></a>三、<strong>Lambda 表达式深入解析</strong></h2><p>想要对 lambda 表达式有一个深入的理解，我们需要去认识另外一个知识点，那就是函数式接口。在上面我们的举得例子中比如 Consumer 或者是 Comparator 为什么能够使用 lambda 呢？就是因为实函数式接口，下面我们来认识一下：</p><h3 id="1-什么是函数式接口"><a href="#1-什么是函数式接口" class="headerlink" title="1.什么是函数式接口"></a>1.什么是函数式接口</h3><p>比如我们的 Runnable 就是一个函数式接口，我们可以到源码中看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他主要有如下的特点：</p><ol><li><strong>含有@FunctionalInterface 注解</strong></li><li><strong>只有一个抽象方法</strong></li></ol><p><strong>也就是说只有函数式接口的变量或者是函数式接口，才能够赋值为 Lambda 表达式。</strong>当然了方法的类型可以任意。</p><h3 id="2-函数式接口有什么用"><a href="#2-函数式接口有什么用" class="headerlink" title="2.函数式接口有什么用"></a>2.函数式接口有什么用</h3><p>函数式接口能够接受匿名内部类的实例化对象，换句话说，我们可以使用匿名内部类来实例化函数式接口的对象，而 Lambda 表达式能够代替内部类实现代码的进一步简化。并且 java 为我们提供了四个比较重要的函数式接口：</p><ol><li>消费型接口：Consumer&lt; T&gt; void accept(T t) 有参数，无返回值的抽象方法；</li><li>供给型接口：Supplier &lt; T&gt; T get() 无参有返回值的抽象方法；</li><li>断定型接口： Predicate&lt; T&gt; boolean test(T t):有参，但是返回值类型是固定的 boolean</li><li>函数型接口： Function&lt; T，R&gt; R apply(T t) 有参有返回值的抽象方法；</li></ol><p>这里仅仅是给出了 4 个，其实 java 提供了很多。比如 java.util.function 包下还有很多函数式接口可供使用。</p><h3 id="3-自定义一个函数式接口"><a href="#3-自定义一个函数式接口" class="headerlink" title="3.自定义一个函数式接口"></a>3.自定义一个函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;test&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们定义了一个 MyInterface 的函数式接口，里面定义了一个 test 方法，如果我们定义了两个就不能使用 lambda 表达式了，为什么呢？因为 lambda 是一个接口方法，如果有两个方法，应该指定哪一个呢？就搞混了。</p><h3 id="4-类型推导"><a href="#4-类型推导" class="headerlink" title="4.类型推导"></a>4.类型推导</h3><p>在第二部分介绍 lambda 语法的时候曾经说过，lambda 本身具有类型推导，那么这个类型推导可以做到什么程度呢？编译器负责推导 lambda 的类型，它利用上下文<strong>被期待的类型</strong>当做推导的目标类型，当满足下面条件时，就会被赋予目标类型：</p><ol><li>被期待的目标类型是一个函数式接口</li><li>lambad 的入参类型和数量与该接口一致</li><li>返回类型一致</li><li>抛出异常类型一致</li></ol><p>其实<strong>lambda 最后会由编译器生成 static 方法在当前类中，利用了 invokedynamic 命令脱离了内部类实现的优化。</strong></p><h1 id="Stream-流"><a href="#Stream-流" class="headerlink" title="Stream 流"></a>Stream 流</h1><p>Stream 操作的三个步骤</p><ul><li>创建 stream</li><li>中间操作 (过滤、map)</li><li>终止操作</li></ul><h2 id="一、Stream-流的格式"><a href="#一、Stream-流的格式" class="headerlink" title="一、Stream 流的格式"></a>一、Stream 流的格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span>;</span><br><span class="line">            -----&gt; 参数：<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt;  (函数式接口)</span><br><span class="line">                    ----&gt; 抽象方法：<span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">            -----&gt; 参数：<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt;  (函数式接口)</span><br><span class="line">                    ----&gt; 抽象方法：<span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br></pre></td></tr></table></figure><h2 id="二、获取流"><a href="#二、获取流" class="headerlink" title="二、获取流"></a>二、获取流</h2><p>根据集合来获取：</p><pre><code>根据 Collection 获取流：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title function_">stream</span><span class="params">()</span></span><br></pre></td></tr></table></figure><ol><li>根据 List 获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 List 集合</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;张老三&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;张小三&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;赵五&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;张六&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;王八&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream();</span><br></pre></td></tr></table></figure><ol start="2"><li>根据 Set 集合获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 List 集合</span></span><br><span class="line">   Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">   set.add(<span class="string">&quot;张老三&quot;</span>);</span><br><span class="line">   set.add(<span class="string">&quot;张小三&quot;</span>);</span><br><span class="line">   set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">   set.add(<span class="string">&quot;赵五&quot;</span>);</span><br><span class="line">   set.add(<span class="string">&quot;张六&quot;</span>);</span><br><span class="line">   set.add(<span class="string">&quot;王八&quot;</span>);</span><br><span class="line">   Stream&lt;String&gt; stream2 = set.stream();</span><br></pre></td></tr></table></figure><ol start="3"><li>根据 Map 集合获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Map 集合</span></span><br><span class="line">Map&lt;Integer,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">&quot;张老三&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">&quot;张小三&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">map.put(<span class="number">4</span>,<span class="string">&quot;赵五&quot;</span>);</span><br><span class="line">map.put(<span class="number">5</span>,<span class="string">&quot;张六&quot;</span>);</span><br><span class="line">map.put(<span class="number">6</span>,<span class="string">&quot;王八&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.1 根据 Map 集合的键获取流</span></span><br><span class="line">Set&lt;Integer&gt; map1 = map.keySet();</span><br><span class="line">Stream&lt;Integer&gt; stream3 = map1.stream();</span><br><span class="line"><span class="comment">// 3.2 根据 Map 集合的值获取流</span></span><br><span class="line">Collection&lt;String&gt; map2 = map.values();</span><br><span class="line">Stream&lt;String&gt; stream4 = map2.stream();</span><br><span class="line"><span class="comment">// 3.3 根据 Map 集合的键值对对象获取瑞</span></span><br><span class="line">Set&lt;Map.Entry&lt;Integer, String&gt;&gt; map3 = map.entrySet();</span><br><span class="line">Stream&lt;Map.Entry&lt;Integer, String&gt;&gt; stream5 = map3.stream();</span><br></pre></td></tr></table></figure><ol start="4"><li>根据数组获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据数组获取流</span></span><br><span class="line">   String[] arr = &#123;<span class="string">&quot;张颜宇&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;赵五&quot;</span>,<span class="string">&quot;刘六&quot;</span>,<span class="string">&quot;王七&quot;</span>&#125;;</span><br><span class="line">   Stream&lt;String&gt; stream6 = Stream.of(arr);</span><br></pre></td></tr></table></figure><h2 id="三、Stream-流的常用方法"><a href="#三、Stream-流的常用方法" class="headerlink" title="三、Stream 流的常用方法"></a>三、Stream 流的常用方法</h2><p>Stream 流的常用方法：</p><pre><code>终结方法：返回值类型不再是 Stream 接口本身类型的方法，例如：forEach() 方法和 count 方法非终结方法/延迟方法：返回值类型仍然是 Stream 接口自身类型的方法，除了终结方法都是延迟方法。例如：filter,limit,skip,map,conat</code></pre><table><thead><tr><th align="center">方法名称</th><th align="center">方法作用</th><th align="center">方法种类</th><th align="center">是否支持链式调用</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计个数</td><td align="center">终结方法</td><td align="center">否</td></tr><tr><td align="center">forEach</td><td align="center">逐一处理</td><td align="center">终结方法</td><td align="center">否</td></tr><tr><td align="center">filter</td><td align="center">过滤</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">limit</td><td align="center">取用前几个</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">skip</td><td align="center">跳过前几个</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">map</td><td align="center">映射</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">cocat</td><td align="center">组合 合并两个流</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">distinct</td><td align="center">去重</td><td align="center">函数拼接</td><td align="center">是</td></tr><tr><td align="center">anyMatch</td><td align="center">只要有一个元素匹配传入的条件，就返回 true。</td><td align="center">终结方法</td><td align="center">否</td></tr><tr><td align="center">allMatch</td><td align="center">只要有一个元素不匹配传入的条件，就返回 false；<br /> 如果全部匹配，则返回 true。</td><td align="center">终结方法</td><td align="center">否</td></tr><tr><td align="center">noneMatch</td><td align="center">只要有一个元素匹配传入的条件，就返回 false；<br /> 如果全部不匹配，则返回 true。</td><td align="center">终结方法</td><td align="center">否</td></tr><tr><td align="center">collect</td><td align="center">收集</td><td align="center">终结方法</td><td align="center">否</td></tr></tbody></table><h2 id="四、收集-Stream-流"><a href="#四、收集-Stream-流" class="headerlink" title="四、收集 Stream 流"></a>四、收集 Stream 流</h2><h3 id="收集-Stream-流中的结果到集合"><a href="#收集-Stream-流中的结果到集合" class="headerlink" title="收集 Stream 流中的结果到集合"></a>收集 Stream 流中的结果到集合</h3><p>Stream 流提供 collect 方法，其参数需要一个 java.util.stream.Collector&lt;T,A,R&gt; 接口对象来指定收集到哪种集合中。java.util.stream.Collectors 类提供了一些方法，可以作为 Collector 接口的实例，最常用的就是静态方法 toList 与 toSet</p><ol><li>收集到 List 集合——toList</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>收集到 Set 集合——toSet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; set = stream.collect(Collectors.toSet());</span><br><span class="line">    System.out.println(set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>收集到指定集合</p><p> 例如：收集到 ArrayList 集合中</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArrayList</span><span class="params">()</span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">ArrayList&lt;String&gt; arrayList = stream.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">System.out.println(arrayList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="收集集合中的数据到数组中"><a href="#收集集合中的数据到数组中" class="headerlink" title="收集集合中的数据到数组中"></a>收集集合中的数据到数组中</h3><ol><li>转成 Object 数组——toArray</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2Array</span><span class="params">()</span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">Object[] array = stream.toArray();</span><br><span class="line"><span class="keyword">for</span>(Object o : array)&#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方式转成 Object 类型的数组，我们操作起来不是很方便</p><ol start="2"><li><p>转成指定类型的数组——toArray</p><p> 例如：将 String 流转成 String 数组</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2Array1</span><span class="params">()</span>&#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">String[] array = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">for</span>(String str : array)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;元素是：&quot;</span> + str + <span class="string">&quot;  元素长度是：&quot;</span> + str.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对流中的数据的操作"><a href="#对流中的数据的操作" class="headerlink" title="对流中的数据的操作"></a>对流中的数据的操作</h3><ol><li><p>对流中的数据进行聚合计算<br>当我们使用 Stream 流处理数据后，可以像数据库聚合函数一样，对某个字段进行处理，比如，获取最大值，获取最小值，求总和，平均值，统计数量等。</p><ol><li>获取最大值——Collectors.maxBy</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCollectTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;Student&gt; stream = Stream.of(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">21</span>, <span class="number">97D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">23</span>, <span class="number">88D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>, <span class="number">62D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">18</span>, <span class="number">59D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;钱七&quot;</span>, <span class="number">24</span>, <span class="number">100D</span>)</span><br><span class="line">        );</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 查找分数最大的 student</span></span><br><span class="line">        Optional&lt;Student&gt; optionalStudent = stream.collect(Collectors.maxBy((s1, s2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.getScore() - s2.getScore() &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> optionalStudent.get();</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>获取最小值——Collectors.minBy</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCollectTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;Student&gt; stream = Stream.of(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">21</span>, <span class="number">97D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">23</span>, <span class="number">88D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>, <span class="number">62D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">18</span>, <span class="number">59D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;钱七&quot;</span>, <span class="number">24</span>, <span class="number">100D</span>)</span><br><span class="line">        );</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 查找分数最小的 student</span></span><br><span class="line">        Optional&lt;Student&gt; optionalStudent = stream.collect(Collectors.minBy((s1, s2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.getScore() - s2.getScore() &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> optionalStudent.get();</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>求和——Collectors.summingDouble</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求所有分数之和</span></span><br><span class="line"><span class="type">Double</span> <span class="variable">aDouble</span> <span class="operator">=</span> stream.collect(Collectors.summingDouble(Student::getScore));</span><br></pre></td></tr></table></figure><ol start="4"><li>求平均值——Collectors.averagingDouble</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求分数的平均值</span></span><br><span class="line"><span class="type">Double</span> <span class="variable">aDouble</span> <span class="operator">=</span> stream.collect(Collectors.averagingDouble(Student::getScore));</span><br><span class="line">System.out.println(aDouble);</span><br></pre></td></tr></table></figure><ol start="5"><li>统计数量——Collection.counting</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求流中一共有多少个数据</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">aLong</span> <span class="operator">=</span> stream.collect(Collectors.counting());</span><br><span class="line">System.out.println(aLong);</span><br></pre></td></tr></table></figure></li><li><p>对流中的数据进行分组<br>当我们使用 Stream 流处理数据后，可以根据某个属性将数据分组</p><ol><li>简单的分组——Collectors.groupingBy<br>方法定义：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K&gt; Collector&lt;T, ?, Map&lt;K, List&lt;T&gt;&gt;&gt; groupingBy(Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; classifier) &#123;</span><br><span class="line">   <span class="keyword">return</span> groupingBy(classifier, toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code> 例如：按年龄分组</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCollectTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;Student&gt; stream = Stream.of(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">21</span>, <span class="number">97D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">21</span>, <span class="number">88D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">24</span>, <span class="number">62D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">18</span>, <span class="number">59D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;钱七&quot;</span>, <span class="number">24</span>, <span class="number">100D</span>)</span><br><span class="line">        );</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 根据年龄将数据分组</span></span><br><span class="line">        Map&lt;Integer, List&lt;Student&gt;&gt; collect = stream.collect(Collectors.groupingBy(Student::getAge));</span><br><span class="line">        collect.forEach((k,v)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key:&quot;</span> + k + <span class="string">&quot;  value = &quot;</span> + v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>多级分组——Collectors.groupingBy<br>使用 Collectors.groupingBy 的重载函数，方法定义</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, A, D&gt; Collector&lt;T, ?, Map&lt;K, D&gt;&gt; groupingBy(Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; classifier,Collector&lt;? <span class="built_in">super</span> T, A, D&gt; downstream) &#123;</span><br><span class="line">   <span class="keyword">return</span> groupingBy(classifier, HashMap::<span class="keyword">new</span>, downstream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  例如：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCollectTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;Student&gt; stream = Stream.of(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">21</span>, <span class="number">97D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">21</span>, <span class="number">88D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">24</span>, <span class="number">62D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">18</span>, <span class="number">59D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;钱七&quot;</span>, <span class="number">24</span>, <span class="number">100D</span>)</span><br><span class="line">        );</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 先根据年龄分组，在根据分数分组</span></span><br><span class="line">        Map&lt;Integer, Map&lt;String, List&lt;Student&gt;&gt;&gt; collect = stream.collect(Collectors.groupingBy(Student::getAge, Collectors.groupingBy(s -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.getScore() &gt; <span class="number">80</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;优秀&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;一般&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)));</span><br><span class="line">        collect.forEach((k,v)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;age:&quot;</span> + k);</span><br><span class="line">            v.forEach((k1,v1)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\t&quot;</span> + <span class="string">&quot;k1:&quot;</span> + k1 + <span class="string">&quot;  v1:&quot;</span> + v1);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>对流中的数据进行分区——Collectors.partitioningBy<br>Collectors.partitioningBy 会根据值是否为 true，把集合分割为两个列表，一个 true 列表，一个 false 列表。</p><p>例如:</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCollectTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;Student&gt; stream = Stream.of(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">21</span>, <span class="number">97D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">21</span>, <span class="number">88D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">24</span>, <span class="number">62D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">18</span>, <span class="number">59D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;钱七&quot;</span>, <span class="number">24</span>, <span class="number">100D</span>)</span><br><span class="line">        );</span><br><span class="line"> </span><br><span class="line">        Map&lt;Boolean, List&lt;Student&gt;&gt; map = stream.collect(Collectors.partitioningBy(s -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> s.getScore() &gt; <span class="number">80</span>;</span><br><span class="line">        &#125;));</span><br><span class="line">        map.forEach((k,v) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;k:&quot;</span> + k + <span class="string">&quot;  v:&quot;</span> + v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>对流中的数据进行拼接——Collertors.joining<br>Collertors.joining 会根据指定的连接符，将所有的元素连接成一个字符串。</p><p>例如：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCollectTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;Student&gt; stream = Stream.of(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">21</span>, <span class="number">97D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">21</span>, <span class="number">88D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">24</span>, <span class="number">62D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">18</span>, <span class="number">59D</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;钱七&quot;</span>, <span class="number">24</span>, <span class="number">100D</span>)</span><br><span class="line">        );</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">collect</span> <span class="operator">=</span> stream.map(Student::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h2 id="一、获取-Jedis"><a href="#一、获取-Jedis" class="headerlink" title="一、获取 Jedis"></a>一、获取 Jedis</h2><p>Jedis 是基于 java 语言的 redis_cli</p><p>maven 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、Jedis-基本使用"><a href="#二、Jedis-基本使用" class="headerlink" title="二、Jedis 基本使用"></a>二、Jedis 基本使用</h2><ol><li>Jedis 直连</li></ol><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202404021525615.webp" alt="img"></p><p>Jedis 直连相当于一个 TCP 连接，数据传输完成后关闭连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>); <span class="comment">//创建一个连接池</span></span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource(); <span class="comment">//从连接池获取</span></span><br><span class="line">jedis.set(<span class="string">&quot;token&quot;</span>, UUID.randomUUID().toString());<span class="comment">//此处生成一个随机字符串并存入 Redis</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;token&quot;</span>);<span class="comment">//从 Redis 获取 key 为 token 的字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;token = &quot;</span> + token);<span class="comment">//此处打印可以看到我们存入的字符串</span></span><br><span class="line">jedis.close(); <span class="comment">//归还连接</span></span><br></pre></td></tr></table></figure><ol start="3"><li>简单使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CallJedis</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Jedis jedis)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedisPool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyRedisPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>,<span class="literal">null</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(CallJedis callJedis)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource())&#123;</span><br><span class="line">            callJedis.call(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisPractice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化连接池</span></span><br><span class="line">        <span class="type">MyRedisPool</span> <span class="variable">myRedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRedisPool</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 Redis 连接资源，并确保在使用后归还</span></span><br><span class="line">        myRedisPool.execute(<span class="keyword">new</span> <span class="title class_">CallJedis</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Jedis jedis)</span> &#123;</span><br><span class="line">                <span class="comment">//String</span></span><br><span class="line">                jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;huanji&quot;</span>);</span><br><span class="line">                <span class="comment">//Map</span></span><br><span class="line">                jedis.hset(<span class="string">&quot;myhash&quot;</span>,<span class="string">&quot;f1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">                <span class="comment">//List</span></span><br><span class="line">                jedis.rpushx(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                <span class="comment">//Set</span></span><br><span class="line">                jedis.sadd(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                <span class="comment">//zset</span></span><br><span class="line">                jedis.zadd(<span class="string">&quot;myzset&quot;</span>,<span class="number">22</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                <span class="comment">//获取</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                Map&lt;String, String&gt; map = jedis.hgetAll(<span class="string">&quot;myhash&quot;</span>);</span><br><span class="line">                List&lt;String&gt; mylist = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">                Set&lt;String&gt; myset = jedis.smembers(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">                List&lt;Tuple&gt; myzset = jedis.zrangeWithScores(<span class="string">&quot;myzset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">                </span><br><span class="line">                System.out.println(username);</span><br><span class="line">                System.out.println(map.toString());</span><br><span class="line">                System.out.println(mylist.toString());</span><br><span class="line">                System.out.println(myset.toString());</span><br><span class="line">                System.out.println(myzset.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringBoot-集成-Redis"><a href="#SpringBoot-集成-Redis" class="headerlink" title="SpringBoot 集成 Redis"></a>SpringBoot 集成 Redis</h1><p>首先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 yaml 文件配置 redis 访问地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># 没有密码不用加 password</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> </span><br></pre></td></tr></table></figure><p>配置 FastJson 序列化 Redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">RedisSerializer</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastJsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span>(bytes == <span class="literal">null</span> || bytes.length &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,DEFAULT_CHARSET);</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str,clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> JavaType <span class="title function_">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 Redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = &#123;&quot;unchecked&quot;,&quot;rawtypes&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="type">FastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="comment">//使用 StringRedisSerializer 来序列化和反序列化 redis 的 key 值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        <span class="comment">//Hash 的 key 也采用 StringRedisSerializer 的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 Redis 工具类 RedisCache</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间颗粒度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span> Integer timeout, <span class="keyword">final</span> TimeUnit timeUnit)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 有效时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断 key 是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operation.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存 List 数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 待缓存的 List 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">setCacheList</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;T&gt; dataList)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的 list 对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getCacheList</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存 Set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSet 缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存数据的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class="title function_">setCacheSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;T&gt; dataSet)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class="line">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            setOperation.add(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的 set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">getCacheSet</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存 Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, T&gt; dataMap)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的 Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getCacheMap</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往 Hash 中存入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> T value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Hash 中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash 中的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span></span><br><span class="line">    &#123;</span><br><span class="line">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> opsForHash.get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个 Hash 中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys Hash 键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash 对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getMultiCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 Hash 中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, hKey) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/redis&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisGet</span><span class="params">()</span>&#123;</span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;huanji&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> redisCache.getCacheObject(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="一、IOC"><a href="#一、IOC" class="headerlink" title="一、IOC"></a>一、IOC</h2><h3 id="什么是-IOC"><a href="#什么是-IOC" class="headerlink" title="什么是 IOC"></a>什么是 IOC</h3><pre><code> Inverse of Control ——**控制反转**，是一种思想，这种**控制反转的思想主要指的是将对象的创建、组装、管理都从代码中自己实现转移到了外部容器中来帮我们进行实现**。在传统的开发方式当中，我们直接手写代码去主动创建和组装对象（将对象所需要的属性注入）；在 IOC 思想中，这个过程被反转了，即由外部容器负责创建和管理对象。在 IOC 中，我们将应用程序设计成一个个的组件，每个组件提供一定的功能，并通过接口与其他组件进行交互。通过 IOC 容器，我们可以把这些组件注册并配置，**容器负责根据配置信息创建组件实例，并维护它们之间的依赖关系和生命周期。**</code></pre><h3 id="IOC-的实现方式"><a href="#IOC-的实现方式" class="headerlink" title="IOC 的实现方式"></a>IOC 的实现方式</h3><pre><code>IoC 的主要实现方式有两种：依赖查找、依赖注入。依赖注入是一种更可取的方式。那么依赖查找和依赖注入有什么区别呢？依赖查找，主要是容器为组件提供一个回调接口和上下文环境。这样一来，组件就必须自己使用容器提供的 API 来查找资源和协作对象，控制反转仅体现在那些回调方法上，容器调用这些回调方法，从而应用代码获取到资源。依赖注入，组件不做定位查询，只提供标准的 Java 方法让容器去决定依赖关系。容器全权负责组件的装配，把符合依赖关系的对象通过 Java Bean 属性或构造方法传递给需要的对象。</code></pre><h4 id="IOC-容器"><a href="#IOC-容器" class="headerlink" title="IOC 容器"></a>IOC 容器</h4><pre><code>IoC 容器：具有依赖注入功能的容器，可以创建对象的容器。IoC 容器负责实例化、定位、配置应用程序中的对象并建立这些对象之间的依赖。</code></pre><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><pre><code>DI，英文名称，Dependency Injection，意为依赖注入。依赖注入：由 IoC 容器动态地将某个对象所需要的外部资源（包括对象、资源、常量数据）注入到组件 (Controller, Service 等）之中。简单点说，就是 IoC 容器会把当前对象所需要的外部资源动态的注入给我们。Spring 依赖注入的方式主要有四个，基于注解注入方式、set 注入方式、构造器注入方式、静态工厂注入方式。推荐使用基于注解注入方式，配置较少，比较方便。</code></pre><p>基于注解注入方式：</p><p>服务层代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//code   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//多实例 每次获取 Bean 的时候会有一个新的实例 看情况添加 大部分场景不用加</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminController</span> &#123;</span><br><span class="line"><span class="comment">//自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AdminService adminService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired 与@Resource 都可以用来装配 Bean，都可以写在字段、setter 方法上。他们的区别是：</p><pre><code>@Autowired 默认按类型进行自动装配（该注解属于 Spring），默认情况下要求依赖对象必须存在，如果要允许为 null，需设置 required 属性为 false，例：@Autowired(required=false)。如果要使用名称进行装配，可以与@Qualifier 注解一起使用。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;adminService&quot;)</span></span><br><span class="line"><span class="keyword">private</span> AdminService adminService;</span><br></pre></td></tr></table></figure><pre><code>@Resource 默认按照名称进行装配（该注解属于 J2EE），名称可以通过 name 属性来指定。如果没有指定 name 属性，当注解写在字段上时，默认取字段名进行装配；如果注解写在 setter 方法上，默认取属性名进行装配。当找不到与名称相匹配的 Bean 时，会按照类型进行装配。但是，name 属性一旦指定，就只会按照名称进行装配。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;adminService&quot;)</span></span><br><span class="line"><span class="keyword">private</span> AdminService adminService;</span><br></pre></td></tr></table></figure><pre><code>除此之外，对于一些复杂的装载 Bean 的时机，比如我们需要根据配置装载不同的 Bean，以完成不同的操作，可以使用 getBean(“beanID”) 的方式来加载 Bean。通过 BeanID 加载 Bean 方法如下：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanUtils</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (BeanUtils.applicationContext == <span class="literal">null</span>) &#123;</span><br><span class="line">        BeanUtils.applicationContext = applicationContext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.containsBean(id) ? applicationContext.getBean(id) : <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeansException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;not found bean id: &quot;</span> + id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在需要加载 Bean 的地方调用该方法即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> IService <span class="title function_">loadService</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">IService</span> <span class="variable">iService</span> <span class="operator">=</span> (IService) BeanUtils.getBean(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (iService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> iService;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;加载 Bean 错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、AOP"><a href="#二、AOP" class="headerlink" title="二、AOP"></a>二、AOP</h2><h3 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h3><pre><code>AOP 即面向切面编程，可以将那些与业务不想关但是很多业务都需要调用的代码提取出来，思想就是不侵入原有代码的同时对功能进行增强。AOP 通过定义一个切面，切面可以横切到应用程序的多个模块中，并添加增强的行为。这样我们就可以将通用的功能逻辑从业务逻辑中解耦出来，提高代码的可维护性和重用性。AOP 主要一般应用于签名验签、参数校验、日志记录、事务控制、权限控制、性能统计、异常处理等。</code></pre><h3 id="AOP-涉及名词"><a href="#AOP-涉及名词" class="headerlink" title="AOP 涉及名词"></a>AOP 涉及名词</h3><ul><li><p>目标对象（Target）：需要对它进行操作的业务类</p></li><li><p>连接点（JoinPoint）：程序在运行过程中能够插入切面的地点。</p><ul><li>例如，方法调用、异常抛出等。Spring 只支持方法级的连接点。</li><li>一个类的所有方法前、后、抛出异常时等都是连接点。</li></ul></li><li><p>切入点（Pointcut）：用于定义通知应该切入到哪些连接点上。不同的通知通常需要切入到不同的连接点上，这种精准的匹配是由切入点的正则表达式来定义的。</p></li><li><p>通知（Advice）：切面的具体实现。就是要给目标对象织入的事情。<br>以目标方法为参照点，根据放置的地方不同，可分为：</p><ul><li><p>前置通知（Before）</p></li><li><p>后置通知（AfterReturning）</p></li><li><p>异常通知（AfterThrowing）</p></li><li><p>最终通知（After）</p></li><li><p>环绕通知（Around）</p><p>5 种。在实际开发中通常是切面类中的一个方法，具体属于哪类通知，通过方法上的注解区分。</p></li></ul></li><li><p>切面（Aspect）：共有功能的实现。如日志切面、权限切面、验签切面等。</p><ul><li>在实际开发中通常是一个存放共有功能实现的标准 Java 类。</li><li>当 Java 类使用了@Aspect 注解修饰时，就能被 AOP 容器识别为切面。</li><li>是通知和切点的结合，通知和切点共同定义了切面的全部内容</li></ul></li><li><p>织入（Weaving）：将切面应用到目标对象从而创建一个新的代理对象的过程。这个过程可以发生在编译时、类加载时、运行时。Spring 是在运行时完成织入，运行时织入通过 Java 语言的反射机制与动态代理机制来动态实现。</p></li><li><p>代理对象（Proxy）：将通知应用到目标对象之后被动态创建的对象。可以简单地理解为，代理对象的功能等于目标对象本身业务逻辑加上共有功能。代理对象对于使用者而言是透明的，是程序运行过程中的产物。目标对象被织入共有功能后产生的对象。</p></li></ul><p><strong>切入点（Pointcut）用法：</strong></p><pre><code>Pointcut 格式为：execution(modifier-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)1. 修饰符匹配 modifier-pattern? 例：public private2. 返回值匹配 ret-type-pattern 可以用 * 表示任意返回值3. 类路径匹配 declaring-type-pattern? 全路径的类名4. 方法名匹配 name-pattern 可以指定方法名或者用 * 表示所有方法；set* 表示所有以 set 开头的方法5. 参数匹配 (param-pattern) 可以指定具体的参数类型，多个参数用“,”分隔；可以用 * 表示匹配任意类型的参数；可以用 (..) 表示零个或多个任意参数6. 异常类型匹配 throws-pattern? 例：throws Exception</code></pre><p>其中后面跟着？表示可选项</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(public * cn.wbnull.springbootdemo.controller.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AOP-实现"><a href="#AOP-实现" class="headerlink" title="AOP 实现"></a>AOP 实现</h3><pre><code>SpringAOP 是基于动态代理实现的，动态代理有两种，一种是 JDK 动态代理，另一种是 Cglib 动态代理jdk 动态代理是利用反射的原理来实现的，需要调用反射包下的 Proxy 类的 newProxyInstance 方法来返回代理对象，这个方法中有**三个参数**，分别是用于**加载代理类的类加载器**、**被代理类实现的接口的 class 数组**、**用于增强方法的 InvocatioHandler 实现类** cglib 动态代理原理是利用 asm 开源包来实现的，是把被代理类的 class 文件加载进来，通过修改它的字节码生成子类来处理jdk 动态代理要求代理类必须有实现的接口，生成的动态代理类会和代理类实现同样的接口，cglib 则，生成的动态代理类会继承被代理类。**Spring 默认使用 jdk 动态代理，当要被代理的类没有实现任何接口的时候采用 cglib**。</code></pre><p>例如：</p><p>这是一个实现统计 controller 路由访问次数的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodCount</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 声明一个 Map 类型的对象，用于存储方法调用次数</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; count = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 定义切点，表示拦截 com.qcby.springbootdemo.Controller 包下的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.qcby.springbootdemo.Controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切点方法执行&quot;</span>);   <span class="comment">//声明切点，并不会实际调用</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 环绕通知，在目标方法执行前后进行拦截</span></span><br><span class="line">    <span class="meta">@Around(&quot;count()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">methodExec</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行前&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取方法签名信息</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> pjp.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        System.out.println(name);   <span class="comment">//-----login</span></span><br><span class="line">        System.out.println(signature.getDeclaringTypeName());  <span class="comment">//---com.qcby.springbootdemo.Controller.LoginController</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取方法参数</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;aop arg:&quot;</span> + arg);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(signature.toLongString());</span><br><span class="line">        System.out.println();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 统计方法调用次数，使用方法的签名作为 key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> signature.toLongString();</span><br><span class="line">        count.put(key, count.getOrDefault(key, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 执行目标方法</span></span><br><span class="line">        result = pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行后&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 输出访问路由次数</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Bean-容器基本理论"><a href="#三、Bean-容器基本理论" class="headerlink" title="三、Bean 容器基本理论"></a>三、Bean 容器基本理论</h2><p>Spring Bean 容器是 Spring 框架的核心组件之一，负责管理和组织应用中的对象（也称为 Bean）</p><ol><li><p>什么是 Bean？</p><ul><li>在 Spring 中，Bean 是指由 Spring 容器管理的对象。这些对象通常是应用中的组件，例如服务、数据访问对象、实体等。</li></ul></li><li><p>Spirng Bean 容器的作用：</p><ul><li>Spring Bean 容器负责创建、管理和注入（或装配）应用中的 Bean。它提供了一个环境，使得开发者可以通过配置文件或者注解的方式定义和组织 Bean。</li></ul></li><li><p>Bean 的生命周期</p><ul><li>Bean 的生命周期包括实例化、初始化、使用和销毁四个阶段。</li><li>Spring 容器负责在适当的时机执行这些阶段的操作，例如通过构造函数实例化 Bean、调用初始化方法、提供 Bean 给其他组件使用，最后在应用关闭时销毁 Bean。</li></ul></li><li><p>Bean 的作用域：</p><ul><li>Spring 支持多种 Bean 的作用域，包括单例（Singleton）、原型（Prototype）、会话（Session）、请求（Request）等。</li><li>每种作用域定义了 Bean 实例的生命周期和访问范围。</li></ul></li><li><p>Bean 的装配：</p><ul><li>装配是指将不同的 Bean 组装在一起，形成应用的组件关系。</li><li>Spring 支持通过 XML 配置、注解和 JAVA 配置等方式进行 Bean 的装配</li></ul></li><li><p>Bean 的依赖注入</p><ul><li>依赖注入是 Spring 框架的一个关键特性，它通过将一个 Bean 的依赖关系通过构造函数、Setter 方法或者接口注入到另一个 Bean 中。这样可以降低组件之间的耦合度。</li></ul></li><li><p>Bean 的自动装配：</p><ul><li>Spring 支持自动装配，通过指定 <code>@Autowired</code> 注解或者使用 XML 配置，Spring 可以自动识别和满足 Bean 之间的依赖关系。</li></ul></li><li><p>ApplicationContext 和 BeanFactory：</p><ul><li>Spring 提供了两个核心的容器接口，即<code>ApplicationContext</code>和<code>BeanFactory</code>。<code>ApplicationContext</code>是<code>BeanFactory</code>的子接口，提供了更丰富的功能，例如事件传播、AOP 等。</li></ul></li><li><p>配置元数据：</p><ul><li>Bean 的配置信息通常使用配置元数据来定义，可以使用 XML 文件、Java 配置类或者注解。配置元数据包含了 Bean 的类型、依赖关系、作用域、初始化方法、销毁方法等信息。</li></ul></li></ol><p>总体而言，Spring Bean 容器为开发者提供了一种松散耦合的方式来组织和管理应用中的组件，使得应用更加灵活、可维护和可测试。</p><h2 id="四、Spring-注解"><a href="#四、Spring-注解" class="headerlink" title="四、Spring 注解"></a>四、Spring 注解</h2><ol><li><p>声明 bean 的注解</p><ul><li><p>@Component：泛指各种组件</p></li><li><p>@Controller、@Service、@Repository 都可以称为@Component</p></li><li><p>@Controller：控制层</p></li><li><p>@Service：业务层</p></li><li><p>@Repository：数据访问层</p></li></ul></li><li><p>注入 bean 的注解</p><ul><li>@Autowired：由 Spring 提供</li><li>@Inject：由 JSR-330 提供</li><li>@Resource：由 JSR-250 提供</li></ul></li><li><p>Java 配置类相关注解</p><ul><li>@Configuration：声明当前类为配置类</li><li>@Bean：注解在方法上，声明当前方法的返回值为一个 bean，替代 xml 中的方式</li><li>@ComponentScan：用于对 Component 进行扫描</li></ul></li><li><p>切面（AOP）相关注解</p><ul><li>@Aspect：声明一个切面</li><li>@After：在方法执行之后执行（方法上）</li><li>@Before：在方法执行之前执行（方法上）</li><li>@Around：在方法执行之前与之后执行（方法上）</li><li>@PointCut：声明切点</li><li>@EnableAspectJAutoProxy：开启 Spring 对 AspectJ 代理的支持</li></ul></li><li><p>@Bean 的属性支持</p><ul><li>@Scope 设置类型包括：设置 Spring 容器如何新建 Bean 实例</li><li>Singleton：单例,一个 Spring 容器中只有一个 bean 实例，默认模式</li><li>Protetype：每次调用新建一个 bean</li><li>Request：web 项目中，给每个 http request 新建一个 bean</li><li>Session：web 项目中，给每个 http session 新建一个 bean</li><li>GlobalSession：给每一个 global http session 新建一个 Bean 实例</li></ul></li><li><p>@Value 注解</p><ul><li>注入普通字符、注入操作系统属性、注入表达式结果、注入其它 bean 属性、注入文件资源、注入网站资源、注入配置文件</li></ul></li><li><p>环境切换</p><ul><li>@Profile：指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件。</li><li>@Conditional：通过实现 Condition 接口，并重写 matches 方法，从而决定该 bean 是否被实例化。</li></ul></li><li><p>异步相关</p><ul><li>@EnableAsync：配置类中通过此注解开启对异步任务的支持</li><li>@Async：在实际执行的 bean 方法使用该注解来声明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync 开启异步任务）</li></ul></li><li><p>定时任务相关</p><ul><li>@EnableScheduling：在配置类上使用，开启计划任务的支持</li><li>@Scheduled：来申明这是一个任务，包括 cron,fixDelay,fixRate 等类型（方法上，需先开启计划任务的支持）</li></ul></li><li><p>Enable***注解说明</p><ul><li>@EnableAspectAutoProxy：开启对 AspectJ 自动代理的支持</li><li>@EnableAsync：开启异步方法的支持</li><li>@EnableScheduling：开启计划任务的支持</li><li>@EnableWebMvc：开启 web MVC 的配置支持</li><li>@EnableConfigurationProperties：开启对@ConfigurationProperties 注解配置 Bean 的支持</li><li>@EnableJpaRepositories：开启对 SpringData JPA Repository 的支持</li><li>@EnableTransactionManagement：开启注解式事务的支持</li><li>@EnableCaching：开启注解式的缓存支持</li></ul></li><li><p>测试相关注解</p><ul><li>@RunWith：运行器，Spring 中通常用于对 JUnit 的支持</li><li>@ContextConfiguration<br>用来加载配置文件，其中 classess 属性用来加载配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath*:/*.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CDPlayerTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="五、SpringBoot-注解"><a href="#五、SpringBoot-注解" class="headerlink" title="五、SpringBoot 注解"></a>五、SpringBoot 注解</h2><ol><li><p>@SpringBootApplication:<br><code>SpringBoot</code>的核心注解，主要目的是开启自动配置。它也是一个组合注解，主要组合了<code>@Configuration，@EnableAutoConfiguration（核心）和@ComponentScan</code>。可以通过<code>@SpringBootApplication</code>(exclude&#x3D;{想要关闭的自动配置的类名.class}) 来关闭特定的自动配置，其中<code>@ComponentScan</code>让<code>spring Boot</code>扫描到<code>Configuration</code>类并把它加入到程序上下文。</p></li><li><p>@EnableAutoConfiguration<br>此注释自动载入应用程序所需的所有<code>Bean</code>——这依赖于<code>Spring Boot</code>在类路径中的查找。该注解组合了<code>@Import</code>注解，<code>@Import</code>注解导入了<code>EnableAutoCofigurationImportSelector</code>类，它使用<code>SpringFactoriesLoader.loaderFactoryNames</code>方法来扫描具有<code>META-INF/spring.factories</code>文件的<code>jar</code>包。而<code>spring.factories</code>里声明了有哪些自动配置.</p></li><li><p>@Configuration:<br>等同于<code>spring</code>的<code>XML</code>配置文件；使用<code>Java</code>代码可以检查类型安全。</p></li><li><p>@ComponentScan</p><p>表示将该类自动发现扫描组件。个人理解相当于，如果扫描到有<code>@Component、@Controller、@Service</code>等这些注解的类，并注册为<code>Bean</code>，可以自动收集所有的<code>Spring</code>组件，包括<code>@Configuration</code>类。</p></li></ol><h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><h2 id="SpringBoot-项目部署-SpringSecurity"><a href="#SpringBoot-项目部署-SpringSecurity" class="headerlink" title="SpringBoot 项目部署 SpringSecurity"></a>SpringBoot 项目部署 SpringSecurity</h2><h3 id="数据库表结构"><a href="#数据库表结构" class="headerlink" title="数据库表结构"></a>数据库表结构</h3><ol><li>user 表 用户</li></ol><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed@main/img/202403021920546.png" alt="image-20240302192031335"></p><ol start="2"><li>role 表 角色</li></ol><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed@main/img/202403021920509.png" alt="image-20240302192056423"></p><ol start="3"><li>user_role 表 用户角色关系</li></ol><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed@main/img/202403021923922.png" alt="image-20240302192331838"></p><ol start="4"><li>permission 表 系统权限</li></ol><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403021924592.png" alt="image-20240302192457504"></p><ol start="5"><li>role_permission 表 角色权限关联</li></ol><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403021925052.png" alt="image-20240302192548970"></p><h3 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom 文件"></a>pom 文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.huanji<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_security_practice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring_security_practice<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>spring_security_practice<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--security--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jjwt 依赖包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- hutool 工具类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="yaml-配置"><a href="#yaml-配置" class="headerlink" title="yaml 配置"></a>yaml 配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot3-security-jwt</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#数据库驱动完整类名</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment">#数据库连接 url</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/security_practice?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="comment">#数据库用户名</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment">#数据库密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="comment"># Logger Config</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.hexadecimal:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/sq</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime lastLoginTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_permission&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Permission</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> Integer method;</span><br><span class="line">    <span class="keyword">private</span> String service;</span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRole</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_role_permission&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RolePermission</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> Integer permissionId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mapper-类"><a href="#Mapper-类" class="headerlink" title="Mapper 类"></a>Mapper 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Role&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PermissionMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Permission&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRoleMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;UserRole&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RolePermissionMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;RolePermission&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service-类"><a href="#Service-类" class="headerlink" title="Service 类"></a>Service 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleService userRoleService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RolePermissionService rolePermissionService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取权限</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Permission&gt; <span class="title function_">getPermissionByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">super</span>.getOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername, username), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getPermissionByUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Permission&gt; <span class="title function_">getPermissionByUserId</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">super</span>.getById(userId);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getPermissionByUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Permission&gt; <span class="title function_">getPermissionByUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        List&lt;Permission&gt; permissions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != user) &#123;</span><br><span class="line">            <span class="comment">//获取用户对应的全部角色</span></span><br><span class="line">            List&lt;UserRole&gt; userRoles = userRoleService.list(Wrappers.&lt;UserRole&gt;lambdaQuery().eq(UserRole::getUserId, user.getId()));</span><br><span class="line">            <span class="comment">//如果不为空</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(userRoles)) &#123;</span><br><span class="line">                List&lt;Integer&gt; roleIds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                userRoles.stream().forEach(userRole -&gt; &#123;</span><br><span class="line">                    roleIds.add(userRole.getRoleId());</span><br><span class="line">                &#125;);</span><br><span class="line">                List&lt;RolePermission&gt; rolePermissions = rolePermissionService.list(Wrappers.&lt;RolePermission&gt;lambdaQuery().in(RolePermission::getRoleId, roleIds));</span><br><span class="line">                <span class="comment">//如果不为空</span></span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(rolePermissions)) &#123;</span><br><span class="line">                    <span class="comment">//获取角色拥有权限的 id</span></span><br><span class="line">                    List&lt;Integer&gt; permissionIds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    rolePermissions.stream().forEach(rolePermission -&gt; &#123;</span><br><span class="line">                        permissionIds.add(rolePermission.getPermissionId());</span><br><span class="line">                    &#125;);</span><br><span class="line">                    permissions = permissionService.list(Wrappers.&lt;Permission&gt;lambdaQuery().in(Permission::getId, permissionIds));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permissions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RoleMapper, Role&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PermissionMapper, Permission&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RolePermissionService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RolePermissionMapper, RolePermission&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRoleService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserRoleMapper, UserRole&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户登录请求实体"><a href="#用户登录请求实体" class="headerlink" title="用户登录请求实体"></a>用户登录请求实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口响应实体"><a href="#接口响应实体" class="headerlink" title="接口响应实体"></a>接口响应实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultData</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultData&lt;String&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">success</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="string">&quot;ok&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">success</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        ResultData&lt;T&gt; resultDTO = <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;T&gt;();</span><br><span class="line">        resultDTO.setCode(ResponseCodeEnum.OK.getCode());</span><br><span class="line">        resultDTO.setMessage(message);</span><br><span class="line">        resultDTO.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultDTO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(ResponseCodeEnum.ERROR, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">error</span><span class="params">(ResponseCodeEnum responseCode, Throwable e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(responseCode, e.getMessage() != <span class="literal">null</span> ? e.getMessage() : <span class="string">&quot;系统异常，请联系管理员！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">error</span><span class="params">(ResponseCodeEnum responseCode, String message)</span> &#123;</span><br><span class="line">        ResultData&lt;T&gt; resultDTO = <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;T&gt;();</span><br><span class="line">        resultDTO.setCode(responseCode.getCode());</span><br><span class="line">        resultDTO.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> resultDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应码枚举"><a href="#响应码枚举" class="headerlink" title="响应码枚举"></a>响应码枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应状态码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResponseCodeEnum</span> &#123;</span><br><span class="line">    OK(<span class="number">200</span>, <span class="string">&quot;请求成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    BAD_REQUEST(<span class="number">400</span>, <span class="string">&quot;失败的请求&quot;</span>),</span><br><span class="line"></span><br><span class="line">    UNAUTHORIZED(<span class="number">401</span>, <span class="string">&quot;未授权&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FORBIDDEN(<span class="number">403</span>, <span class="string">&quot;禁止访问&quot;</span>),</span><br><span class="line"></span><br><span class="line">    NOT_FOUND(<span class="number">404</span>, <span class="string">&quot;请求找不到&quot;</span>),</span><br><span class="line"></span><br><span class="line">    NOT_ACCEPTABLE(<span class="number">406</span>, <span class="string">&quot;不可访问&quot;</span>),</span><br><span class="line"></span><br><span class="line">    CONFLICT(<span class="number">409</span>, <span class="string">&quot;冲突&quot;</span>),</span><br><span class="line"></span><br><span class="line">    ERROR(<span class="number">500</span>, <span class="string">&quot;服务器发生异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    ResponseCodeEnum(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ResponseCodeEnum responseCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseException</span><span class="params">(ResponseCodeEnum responseCode, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line"></span><br><span class="line">        setResponseCode(responseCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 BaseException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BaseException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">handlerGlobalException</span><span class="params">(HttpServletResponse response, BaseException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;请求异常：&quot;</span>, e);</span><br><span class="line">        response.setStatus(e.getResponseCode().getCode());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResultData.error(e.getResponseCode(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 BindException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">handlerBindException</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;请求异常：&quot;</span>, e);</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> e.getBindingResult();</span><br><span class="line">        <span class="type">FieldError</span> <span class="variable">fieldError</span> <span class="operator">=</span> bindingResult.getFieldError();</span><br><span class="line">        <span class="keyword">assert</span> fieldError != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">defaultMessage</span> <span class="operator">=</span> fieldError.getDefaultMessage();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResultData.error(ResponseCodeEnum.BAD_REQUEST, defaultMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 Exception</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">handlerException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;请求异常：&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResultData.error(ResponseCodeEnum.ERROR, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyBtaisPlus-配置"><a href="#MyBtaisPlus-配置" class="headerlink" title="MyBtaisPlus 配置"></a>MyBtaisPlus 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.huanji.spring_security_practice.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInnerInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWT-工具类"><a href="#JWT-工具类" class="headerlink" title="JWT 工具类"></a>JWT 工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;zxcvbnmfdasaererafafafafafafakjlkjalkfafadffdafadfafafaaafadfadfaf1234567890&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HEADER</span> <span class="operator">=</span> <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 jwt token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">signingKey</span> <span class="operator">=</span> Keys.hmacShaKeyFor(SECRET.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">//过期时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">tokenExpirationTime</span> <span class="operator">=</span> LocalDateTime.now().plusMinutes(EXPIRE);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                <span class="comment">//使用 HMAC SHA-512 签名算法和指定的密钥对 Token 进行签名。</span></span><br><span class="line">                .signWith(signingKey, Jwts.SIG.HS512)</span><br><span class="line">                <span class="comment">// 设置 Token 的头部信息</span></span><br><span class="line">                .header().add(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>).and()</span><br><span class="line">                <span class="comment">// 设置 Token 的签发时间</span></span><br><span class="line">                .issuedAt(Timestamp.valueOf(LocalDateTime.now()))</span><br><span class="line">                <span class="comment">// 设置 Token 的主题，通常为用户名</span></span><br><span class="line">                .subject(username)</span><br><span class="line">                <span class="comment">// 设置 Token 的过期时间</span></span><br><span class="line">                .expiration(Timestamp.valueOf(tokenExpirationTime))</span><br><span class="line">                <span class="comment">// 向 Token 中添加自定义的声明信息</span></span><br><span class="line">                .claims(Map.of(<span class="string">&quot;username&quot;</span>, username))</span><br><span class="line">                <span class="comment">// 生成最终的 Token 字符串</span></span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过令牌获取声明信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token JWT 令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含声明信息的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">getClaimsByToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用密钥创建签名密钥</span></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">signingKey</span> <span class="operator">=</span> Keys.hmacShaKeyFor(SECRET.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析令牌并验证签名</span></span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                <span class="comment">//使用指定的密钥进行验证，确保 Token 的签名有效。</span></span><br><span class="line">                .verifyWith(signingKey)</span><br><span class="line">                <span class="comment">//构建 JWT Parser，准备解析 Token。</span></span><br><span class="line">                .build()</span><br><span class="line">                <span class="comment">//解析已签名的 Token，验证签名并获取 Token 的声明（Claims）。</span></span><br><span class="line">                .parseSignedClaims(token)</span><br><span class="line">                <span class="comment">//获取 Token 的负载（Payload），即包含在 Token 中的用户定义的信息。</span></span><br><span class="line">                .getPayload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查 token 是否过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(Date expiration)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得 token 中的自定义信息,一般是获取 token 的 username，无需 secret 解密也能获得</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClaimFiled</span><span class="params">(String token, String filed)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">            <span class="keyword">return</span> jwt.getClaim(filed).asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;JwtUtil getClaimFiled error: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="账户信息实体"><a href="#账户信息实体" class="headerlink" title="账户信息实体"></a>账户信息实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> accountNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> accountNonLocked;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> credentialsNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountUser</span><span class="params">(Integer userId, String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(userId, username, password, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountUser</span><span class="params">(Integer userId, String username, String password, <span class="type">boolean</span> enabled, <span class="type">boolean</span> accountNonExpired, <span class="type">boolean</span> credentialsNonExpired, <span class="type">boolean</span> accountNonLocked, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        Assert.isTrue(username != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(username) &amp;&amp; password != <span class="literal">null</span>, <span class="string">&quot;Cannot pass null or empty values to constructor&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.enabled = enabled;</span><br><span class="line">        <span class="built_in">this</span>.accountNonExpired = accountNonExpired;</span><br><span class="line">        <span class="built_in">this</span>.credentialsNonExpired = credentialsNonExpired;</span><br><span class="line">        <span class="built_in">this</span>.accountNonLocked = accountNonLocked;</span><br><span class="line">        <span class="built_in">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWTAuthenticationFilter-过滤器"><a href="#JWTAuthenticationFilter-过滤器" class="headerlink" title="JWTAuthenticationFilter 过滤器"></a>JWTAuthenticationFilter 过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountUserDetailsService accountUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行 JWT Token 验证的过滤器。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  HTTP 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response HTTP 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain    过滤器链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException      如果发生 I/O 错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException 如果发生 Servlet 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 从请求头中获取 JWT Token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(JwtUtil.HEADER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果未获取到 Token，继续往后执行，因为后面可能有鉴权管理器等组件判断是否拥有身份凭证，可以放行</span></span><br><span class="line">        <span class="comment">// 没有 Token 相当于匿名访问，若有一些接口是需要权限的，则不能访问这些接口</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlankOrUndefined(token)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析并验证 JWT Token，获取 Token 的声明信息（Claims）</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jwtUtil.getClaimsByToken(token);</span><br><span class="line">        <span class="keyword">if</span> (claims == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>(ResponseCodeEnum.BAD_REQUEST, <span class="string">&quot;Token 异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查 Token 是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (jwtUtil.isTokenExpired(claims.getExpiration())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>(ResponseCodeEnum.BAD_REQUEST, <span class="string">&quot;Token 已过期&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 Token 的声明信息中获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建 UsernamePasswordAuthenticationToken</span></span><br><span class="line">        <span class="comment">// 这里密码为 null，是因为提供了正确的 Token，实现自动登录</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, <span class="literal">null</span>, accountUserDetailsService.getUserAuthority(username));</span><br><span class="line">        authentication.setDetails(<span class="keyword">new</span> <span class="title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将认证信息设置到 Security 上下文中</span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继续执行后续的过滤器链</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认证-授权"><a href="#认证-授权" class="headerlink" title="认证&#x2F;授权"></a>认证&#x2F;授权</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理访问被拒绝（Access Denied）情况的方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest  HTTP 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse HTTP 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e                   访问被拒绝的异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException      如果发生 I/O 错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException 如果发生 Servlet 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 设置响应的内容类型为 JSON 格式，并指定字符集为 UTF-8</span></span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置响应状态码为 403 Forbidden</span></span><br><span class="line">        httpServletResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建包含错误信息的 ResultData 对象</span></span><br><span class="line">        ResultData&lt;String&gt; resultDTO = ResultData.error(e.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取输出流，将 ResultData 对象转为 JSON 字符串并写入响应</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(resultDTO).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理身份验证失败（未经授权）情况的方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest  HTTP 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse HTTP 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e                   身份验证异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException      如果发生 I/O 错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException 如果发生 Servlet 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 设置响应的内容类型为 JSON 格式，并指定字符集为 UTF-8</span></span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置响应状态码为 401 Unauthorized</span></span><br><span class="line">        httpServletResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建包含错误信息的 ResultData 对象</span></span><br><span class="line">        ResultData&lt;String&gt; resultDTO = ResultData.error(<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取输出流，将 ResultData 对象转为 JSON 字符串并写入响应</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(resultDTO).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理身份验证成功事件的方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest  HTTP 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse HTTP 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication      包含了有关已进行身份验证的主体的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException      如果发生 I/O 错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException 如果发生 Servlet 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 设置响应的内容类型为 JSON 格式，并指定字符集为 UTF-8</span></span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成 JWT Token，并将其放置到响应头中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtil.generateToken(authentication.getName());</span><br><span class="line">        httpServletResponse.setHeader(JwtUtil.HEADER, token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建登录成功的 ResultData 对象</span></span><br><span class="line">        ResultData&lt;String&gt; resultDTO = ResultData.success(<span class="string">&quot;SuccessLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取输出流，将 ResultData 对象转为 JSON 字符串并写入响应</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(resultDTO).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理身份验证失败事件的方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest  HTTP 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse HTTP 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e                   身份验证失败的异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException      如果发生 I/O 错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException 如果发生 Servlet 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 设置响应的内容类型为 JSON 格式，并指定字符集为 UTF-8</span></span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建包含身份验证失败信息的 ResultData 对象</span></span><br><span class="line">        ResultData&lt;String&gt; resultDTO = ResultData.error(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取输出流，将 ResultData 对象转为 JSON 字符串并写入响应</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(resultDTO).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理登出成功事件的方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest  HTTP 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse HTTP 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication      包含了有关已进行身份验证的主体的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException      如果发生 I/O 错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException 如果发生 Servlet 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 如果存在已进行身份验证的主体</span></span><br><span class="line">        <span class="keyword">if</span> (authentication != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用 Spring Security 提供的 SecurityContextLogoutHandler 处理登出</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SecurityContextLogoutHandler</span>().logout(httpServletRequest, httpServletResponse, authentication);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应的内容类型为 JSON 格式，并指定字符集为 UTF-8</span></span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空响应头中的 JWT Token</span></span><br><span class="line">        httpServletResponse.setHeader(JwtUtil.HEADER, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空 Spring Security 的上下文</span></span><br><span class="line">        SecurityContextHolder.clearContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建登出成功的 ResultData 对象</span></span><br><span class="line">        ResultData&lt;String&gt; resultDTO = ResultData.success(<span class="string">&quot;SuccessLogout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取输出流，将 ResultData 对象转为 JSON 字符串并写入响应</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(resultDTO).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/user&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationProvider authenticationProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserLoginDTO userLoginDTO)</span> &#123;</span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationProvider.authenticate(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userLoginDTO.getUsername(), userLoginDTO.getPassword()));</span><br><span class="line">            <span class="comment">// 认证成功</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtil.generateToken(userLoginDTO.getUsername());</span><br><span class="line">            Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">            <span class="keyword">return</span> ResultData.success(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@PreAuthorize 配合@EnableGlobalMethodSecurity(prePostEnabled = true) 使用</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;/user/logout&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 退出登录</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">auth</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="keyword">if</span> (auth != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//清除认证</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SecurityContextLogoutHandler</span>().logout(request, response, auth);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Security-配置"><a href="#Security-配置" class="headerlink" title="Security 配置"></a>Security 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity(prePostEnabled = true, securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] URL_WHITELIST = &#123;<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/favicon.ico&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountUserDetailsService accountUserDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationFilter jwtAuthenticationFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtLogoutSuccessHandler jwtLogoutSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAccessDeniedHandler jwtAccessDeniedHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailureHandler loginFailureHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置身份认证提供者，用于对用户进行身份验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DaoAuthenticationProvider 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationProvider <span class="title function_">authenticationProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个用户认证提供者</span></span><br><span class="line">        <span class="type">DaoAuthenticationProvider</span> <span class="variable">authProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        <span class="comment">// 设置用户相关信息，可以从数据库中读取、或者缓存、或者配置文件</span></span><br><span class="line">        authProvider.setUserDetailsService(accountUserDetailsService);</span><br><span class="line">        <span class="comment">// 设置加密机制，用于对用户进行身份验证</span></span><br><span class="line">        authProvider.setPasswordEncoder(passwordEncoder());</span><br><span class="line">        <span class="keyword">return</span> authProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置身份验证管理器，用于处理身份验证请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config AuthenticationConfiguration 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AuthenticationManager 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(AuthenticationConfiguration config)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> config.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 Spring Security 过滤器链，定义请求的安全配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http HttpSecurity 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecurityFilterChain 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">// 禁用 csrf(防止跨站请求伪造攻击)</span></span><br><span class="line">                .csrf(csrf -&gt; csrf.disable())</span><br><span class="line">                <span class="comment">// 配置登录操作</span></span><br><span class="line">                .formLogin(form -&gt; form</span><br><span class="line">                        .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                        .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                        .defaultSuccessUrl(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                        .successHandler(loginSuccessHandler)</span><br><span class="line">                        .failureHandler(loginFailureHandler))</span><br><span class="line">                <span class="comment">// 配置登出操作</span></span><br><span class="line">                .logout(logout -&gt; logout.logoutSuccessHandler(jwtLogoutSuccessHandler))</span><br><span class="line">                <span class="comment">// 使用无状态 session，即不使用 session 缓存数据</span></span><br><span class="line">                .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))</span><br><span class="line">                <span class="comment">// 设置白名单，允许特定路径的请求不进行身份验证</span></span><br><span class="line">                .authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">                        .requestMatchers(URL_WHITELIST).permitAll()</span><br><span class="line">                        .anyRequest().authenticated())</span><br><span class="line">                <span class="comment">// 配置异常处理器，处理身份验证和授权异常</span></span><br><span class="line">                .exceptionHandling(exception -&gt; exception</span><br><span class="line">                        .authenticationEntryPoint(jwtAuthenticationEntryPoint)</span><br><span class="line">                        .accessDeniedHandler(jwtAccessDeniedHandler))</span><br><span class="line">                <span class="comment">// 添加 JWT 身份验证过滤器</span></span><br><span class="line">                .authenticationProvider(authenticationProvider())</span><br><span class="line">                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>部署 vue3 项目</p><p>登录页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">        &lt;el-form</span><br><span class="line">                :rules=&quot;rules&quot;</span><br><span class="line">                ref=&quot;loginForm&quot;</span><br><span class="line">                v-loading=&quot;loading&quot;</span><br><span class="line">                element-loading-text=&quot;正在登录...&quot;</span><br><span class="line">                element-loading-spinner=&quot;el-icon-loading&quot;</span><br><span class="line">                element-loading-background=&quot;rgba(0, 0, 0, 0.8)&quot;</span><br><span class="line">                :model=&quot;loginForm&quot;</span><br><span class="line">                class=&quot;loginContainer&quot;&gt;</span><br><span class="line">            &lt;h3 class=&quot;loginTitle&quot;&gt; 系统登录 &lt;/h3&gt;</span><br><span class="line">            &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">                &lt;el-input size=&quot;normal&quot; type=&quot;text&quot; v-model=&quot;loginForm.username&quot; auto-complete=&quot;off&quot;</span><br><span class="line">                          placeholder=&quot;请输入用户名&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">            &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">                &lt;el-input size=&quot;normal&quot; type=&quot;password&quot; v-model=&quot;loginForm.password&quot; auto-complete=&quot;off&quot;</span><br><span class="line">                          placeholder=&quot;请输入密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">            &lt;el-button size=&quot;normal&quot; type=&quot;primary&quot; style=&quot;width: 100%;&quot; @click=&quot;submitLogin&quot;&gt; 登录 &lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">      name: &quot;Login&quot;,</span><br><span class="line">      data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">          loading: false,</span><br><span class="line">          rules: &#123;</span><br><span class="line">            username: [&#123;required: true, message: &#x27; 请输入用户名 &#x27;, trigger: &#x27;blur&#x27;&#125;],</span><br><span class="line">            password: [&#123;required: true, message: &#x27; 请输入密码 &#x27;, trigger: &#x27;blur&#x27;&#125;],</span><br><span class="line">          &#125;,</span><br><span class="line">          loginForm: &#123;</span><br><span class="line">            username: &#x27;&#x27;,</span><br><span class="line">            password: &#x27;&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted() &#123;</span><br><span class="line">        // 在组件加载后，检查本地存储中是否存在用户信息</span><br><span class="line">        const user = window.localStorage.getItem(&#x27;user&#x27;);</span><br><span class="line">        if (user) &#123;</span><br><span class="line">          // 如果用户信息存在，自动跳转到首页</span><br><span class="line">          this.$router.push(&#123; name: &#x27;index&#x27; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        async postRequest(url, data) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                const response = await this.$axios.post(url, data);</span><br><span class="line">                return response.data;</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                if (error.response) &#123;</span><br><span class="line">                    // 服务器返回错误</span><br><span class="line">                    const status = error.response.status;</span><br><span class="line">                    const errorMessage = error.response.data.message || &quot;Server Error&quot;;</span><br><span class="line">                    </span><br><span class="line">                    if (status === 500 &amp;&amp; errorMessage === &quot;Bad credentials&quot;) &#123;</span><br><span class="line">                        // 处理登录失败的逻辑，比如显示错误信息等</span><br><span class="line">                        alert(&#x27; 用户名或密码错误 &#x27;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 处理其他服务器错误</span><br><span class="line">                        console.error(`Server Error: $&#123;status&#125; - $&#123;errorMessage&#125;`);</span><br><span class="line">                        // 显示通用错误提示</span><br><span class="line">                        alert(&quot;服务器发生错误&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // 客户端请求错误，如网络问题等</span><br><span class="line">                    console.error(&quot;Client Request Error:&quot;, error.message);</span><br><span class="line">                    // 显示通用错误提示</span><br><span class="line">                    alert(&quot;请求发生错误&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">        async submitLogin() &#123;</span><br><span class="line">            this.$refs.loginForm.validate(async (valid) =&gt; &#123;</span><br><span class="line">                if (valid) &#123;</span><br><span class="line">                    this.loading = true;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        const resp = await this.postRequest(&#x27;sq/user/login&#x27;, this.loginForm);</span><br><span class="line">                        this.loading = false;</span><br><span class="line"></span><br><span class="line">                        if (resp &amp;&amp; resp.code === 200) &#123;</span><br><span class="line">                            // 处理登录成功的逻辑，保存用户信息等</span><br><span class="line">                            localStorage.setItem(&#x27;user&#x27;, resp.data.token);</span><br><span class="line">                            // 跳转到首页</span><br><span class="line">                            this.$router.push(&#123; name: &#x27;index&#x27; &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (error) &#123;</span><br><span class="line">                        alert(&quot;登录失败&quot;);</span><br><span class="line">                        this.loading = false;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .loginContainer &#123;</span><br><span class="line">        border-radius: 15px;</span><br><span class="line">        background-clip: padding-box;</span><br><span class="line">        margin: 180px auto;</span><br><span class="line">        width: 350px;</span><br><span class="line">        padding: 15px 35px 15px 35px;</span><br><span class="line">        background: #fff;</span><br><span class="line">        border: 1px solid #eaeaea;</span><br><span class="line">        box-shadow: 0 0 25px #cac6c6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loginTitle &#123;</span><br><span class="line">        margin: 15px auto 20px auto;</span><br><span class="line">        text-align: center;</span><br><span class="line">        color: #505458;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loginRemember &#123;</span><br><span class="line">        text-align: left;</span><br><span class="line">        margin: 0px 0px 15px 0px;</span><br><span class="line">    &#125;</span><br><span class="line">    .el-form-item__content&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>首页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=&quot;&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt; 你好 &lt;/h1&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;button @click=&quot;logout()&quot;&gt; 退出登录 &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            async logout() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    await this.$axios.get(&#x27;sq/user/logout&#x27;);</span><br><span class="line">                    // 清除本地存储的用户信息</span><br><span class="line">                    localStorage.removeItem(&#x27;user&#x27;);</span><br><span class="line">                    this.$router.push(&#x27;/login&#x27;);</span><br><span class="line">                &#125; catch (error) &#123;</span><br><span class="line">                    if (error.response) &#123;</span><br><span class="line">                        // 服务器返回错误</span><br><span class="line">                        const status = error.response.status;</span><br><span class="line">                        const errorMessage = error.response.data.message || &quot;Server Error&quot;;</span><br><span class="line">                        </span><br><span class="line">                        if (status === 500 &amp;&amp; errorMessage === &quot;不允许访问&quot;) &#123;</span><br><span class="line">                            // 处理不允许访问的逻辑，比如显示错误信息等</span><br><span class="line">                            alert(&quot;您无权访问&quot;);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            // 处理其他服务器错误</span><br><span class="line">                            console.error(`Server Error: $&#123;status&#125; - $&#123;errorMessage&#125;`);</span><br><span class="line">                            // 显示通用错误提示</span><br><span class="line">                            this.$message.error(&quot;服务器发生错误&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        // 客户端请求错误，如网络问题等</span><br><span class="line">                        console.error(&quot;Client Request Error:&quot;, error.message);</span><br><span class="line">                        // 显示通用错误提示</span><br><span class="line">                        this.$message.error(&quot;请求发生错误&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/main.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/dist/index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Index</span> <span class="keyword">from</span> <span class="string">&#x27;./components/index.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;./components/login.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 VueRouter</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(), <span class="comment">// 指定使用历史模式</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Index</span>, <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;&#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Login</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 检查是否需要登录权限</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresAuth</span>) &#123;</span><br><span class="line">      <span class="comment">// 从本地存储中获取用户信息</span></span><br><span class="line">      <span class="keyword">const</span> user = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">      <span class="comment">// 如果用户信息不存在，重定向到登录页</span></span><br><span class="line">      <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果存在用户信息，允许访问</span></span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果不需要登录权限，直接允许访问</span></span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 从本地存储或其他地方获取 Token</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>) ? <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>): <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 添加 Authorization 头</span></span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 ElementPlus，将 axios 设置为全局属性，并挂载应用</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 axios 设置为全局属性</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios;</span><br></pre></td></tr></table></figure><p>App</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title class_">Vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/sq&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/sq&#x27;</span>, <span class="comment">// 后端的根路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/sq/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="树形结构查询"><a href="#树形结构查询" class="headerlink" title="树形结构查询"></a>树形结构查询</h1><h2 id="数据库表结构-1"><a href="#数据库表结构-1" class="headerlink" title="数据库表结构"></a>数据库表结构</h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403011535402.png" alt="image-20240301153524227"></p><h2 id="表数据"><a href="#表数据" class="headerlink" title="表数据"></a>表数据</h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403011535020.png" alt="image-20240301153552904"></p><h2 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountryDTO</span> <span class="keyword">extends</span> <span class="title class_">Country</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//子节点</span></span><br><span class="line">    List&lt;CountryDTO&gt; countryDTOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CountryMapper</span> &#123;</span><br><span class="line">    List&lt;CountryDTO&gt; <span class="title function_">selectTreeNodes</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;review.mapper.CountryMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectTreeNodes&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;review.pojo.dto.CountryDTO&quot;</span>&gt;</span></span><br><span class="line">        with recursive t1 as (</span><br><span class="line">            select * from china p where id = #&#123;id&#125;</span><br><span class="line">                union all</span><br><span class="line">            select t.* from china t inner join t1 on t1.id = t.parentid</span><br><span class="line">        )</span><br><span class="line">        select *  from t1 order by t1.id, t1.parentid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CountryService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;CountryDTO&gt; <span class="title function_">get</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CountryService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CountryMapper countryMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CountryDTO&gt; <span class="title function_">get</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="comment">//取得数据库数据</span></span><br><span class="line">        List&lt;CountryDTO&gt; countryDTOS = countryMapper.selectTreeNodes(id);</span><br><span class="line">        <span class="comment">//给每个数据都加上 key</span></span><br><span class="line">        Map&lt;String, CountryDTO&gt; collect = countryDTOS.stream()</span><br><span class="line">                .filter(item -&gt; !id.equals(item.getId()))</span><br><span class="line">                <span class="comment">//key 通过 id 获取，value 为对象，如果有重复的 key 取第二个 key 覆盖第一个</span></span><br><span class="line">                .collect(Collectors.toMap(key -&gt; key.getId(), value -&gt; value, (key1, key2) -&gt; key2));</span><br><span class="line">        <span class="comment">//最终返回的集合</span></span><br><span class="line">        List&lt;CountryDTO&gt; countryDTOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//将子节点放入对应的父节点里</span></span><br><span class="line">        countryDTOS.stream()</span><br><span class="line">                <span class="comment">//排除根节点</span></span><br><span class="line">                .filter(item -&gt; !id.equals(item.getId()))</span><br><span class="line">                <span class="comment">//遍历每个元素</span></span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    <span class="comment">//如果它的上一个节点为根节点加入集合</span></span><br><span class="line">                    <span class="keyword">if</span>(item.getParentid().equals(id))&#123;</span><br><span class="line">                        countryDTOList.add(item);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//获取上一个节点</span></span><br><span class="line">                    <span class="type">CountryDTO</span> <span class="variable">countryDTO</span> <span class="operator">=</span> collect.get(item.getParentid());</span><br><span class="line">                    <span class="comment">//如果上一个节点不为 null</span></span><br><span class="line">                    <span class="keyword">if</span>(countryDTO != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(countryDTO.getCountryDTOS() == <span class="literal">null</span>)&#123;</span><br><span class="line">                            countryDTO.setCountryDTOS(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CountryDTO&gt;());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//将此节点添加到上一个节点中</span></span><br><span class="line">                        countryDTO.getCountryDTOS().add(item);</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> countryDTOList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountryController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CountryService countryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;List&lt;CountryDTO&gt;&gt; <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(countryService.get(<span class="string">&quot;0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/879x/Drawingbed/img/202403011540671.png" alt="image-20240301154046529"></p><h1 id="网络图片上传-下载"><a href="#网络图片上传-下载" class="headerlink" title="网络图片上传&#x2F;下载"></a>网络图片上传&#x2F;下载</h1><h2 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> 我的 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">object-fit</span>: cover;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 文件上传 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;uploadForm&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;uploadFile()&quot;</span>&gt;</span> 上传文件 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 上传图片预览 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 文件下载 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;downloadFile()&quot;</span>&gt;</span> 下载文件 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fileName;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 文件上传函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取文件输入框的 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> fileInput = $(<span class="string">&#x27;#fileInput&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(fileInput)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取选择的文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(file)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建 FormData 对象，用于将文件数据发送到服务器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">        formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用 jQuery 的 AJAX 方法发送文件到后端</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 后端接收文件的 URL</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;/upload&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 请求类型为 POST</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送的数据为 FormData 对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: formData,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 不对数据进行处理，由 FormData 处理</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">processData</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 不设置内容类型，让浏览器自动识别</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 成功时的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27; 文件上传成功 &#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                fileName = <span class="title function_">getName</span>(data.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;images/&quot;</span> + data.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 失败时的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27; 文件上传失败:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 文件下载</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">downloadFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> url = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img&quot;</span>).<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;/download&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fileUrl</span>: <span class="string">&quot;http://localhost/&quot;</span> + url,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fileName</span>: fileName</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">xhrFields</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(fileName);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([data], &#123; <span class="attr">type</span>: <span class="string">&quot;application/octet-stream&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                link.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span></span><br><span class="line"><span class="language-javascript">                link.<span class="property">download</span> = fileName;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span></span><br><span class="line"><span class="language-javascript">                link.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageController</span> &#123;</span><br><span class="line">    <span class="comment">// 文件上传目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UPLOAD_DIR</span> <span class="operator">=</span> <span class="string">&quot;D:/newImg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取上传文件的字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = file.getBytes();</span><br><span class="line">        <span class="comment">//生成随机的图片命名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//获取原图片命名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//截取后缀名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//拼接新名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> uuId + ext;</span><br><span class="line">        <span class="comment">//构建文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(UPLOAD_DIR + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">        <span class="comment">//将字节数组写入文件</span></span><br><span class="line">        Files.write(path,bytes);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用 url 下载</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downloadFile(<span class="meta">@RequestParam</span> String fileUrl,<span class="meta">@RequestParam</span> String fileName) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//定义一个 URL 对象，就是你想下载的图片的 URL 地址</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(fileUrl);</span><br><span class="line">        <span class="comment">//打开连接</span></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        <span class="comment">//设置请求方式为&quot;GET&quot;</span></span><br><span class="line">        connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        <span class="comment">//超过响应时间为 10 秒</span></span><br><span class="line">        connection.setConnectTimeout(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//通过输入流获取图片数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">        <span class="comment">//得到图片的二进制数据，以二进制封装得到数据，具有通用性</span></span><br><span class="line">        <span class="type">byte</span>[] data = readInputStream(is);</span><br><span class="line">        <span class="keyword">return</span> getResponseEntity(fileName, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用上传到本地的图片下载</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/downloadImg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downloadImg(<span class="meta">@RequestParam</span> String fileName) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//构建文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(UPLOAD_DIR + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取文件的字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] data = Files.readAllBytes(path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getResponseEntity(fileName,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建响应文件的各种信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; getResponseEntity(String fileName, <span class="type">byte</span>[] data) &#123;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;.jpg&quot;</span>.equals(ext)) &#123;</span><br><span class="line">            headers.setContentType(MediaType.IMAGE_JPEG);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;.png&quot;</span>.equals(ext))&#123;</span><br><span class="line">            headers.setContentType(MediaType.IMAGE_PNG);</span><br><span class="line">        &#125;</span><br><span class="line">        headers.setContentDispositionFormData(<span class="string">&quot;attachment&quot;</span>, fileName);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                .headers(headers)</span><br><span class="line">                .body(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] readInputStream(InputStream inStream) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">outStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="comment">//创建一个 Buffer 字符串</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">6024</span>];</span><br><span class="line">        <span class="comment">//每次读取的字符串长度，如果为-1，代表全部读取完毕</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">//使用一个输入流从 buffer 里把数据读取出来</span></span><br><span class="line">        <span class="keyword">while</span> ((len = inStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//用输出流往 buffer 里写入数据，中间参数代表从哪个位置开始读，len 代表读取的长度</span></span><br><span class="line">            outStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭输入流</span></span><br><span class="line">        inStream.close();</span><br><span class="line">        <span class="comment">//把 outStream 里的数据写入内存</span></span><br><span class="line">        <span class="keyword">return</span> outStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
